{
  "language": "Solidity",
  "sources": {
    "src/helpers/ERC20TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\nimport \"./EthAddressLib.sol\";\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary ERC20TransferHelper {\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (underlying == EthAddressLib.ethAddress()) {\r\n            // Sanity checks\r\n            require(tx.origin == from || msg.sender == from, \"sender mismatch\");\r\n            require(msg.value == amount, \"value mismatch\");\r\n\r\n            return amount;\r\n        } else {\r\n            require(msg.value == 0, \"don't support msg.value\");\r\n            uint256 balanceBefore = ERC20Interface(underlying).balanceOf(\r\n                address(this)\r\n            );\r\n            (bool success, bytes memory data) = underlying.call(\r\n                abi.encodeWithSelector(\r\n                    ERC20Interface.transferFrom.selector,\r\n                    from,\r\n                    address(this),\r\n                    amount\r\n                )\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"STF\"\r\n            );\r\n\r\n            // Calculate the amount that was *actually* transferred\r\n            uint256 balanceAfter = ERC20Interface(underlying).balanceOf(\r\n                address(this)\r\n            );\r\n            require(\r\n                balanceAfter >= balanceBefore,\r\n                \"TOKEN_TRANSFER_IN_OVERFLOW\"\r\n            );\r\n            return balanceAfter - balanceBefore; // underflow already checked above, just subtract\r\n        }\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address payable to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (underlying == EthAddressLib.ethAddress()) {\r\n            (bool success, ) = to.call{value: amount}(new bytes(0));\r\n            require(success, \"STE\");\r\n        } else {\r\n            (bool success, bytes memory data) = underlying.call(\r\n                abi.encodeWithSelector(\r\n                    ERC20Interface.transfer.selector,\r\n                    to,\r\n                    amount\r\n                )\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"ST\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function getCashPrior(address underlying_) internal view returns (uint256) {\r\n        if (underlying_ == EthAddressLib.ethAddress()) {\r\n            uint256 startingBalance = sub(address(this).balance, msg.value);\r\n            return startingBalance;\r\n        } else {\r\n            ERC20Interface token = ERC20Interface(underlying_);\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n}\r\n"
    },
    "src/helpers/EthAddressLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nlibrary EthAddressLib {\r\n\r\n    /**\r\n    * @dev returns the address used within the protocol to identify ETH\r\n    * @return the address assigned to ETH\r\n     */\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}"
    },
    "src/voucher/VestingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\r\nimport \"../helpers/EthAddressLib.sol\";\r\nimport \"../helpers/ERC20TransferHelper.sol\";\r\nimport \"./interface/IVestingPool.sol\";\r\nimport \"./interface/IVNFTErc20Container.sol\";\r\nimport \"./library/VestingLibrary.sol\";\r\n\r\ninterface IERC20Optional {\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract VestingPool is IVestingPool {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable for uint64;\r\n    using VestingLibrary for VestingLibrary.Vesting;\r\n    using StringsUpgradeable for uint256;\r\n    event NewManager(address oldManager, address newManager);\r\n\r\n    address internal _underlying;\r\n    bool internal _initialized;\r\n\r\n    address public _admin;\r\n    address public pendingAdmin;\r\n    address public manager;\r\n    uint256 internal _totalAmount;\r\n\r\n    // tokenId => Vault\r\n    mapping(uint256 => VestingLibrary.Vesting) public vestingById;\r\n\r\n    // variables added in v2.1\r\n    string internal _baseImageURI;\r\n    string internal _baseExternalURI;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == _admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \"only manager\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address underlying_) public {\r\n        require(_initialized == false, \"already initialized\");\r\n        _admin = msg.sender;\r\n\r\n        if (underlying_ != EthAddressLib.ethAddress()) {\r\n            IERC20(underlying_).totalSupply();\r\n        }\r\n\r\n        _underlying = underlying_;\r\n        _initialized = true;\r\n    }\r\n\r\n    function isVestingPool() external pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function _setManager(address newManager_) public onlyAdmin {\r\n        address oldManager = manager;\r\n        manager = newManager_;\r\n        emit NewManager(oldManager, newManager_);\r\n    }\r\n\r\n    function _setBaseImageURI(string memory uri_) external onlyAdmin {\r\n        _baseImageURI = uri_;\r\n    }\r\n\r\n    function _setBaseExternalURI(string memory uri_) external onlyAdmin {\r\n        _baseExternalURI = uri_;\r\n    }\r\n\r\n    function mint(\r\n        uint8 claimType_,\r\n        address minter_,\r\n        uint256 tokenId_,\r\n        uint64 term_,\r\n        uint256 amount_,\r\n        uint64[] calldata maturities_,\r\n        uint32[] calldata percentages_,\r\n        string memory originalInvestor_\r\n    ) external virtual override onlyManager returns (uint256) {\r\n        return\r\n            _mint(\r\n                claimType_,\r\n                minter_,\r\n                tokenId_,\r\n                term_,\r\n                amount_,\r\n                maturities_,\r\n                percentages_,\r\n                originalInvestor_\r\n            );\r\n    }\r\n\r\n    struct MintLocalVar {\r\n        uint64 term;\r\n        uint256 sumPercentages;\r\n        uint256 mintPrincipal;\r\n        uint256 mintUnits;\r\n    }\r\n\r\n    function _mint(\r\n        uint8 claimType_,\r\n        address minter_,\r\n        uint256 tokenId_,\r\n        uint64 term_,\r\n        uint256 amount_,\r\n        uint64[] memory maturities_,\r\n        uint32[] memory percentages_,\r\n        string memory originalInvestor_\r\n    ) internal virtual returns (uint256) {\r\n        MintLocalVar memory vars;\r\n        require(\r\n            maturities_.length > 0 && maturities_.length == percentages_.length,\r\n            \"invalid maturities/percentages\"\r\n        );\r\n\r\n        if (claimType_ == VestingLibrary.CLAIM_TYPE_MULTI) {\r\n            vars.term = _sub(\r\n                maturities_[maturities_.length - 1],\r\n                maturities_[0]\r\n            );\r\n            require(vars.term == term_, \"term mismatch\");\r\n        }\r\n\r\n        for (uint256 i = 0; i < percentages_.length; i++) {\r\n            vars.sumPercentages = vars.sumPercentages.add(percentages_[i]);\r\n        }\r\n        require(\r\n            vars.sumPercentages == VestingLibrary.FULL_PERCENTAGE,\r\n            \"invalid percentages\"\r\n        );\r\n\r\n        ERC20TransferHelper.doTransferIn(_underlying, minter_, amount_);\r\n        VestingLibrary.Vesting storage vesting = vestingById[tokenId_];\r\n        (, vars.mintPrincipal) = vesting.mint(\r\n            claimType_,\r\n            term_,\r\n            amount_,\r\n            maturities_,\r\n            percentages_,\r\n            originalInvestor_\r\n        );\r\n\r\n        vars.mintUnits = amount2units(vars.mintPrincipal);\r\n\r\n        emit MintVesting(\r\n            claimType_,\r\n            minter_,\r\n            tokenId_,\r\n            term_,\r\n            maturities_,\r\n            percentages_,\r\n            amount_,\r\n            amount_\r\n        );\r\n\r\n        _totalAmount = _totalAmount.add(amount_);\r\n\r\n        return vars.mintUnits;\r\n    }\r\n\r\n    function recharge(\r\n        address recharger_,\r\n        address owner_,\r\n        uint256 tokenId_,\r\n        uint256 amount_\r\n    ) external virtual override onlyManager returns (uint256) {\r\n        ERC20TransferHelper.doTransferIn(_underlying, recharger_, amount_);\r\n        VestingLibrary.Vesting storage vesting = vestingById[tokenId_];\r\n        vesting.recharge(amount_);\r\n\r\n        emit RechargeVesting(recharger_, owner_, tokenId_, amount_, amount_);\r\n\r\n        _totalAmount = _totalAmount.add(amount_);\r\n        uint256 rechargeUnits = amount2units(amount_);\r\n        return rechargeUnits;\r\n    }\r\n\r\n    function claim(\r\n        address payable payee,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external virtual override onlyManager returns (uint256) {\r\n        return _claim(payee, tokenId, amount);\r\n    }\r\n\r\n    function claimableAmount(uint256 tokenId_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        VestingLibrary.Vesting memory vesting = vestingById[tokenId_];\r\n        if (!vesting.isValid) {\r\n            return 0;\r\n        }\r\n\r\n        if (\r\n            vesting.claimType == VestingLibrary.CLAIM_TYPE_LINEAR ||\r\n            vesting.claimType == VestingLibrary.CLAIM_TYPE_SINGLE\r\n        ) {\r\n            if (block.timestamp >= vesting.maturities[0]) {\r\n                // 到期或过期\r\n                return vesting.principal;\r\n            }\r\n            uint256 timeRemained = vesting.maturities[0] - block.timestamp;\r\n            // 尚未开始解锁\r\n            if (timeRemained >= vesting.term) {\r\n                return 0;\r\n            }\r\n\r\n            uint256 lockedAmount = vesting.vestingAmount.mul(timeRemained).div(\r\n                vesting.term\r\n            );\r\n            if (lockedAmount > vesting.principal) {\r\n                return 0;\r\n            }\r\n            return\r\n                vesting.principal.sub(lockedAmount, \"claimable amount error\");\r\n        } else if (vesting.claimType == VestingLibrary.CLAIM_TYPE_MULTI) {\r\n            //尚未开始解锁\r\n            if (block.timestamp < vesting.maturities[0]) {\r\n                return 0;\r\n            }\r\n\r\n            uint256 lockedPercentage;\r\n            for (uint256 i = vesting.maturities.length - 1; i >= 0; i--) {\r\n                if (vesting.maturities[i] <= block.timestamp) {\r\n                    break;\r\n                }\r\n                lockedPercentage = lockedPercentage.add(vesting.percentages[i]);\r\n            }\r\n\r\n            uint256 lockedAmount = vesting\r\n            .vestingAmount\r\n            .mul(lockedPercentage)\r\n            .div(VestingLibrary.FULL_PERCENTAGE, \"locked amount error\");\r\n            //避免先claim后再split，可能会因为精度导致locedAmount比principal多一点\r\n            if (lockedAmount > vesting.principal) {\r\n                return 0;\r\n            }\r\n            return\r\n                vesting.principal.sub(lockedAmount, \"claimable amount error\");\r\n        } else {\r\n            revert(\"unsupported claimType\");\r\n        }\r\n    }\r\n\r\n    function _claim(\r\n        address payable payee_,\r\n        uint256 tokenId_,\r\n        uint256 claimAmount_\r\n    ) internal virtual returns (uint256) {\r\n        require(claimAmount_ > 0, \"cannot claim 0\");\r\n        require(claimAmount_ <= claimableAmount(tokenId_), \"over claim\");\r\n\r\n        VestingLibrary.Vesting storage v = vestingById[tokenId_];\r\n\r\n        require(claimAmount_ <= v.principal, \"insufficient principal\");\r\n\r\n        v.claim(claimAmount_);\r\n\r\n        ERC20TransferHelper.doTransferOut(_underlying, payee_, claimAmount_);\r\n\r\n        _totalAmount = _totalAmount.sub(claimAmount_);\r\n\r\n        emit ClaimVesting(payee_, tokenId_, claimAmount_);\r\n        return amount2units(claimAmount_);\r\n    }\r\n\r\n    function transferVesting(\r\n        address from_,\r\n        uint256 tokenId_,\r\n        address to_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_\r\n    ) public virtual override onlyManager {\r\n        uint256 transferAmount = units2amount(transferUnits_);\r\n        (\r\n            uint256 transferVestingAmount,\r\n            uint256 transferPrincipal\r\n        ) = vestingById[tokenId_].transfer(\r\n            vestingById[targetTokenId_],\r\n            transferAmount\r\n        );\r\n        emit TransferVesting(\r\n            from_,\r\n            tokenId_,\r\n            to_,\r\n            targetTokenId_,\r\n            transferVestingAmount,\r\n            transferPrincipal\r\n        );\r\n    }\r\n\r\n    function splitVesting(\r\n        address owner_,\r\n        uint256 tokenId_,\r\n        uint256 newTokenId_,\r\n        uint256 splitUnits_\r\n    ) public virtual override onlyManager {\r\n        uint256 splitAmount = units2amount(splitUnits_);\r\n        (uint256 splitVestingAmount, uint256 splitPrincipal) = vestingById[\r\n            tokenId_\r\n        ]\r\n        .split(vestingById[newTokenId_], splitAmount);\r\n        emit SplitVesting(\r\n            owner_,\r\n            tokenId_,\r\n            newTokenId_,\r\n            splitVestingAmount,\r\n            splitPrincipal\r\n        );\r\n    }\r\n\r\n    function mergeVesting(\r\n        address owner_,\r\n        uint256 tokenId_,\r\n        uint256 targetTokenId_\r\n    ) public virtual override onlyManager {\r\n        (uint256 mergeVestingAmount, uint256 mergePrincipal) = vestingById[\r\n            tokenId_\r\n        ]\r\n        .merge(vestingById[targetTokenId_]);\r\n        delete vestingById[tokenId_];\r\n        emit MergeVesting(\r\n            owner_,\r\n            tokenId_,\r\n            targetTokenId_,\r\n            mergeVestingAmount,\r\n            mergePrincipal\r\n        );\r\n    }\r\n\r\n    function units2amount(uint256 units_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return units_ * 1;\r\n    }\r\n\r\n    function amount2units(uint256 amount_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return amount_ / 1;\r\n    }\r\n\r\n    function totalAmount() public view override returns (uint256) {\r\n        return _totalAmount;\r\n    }\r\n\r\n    struct VestingSnapShot {\r\n        uint256 vestingAmount_;\r\n        uint256 principal_;\r\n        uint64[] maturities_;\r\n        uint32[] percentages_;\r\n        uint64 term_;\r\n        uint8 claimType_;\r\n        uint256 claimableAmount;\r\n        bool isValid_;\r\n        string originalInvestor_;\r\n    }\r\n\r\n    function getVestingSnapshot(uint256 tokenId_)\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint8,\r\n            uint64,\r\n            uint256,\r\n            uint256,\r\n            uint64[] memory,\r\n            uint32[] memory,\r\n            uint256,\r\n            string memory,\r\n            bool\r\n        )\r\n    {\r\n        VestingSnapShot memory vars;\r\n        vars.vestingAmount_ = vestingById[tokenId_].vestingAmount;\r\n        vars.principal_ = vestingById[tokenId_].principal;\r\n        vars.maturities_ = vestingById[tokenId_].maturities;\r\n        vars.percentages_ = vestingById[tokenId_].percentages;\r\n        vars.term_ = vestingById[tokenId_].term;\r\n        vars.claimType_ = vestingById[tokenId_].claimType;\r\n        vars.claimableAmount = claimableAmount(tokenId_);\r\n        vars.isValid_ = vestingById[tokenId_].isValid;\r\n        vars.originalInvestor_ = vestingById[tokenId_].originalInvestor;\r\n        return (\r\n            vars.claimType_,\r\n            vars.term_,\r\n            vars.vestingAmount_,\r\n            vars.principal_,\r\n            vars.maturities_,\r\n            vars.percentages_,\r\n            vars.claimableAmount,\r\n            vars.originalInvestor_,\r\n            vars.isValid_\r\n        );\r\n    }\r\n\r\n    function underlying() public view override returns (address) {\r\n        return _underlying;\r\n    }\r\n\r\n    function _setPendingAdmin(address newPendingAdmin) public {\r\n        require(msg.sender == _admin, \"only admin\");\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n    }\r\n\r\n    function _acceptAdmin() public {\r\n        require(\r\n            msg.sender == pendingAdmin && msg.sender != address(0),\r\n            \"only pending admin\"\r\n        );\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = _admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        _admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, _admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n\r\n    function _add(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        uint64 c = a + b;\r\n        require(c >= a, \"add-overflow\");\r\n        return c;\r\n    }\r\n\r\n    function _sub(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b <= a, \"sub-overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    struct UnderlyingInfo {\r\n        address underlying;\r\n        string symbol;\r\n        uint8 decimals;\r\n    }\r\n\r\n    function getInfo(uint256 tokenId, address owner, string memory tokenSymbol) \r\n        external \r\n        view \r\n        override \r\n        returns (string memory) \r\n    {\r\n        string memory underlyingSymbol;\r\n        uint8 underlyingDecimals;\r\n        if (_underlying == EthAddressLib.ethAddress()) {\r\n            underlyingSymbol = \"ETH\";\r\n            underlyingDecimals = 18;\r\n        } else {\r\n            underlyingSymbol = IERC20Optional(_underlying).symbol();\r\n            underlyingDecimals = IERC20Optional(_underlying).decimals();\r\n        }\r\n\r\n        UnderlyingInfo memory underlyingInfo = UnderlyingInfo(_underlying, underlyingSymbol, underlyingDecimals);\r\n\r\n        return string(\r\n            abi.encodePacked(\r\n                'data:application/json,',\r\n                abi.encodePacked(\r\n                    '{\"name\":\"', name(tokenId, underlyingSymbol, underlyingDecimals),\r\n                    '\", \"description\":\"', description(tokenId, underlyingSymbol),\r\n                    '\",\"image\": \"', _baseImageURI, tokenSymbol, '/', tokenId.toString(),\r\n                    '.png\",\"external_url\":\"', _baseExternalURI, tokenSymbol, '/', tokenId.toString(),\r\n                    '\", \"properties\": ', properties(tokenId, owner, underlyingInfo),\r\n                    '}'\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function name(uint256 tokenId, string memory underlyingSymbol, uint8 underlyingDecimals) \r\n        internal \r\n        view  \r\n        returns (bytes memory) \r\n    {\r\n        uint8 claimType = vestingById[tokenId].claimType;\r\n        uint256 principal = vestingById[tokenId].principal;\r\n\r\n        bytes memory typeName;\r\n        if (claimType == 0) {\r\n            typeName = 'Linear';\r\n        } else if (claimType == 1) {\r\n            typeName = 'OneTime';\r\n        } else if (claimType == 2) {\r\n            typeName = abi.encodePacked(vestingById[tokenId].maturities.length.toString(), ' Stages');\r\n        } else {\r\n            revert(\"unsupported claimType\");\r\n        }\r\n\r\n        return \r\n            abi.encodePacked(\r\n                underlyingSymbol, ' Allocation Voucher #', tokenId.toString(), ' - ', \r\n                trim(uint2decimal(principal, underlyingDecimals), underlyingDecimals - 2),\r\n                ' - ', typeName\r\n            );\r\n    }\r\n\r\n    function description(uint256 tokenId, string memory underlyingSymbol) \r\n        internal \r\n        pure \r\n        returns (bytes memory) \r\n    {\r\n        return \r\n            abi.encodePacked(\r\n                \"Voucher #\", tokenId.toString(), \" of \", underlyingSymbol, \r\n                \" allocation. Voucher is used to represent the lock-up allocations of a certain project, which is currently being used to trade in the OTC Market. Now, everyone can trade \",\r\n                underlyingSymbol, \"'s allocations on Opensea or Solv Vouchers by trading the Voucher onchain!\"\r\n            );\r\n    }\r\n\r\n    function properties(uint256 tokenId, address owner, UnderlyingInfo memory underlyingInfo) \r\n        internal \r\n        view \r\n        returns (bytes memory) \r\n    {\r\n        bytes memory data = abi.encodePacked(\r\n            '{\"owner\":\"', addressToString(owner),\r\n            '\",\"underlying\":\"', addressToString(underlyingInfo.underlying),\r\n            '\",\"underlyingSymbol\":\"', underlyingInfo.symbol,\r\n            '\",\"vestingAmount\":\"', uint2decimal(vestingById[tokenId].vestingAmount, underlyingInfo.decimals),\r\n            '\",\"principal\":\"', uint2decimal(vestingById[tokenId].principal, underlyingInfo.decimals),\r\n            '\",\"claimType\":\"', uint2claimType(vestingById[tokenId].claimType),\r\n            '\",\"claimableAmount\":\"', uint2decimal(claimableAmount(tokenId), underlyingInfo.decimals),\r\n            '\",\"percentages\":', percentArray2str(vestingById[tokenId].percentages),\r\n            ',\"maturities\":', uintArray2str(vestingById[tokenId].maturities)\r\n        );\r\n\r\n        if (vestingById[tokenId].term > 0) {\r\n            data = abi.encodePacked(data, ',\"term\":\"', second2day(vestingById[tokenId].term), ' days\"');\r\n        }\r\n\r\n        bytes memory originalInvestor = bytes(vestingById[tokenId].originalInvestor);\r\n        if (originalInvestor.length > 0) {\r\n            data = abi.encodePacked(data, ',\"originalInvestor\":\"', originalInvestor, '\"');\r\n        }\r\n\r\n        return abi.encodePacked(data, '}');\r\n    }\r\n\r\n    function uintArray2str(uint64[] storage array) \r\n        private \r\n        view \r\n        returns (bytes memory) \r\n    {\r\n        bytes memory pack = abi.encodePacked('[');\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (i == array.length - 1) {\r\n                pack = abi.encodePacked(pack, uint256(array[i]).toString());\r\n            } else {\r\n                pack = abi.encodePacked(pack, uint256(array[i]).toString(), ',');\r\n            }\r\n        }\r\n        return abi.encodePacked(pack, ']');\r\n    }\r\n\r\n    function percentArray2str(uint32[] storage array) \r\n        private \r\n        view \r\n        returns (string memory) \r\n    {\r\n        bytes memory pack = abi.encodePacked('[');\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            bytes memory percent = abi.encodePacked('\"', uint2decimal(array[i], 2), '%\"');\r\n\r\n            if (i == array.length - 1) {\r\n                pack = abi.encodePacked(pack, percent);\r\n            } else {\r\n                pack = abi.encodePacked(pack, percent, ',');\r\n            }\r\n        }\r\n        pack = abi.encodePacked(pack, ']');\r\n        return string(pack);\r\n    }\r\n\r\n    function uint2claimType(uint8 claimType) \r\n        private\r\n        pure \r\n        returns (string memory) \r\n    {\r\n        return claimType == 0 ? 'Linear' : claimType == 1 ? 'OneTime' : claimType == 2 ? 'Staged' : 'unknown';\r\n    }\r\n\r\n    function uint2decimal(uint256 number, uint8 decimals) \r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        uint256 base = 10 ** decimals;\r\n        string memory round = number.div(base).toString();\r\n        string memory fraction = number.mod(base).toString();\r\n        uint256 fractionLength = bytes(fraction).length;\r\n\r\n        bytes memory fullStr = abi.encodePacked(round, '.');\r\n        if (fractionLength < decimals) {\r\n            for (uint8 i = 0; i < decimals - fractionLength; i++) {\r\n                fullStr = abi.encodePacked(fullStr, '0');\r\n            }\r\n        }\r\n\r\n        return abi.encodePacked(fullStr, fraction);\r\n    }\r\n\r\n    function second2day(uint256 second)\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        return uint2decimal(second.div(864), 2);\r\n    }\r\n\r\n    function trim(bytes memory oriString, uint256 cutLength) \r\n        private \r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory newString = new bytes(oriString.length - cutLength);\r\n        uint256 index = newString.length;\r\n        while (index-- > 0) {\r\n            newString[index] = oriString[index];\r\n        }\r\n        return newString;\r\n    }\r\n\r\n    function addressToString(address _addr) \r\n        private \r\n        pure \r\n        returns (string memory) \r\n    {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\r\n            str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "src/voucher/interface/IVestingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVestingPool {\r\n   event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n    event MintVesting(\r\n        uint8 indexed claimType,\r\n        address indexed minter,\r\n        uint256 indexed tokenId,\r\n        uint64 term,\r\n        uint64[] maturities,\r\n        uint32[] percentages,\r\n        uint256 vestingAmount,\r\n        uint256 principal\r\n    );\r\n    event ClaimVesting(\r\n        address indexed payee,\r\n        uint256 indexed tokenId,\r\n        uint256 claimAmount\r\n    );\r\n    event RechargeVesting(\r\n        address indexed recharger,\r\n        address indexed owner,\r\n        uint256 indexed tokenId,\r\n        uint256 rechargeVestingAmount,\r\n        uint256 rechargePrincipal\r\n    );\r\n    event TransferVesting(\r\n        address indexed from,\r\n        uint256 indexed tokenId,\r\n        address indexed to,\r\n        uint256 targetTokenId,\r\n        uint256 transferVestingAmount,\r\n        uint256 transferPrincipal\r\n    );\r\n    event SplitVesting(\r\n        address indexed owner,\r\n        uint256 indexed tokenId,\r\n        uint256 newTokenId,\r\n        uint256 splitVestingAmount,\r\n        uint256 splitPricipal\r\n    );\r\n    event MergeVesting(\r\n        address indexed owner,\r\n        uint256 indexed tokenId,\r\n        uint256 indexed targetTokenId,\r\n        uint256 mergeVestingAmount,\r\n        uint256 mergePrincipal\r\n    );\r\n\r\n    function isVestingPool() external pure returns (bool);\r\n\r\n    function mint(\r\n        uint8 claimType_,\r\n        address minter_,\r\n        uint256 tokenId_,\r\n        uint64 term_,\r\n        uint256 amount_,\r\n        uint64[] calldata maturities_,\r\n        uint32[] calldata percentages_,\r\n        string memory originalInvestor_\r\n    ) external returns (uint256 mintUnits);\r\n\r\n    function claim(address payable payee, uint256 tokenId,\r\n        uint256 amount) external returns(uint256 claimUnit);\r\n\r\n    function claimableAmount(uint256 tokenId_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function recharge(address recharger_, address owner_, uint256 tokenId_, uint256 amount_) \r\n        external \r\n        returns (uint256);\r\n\r\n    function transferVesting(\r\n        address from_,\r\n        uint256 tokenId_,\r\n        address to_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_\r\n    ) external;\r\n\r\n    function splitVesting(address owner_, uint256 tokenId_, uint256 newTokenId_,\r\n        uint256 splitUnits_) external;\r\n\r\n    function mergeVesting(address owner_, uint256 tokenId_,\r\n        uint256 targetTokenId_) external;\r\n\r\n    function units2amount(uint256 units_) external view returns (uint256);\r\n    function amount2units(uint256 units_) external view returns (uint256);\r\n    function totalAmount() external view returns(uint256);\r\n\r\n    function getVestingSnapshot(uint256 tokenId_)\r\n    external\r\n    view\r\n    returns (\r\n        uint8 claimType_,\r\n        uint64 term_,\r\n        uint256 vestingAmount_,\r\n        uint256 principal_,\r\n        uint64[] memory maturities_,\r\n        uint32[] memory percentages_,\r\n        uint256 availableWithdrawAmount_,\r\n        string memory originalInvestor_,\r\n        bool isValid_\r\n    );\r\n\r\n    function getInfo(uint256 tokenId, address owner, string memory tokenSymbol) external view returns (string memory);\r\n\r\n    function underlying() external view returns (address) ;\r\n}\r\n"
    },
    "src/voucher/interface/IVNFTErc20Container.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"../../vnft-core/interface/IVNFT.sol\";\r\nimport \"./IUnderlyingContainer.sol\";\r\n\r\ninterface IVNFTErc20Container is IVNFT, IUnderlyingContainer {\r\n    function getUnderlyingAmount(uint256 units) external view returns (uint256 underlyingAmount);\r\n    function getUnits(uint256 underlyingAmount) external view returns (uint256 units);\r\n}"
    },
    "src/voucher/library/VestingLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\nlibrary VestingLibrary {\r\n    using SafeMath for uint256;\r\n\r\n    uint32 constant internal FULL_PERCENTAGE = 10000;  // 释放比例基数，精确到小数点后两位\r\n    uint8 constant internal CLAIM_TYPE_LINEAR = 0;\r\n    uint8 constant internal CLAIM_TYPE_SINGLE = 1;\r\n    uint8 constant internal CLAIM_TYPE_MULTI = 2;\r\n\r\n    struct Vesting {\r\n        uint8 claimType; //0: 线性释放, 1: 单点释放, 2: 多点释放\r\n        uint64 term; // 0 : Non-fixed term , 1 - N : fixed term in seconds\r\n        uint64[] maturities; //到期时间（秒）\r\n        uint32[] percentages;  //到期释放比例\r\n        bool isValid; //是否有效\r\n        uint256 vestingAmount;\r\n        uint256 principal;\r\n        string originalInvestor;\r\n    }\r\n\r\n    function mint(\r\n        Vesting storage self,\r\n        uint8 claimType,\r\n        uint64 term,\r\n        uint256 amount,\r\n        uint64[] memory maturities,\r\n        uint32[] memory percentages,\r\n        string memory originalInvestor\r\n    ) internal returns (uint256, uint256) {\r\n        require(! self.isValid, \"vesting already exists\");\r\n        self.term = term;\r\n        self.maturities = maturities;\r\n        self.percentages = percentages;\r\n        self.claimType = claimType;\r\n        self.vestingAmount = amount;\r\n        self.principal = amount;\r\n        self.originalInvestor = originalInvestor;\r\n        self.isValid = true;\r\n        return (self.vestingAmount, self.principal);\r\n    }\r\n\r\n    function claim(Vesting storage self, uint256 amount) internal {\r\n        require(self.isValid, \"vesting not exists\");\r\n        self.principal = self.principal.sub(amount, \"insufficient principal\");\r\n    }\r\n\r\n    function recharge(Vesting storage self, uint256 amount) internal returns (uint256, uint256) {\r\n        require(self.isValid, \"vesting not exists\");\r\n        self.principal = self.principal.add(amount);\r\n        self.vestingAmount = self.vestingAmount.add(amount);\r\n        return (self.vestingAmount, self.principal);\r\n    }\r\n\r\n    function merge(Vesting storage self, Vesting storage target) internal returns (uint256 mergeVestingAmount, uint256 mergePrincipal) {\r\n        require(self.isValid && target.isValid, \"vesting not exists\");\r\n        mergeVestingAmount = self.vestingAmount;\r\n        mergePrincipal = self.principal;\r\n        require(mergePrincipal <= mergeVestingAmount, \"balance error\");\r\n        self.vestingAmount = 0;\r\n        self.principal = 0;\r\n        target.vestingAmount = target.vestingAmount.add(mergeVestingAmount);\r\n        target.principal = target.principal.add(mergePrincipal);\r\n        self.isValid = false;\r\n        return (mergeVestingAmount, mergePrincipal);\r\n    }\r\n\r\n    function split(Vesting storage source, Vesting storage create, uint256 amount) internal returns (uint256 splitVestingAmount, uint256 splitPrincipal){\r\n        require(source.isValid, \"vesting not exists\");\r\n        require(source.principal <= source.vestingAmount, \"balance error\");\r\n        splitVestingAmount = source.vestingAmount.mul(amount).div(source.principal);\r\n        source.vestingAmount = source.vestingAmount.sub(splitVestingAmount, \"split excess vestingAmount\");\r\n        source.principal = source.principal.sub(amount, \"split excess principal\");\r\n        mint(create, source.claimType, source.term, 0, source.maturities, source.percentages, source.originalInvestor);\r\n        create.vestingAmount = splitVestingAmount;\r\n        create.principal = amount;\r\n        return (splitVestingAmount, amount);\r\n    }\r\n\r\n    function transfer(Vesting storage source, Vesting storage target, uint256 amount ) internal returns (uint256 transferVestingAmount, uint256 transferPrincipal){\r\n        require(source.isValid, \"vesting not exists\");\r\n        transferPrincipal = amount;\r\n        transferVestingAmount = source.vestingAmount.mul(transferPrincipal).div(source.principal);\r\n        source.principal = source.principal.sub(transferPrincipal, \"transfer excess principal\");\r\n        source.vestingAmount = source.vestingAmount.sub(transferVestingAmount, \"transfer excess vestingAmount\");\r\n        if (! target.isValid) {\r\n            mint(target, source.claimType, source.term, 0, source.maturities, source.percentages, \"\");\r\n        }\r\n        target.vestingAmount = target.vestingAmount.add(transferVestingAmount);\r\n        target.principal = target.principal.add(transferPrincipal);\r\n        return (transferVestingAmount, transferPrincipal);\r\n    }\r\n}"
    },
    "src/vnft-core/interface/IVNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVNFT /* is IERC721 */{\r\n    event PartialTransfer(address indexed from, address indexed to, uint256 indexed tokenId, uint256 targetTokenId,\r\n        uint256 transferUnits);\r\n    event Split(address indexed owner, uint256 indexed tokenId, uint256 newTokenId, uint256 splitUnits);\r\n    event Merge(address indexed owner, uint256 indexed tokenId, uint256 indexed targetTokenId, uint256 mergeUnits);\r\n    event ApprovalUnits(address indexed owner, address indexed approved, uint256 indexed tokenId, uint256 approvalUnits);\r\n\r\n    function slotOf(uint256 tokenId)  external view returns(uint256 slot);\r\n\r\n    function balanceOfSlot(uint256 slot) external view returns (uint256 balance);\r\n    function tokenOfSlotByIndex(uint256 slot, uint256 index) external view returns (uint256 tokenId);\r\n    function unitsInToken(uint256 tokenId) external view returns (uint256 units);\r\n\r\n    function approve(address to, uint256 tokenId, uint256 units) external;\r\n    function allowance(uint256 tokenId, address spender) external view returns (uint256 allowed);\r\n\r\n    function split(uint256 tokenId, uint256[] calldata units) external returns (uint256[] memory newTokenIds);\r\n    function merge(uint256[] calldata tokenIds, uint256 targetTokenId) external;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units) external returns (uint256 newTokenId);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (uint256 newTokenId);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units) external;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units, bytes calldata data) external;\r\n}\r\n\r\ninterface IVNFTReceiver {\r\n    function onVNFTReceived(address operator, address from, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (bytes4);\r\n}"
    },
    "src/voucher/interface/IUnderlyingContainer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IUnderlyingContainer {\r\n    function totalUnderlyingAmount() external view returns (uint256);\r\n    function underlying() external view returns (address);\r\n}"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "src/vnft-core/library/AssetLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n//@title 资产相关结构及逻辑库\r\nlibrary AssetLibrary {\r\n    using SafeMath for uint256;\r\n\r\n    struct Asset {\r\n        uint256 slot; //标识资产的分类\r\n        uint256 units; //资产份数\r\n        bool isValid; //是否有效\r\n    }\r\n\r\n    //@notice 增加Vault的份额\r\n    //@dev\r\n    //@param self 需要增加份额的Vault的引用\r\n    //@param slot\r\n    function mint(Asset storage self, uint256 slot, uint256 units) internal {\r\n        if (! self.isValid) {\r\n            self.slot = slot;\r\n            self.isValid = true;\r\n        } else {\r\n            require(self.slot == slot, \"slot mismatch\");\r\n        }\r\n        self.units = self.units.add(units);\r\n    }\r\n\r\n    function merge(Asset storage self, Asset storage target) internal returns (uint256){\r\n        require(self.isValid && target.isValid, \"asset not exists\");\r\n        require(self.slot == target.slot, \"slot mismatch\");\r\n\r\n        uint256 mergeUnits = self.units;\r\n        self.units = self.units.sub(mergeUnits, \"merge excess units\");\r\n        target.units = target.units.add(mergeUnits);\r\n        self.isValid = false;\r\n\r\n        return (mergeUnits);\r\n    }\r\n\r\n    function transfer(Asset storage self, Asset storage target, uint256 units) internal {\r\n        require(self.isValid, \"asset not exists\");\r\n        self.units = self.units.sub(units, \"transfer excess units\");\r\n        if (target.isValid) {\r\n            require(self.slot == target.slot, \"slot mismatch\");\r\n        } else {\r\n            target.slot = self.slot;\r\n            target.isValid = true;\r\n        }\r\n\r\n        target.units = target.units.add(units);\r\n    }\r\n\r\n    function burn(Asset storage self, uint256 units) internal {\r\n        self.units = self.units.sub(units, \"burn excess units\");\r\n\r\n    }\r\n}"
    },
    "src/vnft-core/VNFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721BurnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"./interface/IVNFT.sol\";\r\nimport \"./library/AssetLibrary.sol\";\r\n\r\nabstract contract VNFTCore is IVNFT, ERC721Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AssetLibrary for AssetLibrary.Asset;\r\n    using AddressUpgradeable for address;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n\r\n    event Mint(address indexed minter, uint256 indexed tokenId, uint256 indexed slot, uint256 units);\r\n    event Burn(address indexed owner, uint256 indexed tokenId, uint256 units);\r\n\r\n    struct ApproveUnits {\r\n        bool isValid;\r\n        mapping(address => uint256) approvals;\r\n    }\r\n\r\n    bytes4 private constant _VNFT_RECEIVED = 0xb382cdcd;\r\n\r\n    //@dev The mapping of tokenId\r\n    mapping(uint256 => AssetLibrary.Asset) public assets;\r\n\r\n    //owner => tokenId => operator => units\r\n    mapping (address => mapping(uint256 => ApproveUnits)) private _tokenApprovalUnits;\r\n\r\n    //slot => tokenIds\r\n    mapping (uint256 => EnumerableSetUpgradeable.UintSet) private _slotTokens;\r\n\r\n    string private _contractURI;\r\n\r\n    function _initialize(string memory name_, string memory symbol_, string memory baseURI_,\r\n        string memory contractURI_)  internal {\r\n        ERC721Upgradeable.__ERC721_init(name_, symbol_);\r\n        ERC721Upgradeable._setBaseURI(baseURI_);\r\n        _contractURI = contractURI_;\r\n    }\r\n\r\n    function _setContractURI(string memory uri_) internal {\r\n        _contractURI = uri_;\r\n    }\r\n\r\n    function contractURI() public view returns (string memory) {\r\n        return _contractURI;\r\n    }\r\n\r\n    function _safeTransferUnitsFrom(address from_, address to_, uint256 tokenId_,\r\n        uint256 targetTokenId_, uint256 transferUnits_, bytes memory data_) internal virtual {\r\n        _transferUnitsFrom(from_, to_, tokenId_, targetTokenId_, transferUnits_);\r\n        require(_checkOnVNFTReceived(from_, to_, targetTokenId_, transferUnits_, data_),\r\n            \"to non VNFTReceiver implementer\");\r\n    }\r\n\r\n    function _transferUnitsFrom(address from_, address to_, uint256 tokenId_,\r\n        uint256 targetTokenId_, uint256 transferUnits_) internal virtual {\r\n        require(from_ == ownerOf(tokenId_), \"source token owner mismatch\");\r\n\r\n        //approve all后可不需要approve units\r\n        if (_msgSender() != from_ && ! isApprovedForAll(from_, _msgSender())) {\r\n            _tokenApprovalUnits[from_][tokenId_].approvals[_msgSender()] =\r\n                _tokenApprovalUnits[from_][tokenId_].approvals[_msgSender()].sub(transferUnits_, \"transfer units exceeds allowance\");\r\n        }\r\n\r\n        require(to_ != address(0), \"transfer to the zero address\");\r\n\r\n        if (! _exists(targetTokenId_)) {\r\n            ERC721Upgradeable._mint(to_, targetTokenId_);\r\n        } else {\r\n            require(ownerOf(targetTokenId_) == to_, \"target token owner mismatch\");\r\n        }\r\n\r\n        assets[tokenId_].transfer(assets[targetTokenId_], transferUnits_);\r\n\r\n        emit PartialTransfer(from_, to_, tokenId_, targetTokenId_, transferUnits_);\r\n    }\r\n\r\n    function _merge(uint256 tokenId_, uint256 targetTokenId_) internal  virtual {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"VNFT: not owner nor approved\");\r\n        require(_exists(targetTokenId_), \"target token not exists\");\r\n        require(tokenId_ != targetTokenId_, \"self merge not allowed\");\r\n\r\n        address owner = ownerOf(tokenId_);\r\n        require(owner == ownerOf(targetTokenId_), \"not same owner\");\r\n\r\n        uint256 mergeUnits = assets[tokenId_].merge(assets[targetTokenId_]);\r\n        _burn(tokenId_);\r\n\r\n        emit Merge(owner, tokenId_, targetTokenId_, mergeUnits);\r\n    }\r\n\r\n    function _splitUnits(uint256 tokenId_, uint256 newTokenId_, uint256 splitUnits_) internal  virtual {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"VNFT: not owner nor approved\");\r\n        require(! _exists(newTokenId_), \"new token already exists\");\r\n\r\n        assets[tokenId_].units = assets[tokenId_].units.sub(splitUnits_);\r\n\r\n        address owner = ownerOf(tokenId_);\r\n        _mintUnits(owner, newTokenId_, assets[tokenId_].slot, splitUnits_);\r\n\r\n        emit Split(owner, tokenId_, newTokenId_, splitUnits_);\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId, uint256 units) public virtual override {\r\n        _approveUnits(_msgSender(), to, tokenId, units);\r\n    }\r\n\r\n    function _mintUnits(address minter_, uint256 tokenId_, uint256 slot_, uint256 units_) internal virtual {\r\n        if (! _exists(tokenId_)) {\r\n            ERC721Upgradeable._mint(minter_, tokenId_);\r\n        }\r\n\r\n        assets[tokenId_].mint(slot_, units_);\r\n        if (! _slotTokens[slot_].contains(tokenId_)) {\r\n            _slotTokens[slot_].add(tokenId_);\r\n        }\r\n\r\n        emit Mint(minter_, tokenId_, slot_, units_);\r\n    }\r\n\r\n    function _exists(uint256 tokenId_) internal view virtual override returns (bool) {\r\n        return ERC721Upgradeable._exists(tokenId_);\r\n    }\r\n\r\n    function _burn(uint256 tokenId_) internal virtual override {\r\n        uint256 units = assets[tokenId_].units;\r\n        address owner = ownerOf(tokenId_);\r\n        uint256 slot = assets[tokenId_].slot;\r\n        if ( _slotTokens[slot].contains(tokenId_)) {\r\n            _slotTokens[slot].remove(tokenId_);\r\n        }\r\n        delete assets[tokenId_];\r\n        delete _tokenApprovalUnits[owner][tokenId_];\r\n        ERC721Upgradeable._burn(tokenId_);\r\n        emit Burn(owner, tokenId_, units);\r\n    }\r\n\r\n    function _burnUnits(uint256 tokenId_, uint256 burnUnits_) internal virtual returns (uint256 balance) {\r\n        address owner = ownerOf(tokenId_);\r\n        assets[tokenId_].burn(burnUnits_);\r\n        \r\n        emit Burn(owner, tokenId_, burnUnits_);\r\n\r\n        return assets[tokenId_].units;\r\n    }\r\n\r\n    function _approveUnits(address owner, address to, uint256 tokenId, uint256 units) internal virtual {\r\n        require(owner == ownerOf(tokenId), \"VNFT: only owner\");\r\n        _tokenApprovalUnits[owner][tokenId].isValid = true;\r\n        _tokenApprovalUnits[owner][tokenId].approvals[to] = units;\r\n        emit ApprovalUnits(owner, to, tokenId, units);\r\n    }\r\n\r\n    function allowance(uint256 tokenId, address spender) public view virtual override returns (uint256) {\r\n        address owner = ownerOf(tokenId);\r\n        return _tokenApprovalUnits[owner][tokenId].approvals[spender];\r\n    }\r\n\r\n    function unitsInToken(uint256 tokenId_) public view virtual override  returns (uint256) {\r\n        return assets[tokenId_].units;\r\n    }\r\n\r\n   function balanceOfSlot(uint256 slot) public view override returns (uint256) {\r\n       return _slotTokens[slot].length();\r\n   }\r\n    function tokenOfSlotByIndex(uint256 slot, uint256 index) public view override returns (uint256) {\r\n        return _slotTokens[slot].at(index);\r\n    }\r\n\r\n    function slotOf(uint256 tokenId_) override public view returns(uint256) {\r\n        return assets[tokenId_].slot;\r\n    }\r\n\r\n    function isValid(uint256 tokenId_) public view returns (bool) {\r\n        return assets[tokenId_].isValid;\r\n    }\r\n\r\n    function _checkOnVNFTReceived(address from_, address to_, uint256 tokenId_, uint256 units_,\r\n        bytes memory _data) internal returns (bool)\r\n    {\r\n        if (!to_.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to_.functionCall(abi.encodeWithSelector(\r\n                IVNFTReceiver(to_).onVNFTReceived.selector,\r\n                _msgSender(),\r\n                from_,\r\n                tokenId_,\r\n                units_,\r\n                _data\r\n            ), \"non VNFTReceiver implementer\");\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _VNFT_RECEIVED);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./ERC721Upgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721Burnable_init_unchained();\n    }\n\n    function __ERC721Burnable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721MetadataUpgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"../../introspection/ERC165Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/EnumerableSetUpgradeable.sol\";\nimport \"../../utils/EnumerableMapUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable, IERC721EnumerableUpgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\n    using StringsUpgradeable for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSetUpgradeable.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMapUpgradeable.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721Upgradeable.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721Upgradeable.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721ReceiverUpgradeable(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n    uint256[41] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMapUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/voucher/interface/IICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IICToken {\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    function mint(uint64 term_, uint256 amount_, uint64[] calldata maturities_, uint32[] calldata percentages_,\r\n        string memory originalInvestor_) external returns (uint256, uint256);\r\n\r\n    function claim(uint256 tokenId, uint256 amount)  external ;\r\n    function claimAll(uint256 tokenId)  external ;\r\n    function claimableAmount(uint256 tokenId_) external view returns(uint256);\r\n\r\n    function recharge(uint256 tokenId_, uint256 amount_) external;\r\n}"
    },
    "src/solver/interface/ISolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface ISolver {\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    function isSolver() external returns (bool);\r\n\r\n    function depositAllowed(\r\n        address product,\r\n        address depositor,\r\n        uint64 term,\r\n        uint256 depositAmount,\r\n        uint64[] calldata maturities\r\n    ) external returns (uint256);\r\n\r\n    function depositVerify(\r\n        address product,\r\n        address depositor,\r\n        uint256 depositAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64[] calldata maturities\r\n    ) external returns (uint256);\r\n\r\n    function withdrawAllowed(\r\n        address product,\r\n        address payee,\r\n        uint256 withdrawAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64 maturity\r\n    ) external returns (uint256);\r\n\r\n    function withdrawVerify(\r\n        address product,\r\n        address payee,\r\n        uint256 withdrawAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64 maturity\r\n    ) external returns (uint256);\r\n\r\n    function transferFromAllowed(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function transferFromVerify(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function mergeAllowed(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function mergeVerify(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function splitAllowed(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 newTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function splitVerify(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 newTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function needConvertUnsafeTransfer(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external view returns (bool);\r\n\r\n    function needRejectUnsafeTransfer(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external view returns (bool);\r\n\r\n    function publishFixedPriceAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 min,\r\n        uint256 max,\r\n        uint256 startTime,\r\n        bool useAllowList,\r\n        uint256 price\r\n    ) external returns (uint256);\r\n\r\n    function publishDecliningPriceAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 min,\r\n        uint256 max,\r\n        uint256 startTime,\r\n        bool useAllowList,\r\n        uint256 highest,\r\n        uint256 lowest,\r\n        uint256 duration,\r\n        uint256 interval\r\n    ) external returns (uint256);\r\n\r\n    function publishVerify(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 saleId,\r\n        uint256 units\r\n    ) external;\r\n\r\n    function buyAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address buyer,\r\n        address currency,\r\n        uint256 buyAmount,\r\n        uint256 buyUnits,\r\n        uint256 price\r\n    ) external returns (uint256);\r\n\r\n    function buyVerify(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address buyer,\r\n        address seller,\r\n        uint256 amount,\r\n        uint256 units,\r\n        uint256 price,\r\n        uint256 fee\r\n    ) external;\r\n\r\n    function removeAllow(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address seller\r\n    ) external returns (uint256);\r\n}\r\n"
    },
    "src/market/SolvICMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"../helpers/VNFTTransferHelper.sol\";\r\nimport \"../helpers/ERC20TransferHelper.sol\";\r\nimport \"./interface/external/IVNFT.sol\";\r\nimport \"./interface/external/ISolver.sol\";\r\nimport \"./interface/external/IUnderlyingContainer.sol\";\r\nimport \"./interface/ISolvICMarket.sol\";\r\nimport \"./PriceManager.sol\";\r\nimport \"./SafeMathUpgradeable128.sol\";\r\n\r\ncontract SolvICMarket is ISolvICMarket, PriceManager {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable128 for uint128;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n    event NewSolver(ISolver oldSolver, ISolver newSolver);\r\n\r\n    event AddMarket(\r\n        address indexed icToken,\r\n        uint64 precision,\r\n        uint8 feePayType,\r\n        uint8 feeType,\r\n        uint128 feeAmount,\r\n        uint16 feeRate\r\n    );\r\n\r\n    event RemoveMarket(address indexed icToken);\r\n\r\n    event SetCurrency(address indexed currency, bool enable);\r\n\r\n    event WithdrawFee(address icToken, uint256 reduceAmount);\r\n\r\n    struct Sale {\r\n        uint24 saleId;\r\n        uint24 tokenId;\r\n        uint32 startTime;\r\n        address seller;\r\n        PriceManager.PriceType priceType;\r\n        uint128 total; //sale units\r\n        uint128 units; //current units\r\n        uint128 min; //min units\r\n        uint128 max; //max units\r\n        address icToken; //sale asset\r\n        address currency; //pay currency\r\n        bool useAllowList;\r\n        bool isValid;\r\n    }\r\n\r\n    struct Market {\r\n        bool isValid;\r\n        uint64 precision;\r\n        FeeType feeType;\r\n        FeePayType feePayType;\r\n        uint128 feeAmount;\r\n        uint16 feeRate;\r\n    }\r\n\r\n    enum FeeType {\r\n        BY_AMOUNT,\r\n        FIXED\r\n    }\r\n\r\n    enum FeePayType {\r\n        SELLER_PAY,\r\n        BUYER_PAY\r\n    }\r\n\r\n    //saleId => struct Sale\r\n    mapping(uint24 => Sale) public sales;\r\n\r\n    //icToken => Market\r\n    mapping(address => Market) public markets;\r\n\r\n    mapping(address => bool) public currencies;\r\n\r\n    //icToken => saleId\r\n    mapping(address => EnumerableSetUpgradeable.UintSet) internal _icTokenSales;\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet)\r\n        internal _allowAddresses;\r\n\r\n    ISolver public solver;\r\n    uint24 public nextSaleId;\r\n    address payable public pendingAdmin;\r\n    uint24 public nextTradeId;\r\n    address payable public _admin;\r\n    bool public initialized;\r\n    uint16 internal constant PERCENTAGE_BASE = 10000;\r\n\r\n    // managers with authorities to set allow addresses of a voucher market\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet)\r\n        internal allowAddressManagers;\r\n\r\n    // records of user purchased units from an order\r\n    mapping(uint24 => mapping(address => uint128)) internal saleRecords;\r\n\r\n    uint16 public repoFeeRate;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == _admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowAddressManager(address icToken_) {\r\n        require(\r\n            msg.sender == _admin ||\r\n                allowAddressManagers[icToken_].contains(msg.sender),\r\n            \"only manager\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function initialize(ISolver solver_) public {\r\n        require(initialized == false, \"already initialized\");\r\n        _admin = msg.sender;\r\n        nextSaleId = 1;\r\n        nextTradeId = 1;\r\n        _setSolver(solver_);\r\n        initialized = true;\r\n    }\r\n\r\n    function publishFixedPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 price_\r\n    ) external virtual override returns (uint24 saleId) {\r\n        address seller = msg.sender;\r\n\r\n        uint256 err = solver.publishFixedPriceAllowed(\r\n            icToken_,\r\n            tokenId_,\r\n            seller,\r\n            currency_,\r\n            min_,\r\n            max_,\r\n            startTime_,\r\n            useAllowList_,\r\n            price_\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        PriceManager.PriceType priceType = PriceManager.PriceType.FIXED;\r\n        saleId = _publish(\r\n            seller,\r\n            icToken_,\r\n            tokenId_,\r\n            currency_,\r\n            priceType,\r\n            min_,\r\n            max_,\r\n            startTime_,\r\n            useAllowList_\r\n        );\r\n        PriceManager.setFixedPrice(saleId, price_);\r\n\r\n        emit FixedPriceSet(\r\n            icToken_,\r\n            saleId,\r\n            tokenId_,\r\n            uint8(priceType),\r\n            price_\r\n        );\r\n    }\r\n\r\n    struct PublishDecliningPriceLocalVars {\r\n        address icToken;\r\n        uint24 tokenId;\r\n        address currency;\r\n        uint128 min;\r\n        uint128 max;\r\n        uint32 startTime;\r\n        bool useAllowList;\r\n        uint128 highest;\r\n        uint128 lowest;\r\n        uint32 duration;\r\n        uint32 interval;\r\n        address seller;\r\n    }\r\n\r\n    function publishDecliningPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) external virtual override returns (uint24 saleId) {\r\n        PublishDecliningPriceLocalVars memory vars;\r\n        vars.seller = msg.sender;\r\n        vars.icToken = icToken_;\r\n        vars.tokenId = tokenId_;\r\n        vars.currency = currency_;\r\n        vars.min = min_;\r\n        vars.max = max_;\r\n        vars.startTime = startTime_;\r\n        vars.useAllowList = useAllowList_;\r\n        vars.highest = highest_;\r\n        vars.lowest = lowest_;\r\n        vars.duration = duration_;\r\n        vars.interval = interval_;\r\n\r\n        require(vars.interval > 0, \"interval cannot be 0\");\r\n        require(vars.lowest <= vars.highest, \"lowest > highest\");\r\n        require(vars.duration > 0, \"duration cannot be 0\");\r\n\r\n        uint256 err = solver.publishDecliningPriceAllowed(\r\n            vars.icToken,\r\n            vars.tokenId,\r\n            vars.seller,\r\n            vars.currency,\r\n            vars.min,\r\n            vars.max,\r\n            vars.startTime,\r\n            vars.useAllowList,\r\n            vars.highest,\r\n            vars.lowest,\r\n            vars.duration,\r\n            vars.interval\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        PriceManager.PriceType priceType = PriceManager\r\n            .PriceType\r\n            .DECLIINING_BY_TIME;\r\n        saleId = _publish(\r\n            vars.seller,\r\n            vars.icToken,\r\n            vars.tokenId,\r\n            vars.currency,\r\n            priceType,\r\n            vars.min,\r\n            vars.max,\r\n            vars.startTime,\r\n            vars.useAllowList\r\n        );\r\n\r\n        PriceManager.setDecliningPrice(\r\n            saleId,\r\n            vars.startTime,\r\n            vars.highest,\r\n            vars.lowest,\r\n            vars.duration,\r\n            vars.interval\r\n        );\r\n\r\n        emit DecliningPriceSet(\r\n            vars.icToken,\r\n            saleId,\r\n            vars.tokenId,\r\n            vars.highest,\r\n            vars.lowest,\r\n            vars.duration,\r\n            vars.interval\r\n        );\r\n    }\r\n\r\n    function _publish(\r\n        address seller_,\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        PriceManager.PriceType priceType_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_\r\n    ) internal returns (uint24 saleId) {\r\n        require(markets[icToken_].isValid, \"unsupported icToken\");\r\n        require(\r\n            currencies[currency_] ||\r\n                currency_ == IUnderlyingContainer(icToken_).underlying(),\r\n            \"unsupported currency\"\r\n        );\r\n        if (max_ > 0) {\r\n            require(min_ <= max_, \"min > max\");\r\n        }\r\n\r\n        IVNFT vnft = IVNFT(icToken_);\r\n\r\n        VNFTTransferHelper.doTransferIn(icToken_, seller_, tokenId_);\r\n\r\n        saleId = _generateNextSaleId();\r\n        uint256 units = vnft.unitsInToken(tokenId_);\r\n        require(units <= uint128(-1), \"exceeds uint128 max\");\r\n        sales[saleId] = Sale({\r\n            saleId: saleId,\r\n            seller: msg.sender,\r\n            tokenId: tokenId_,\r\n            total: uint128(units),\r\n            units: uint128(units),\r\n            startTime: startTime_,\r\n            min: min_,\r\n            max: max_,\r\n            icToken: icToken_,\r\n            currency: currency_,\r\n            priceType: priceType_,\r\n            useAllowList: useAllowList_,\r\n            isValid: true\r\n        });\r\n        Sale storage sale = sales[saleId];\r\n        _icTokenSales[icToken_].add(saleId);\r\n        emit Publish(\r\n            sale.icToken,\r\n            sale.seller,\r\n            sale.tokenId,\r\n            saleId,\r\n            uint8(sale.priceType),\r\n            sale.units,\r\n            sale.startTime,\r\n            sale.currency,\r\n            sale.min,\r\n            sale.max,\r\n            sale.useAllowList\r\n        );\r\n        solver.publishVerify(\r\n            sale.icToken,\r\n            sale.tokenId,\r\n            sale.seller,\r\n            sale.currency,\r\n            sale.saleId,\r\n            sale.units\r\n        );\r\n\r\n        return saleId;\r\n    }\r\n\r\n    function buyByAmount(uint24 saleId_, uint256 amount_)\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        returns (uint128 units_)\r\n    {\r\n        Sale storage sale = sales[saleId_];\r\n        address buyer = msg.sender;\r\n        uint128 fee = _getFee(sale.icToken, sale.currency, amount_);\r\n        uint128 price = PriceManager.price(sale.priceType, sale.saleId);\r\n        uint256 units256;\r\n        if (markets[sale.icToken].feePayType == FeePayType.BUYER_PAY) {\r\n            units256 = amount_\r\n                .sub(fee, \"fee exceeds amount\")\r\n                .mul(uint256(markets[sale.icToken].precision))\r\n                .div(uint256(price));\r\n        } else {\r\n            units256 = amount_\r\n                .mul(uint256(markets[sale.icToken].precision))\r\n                .div(uint256(price));\r\n        }\r\n        require(units256 <= uint128(-1), \"exceeds uint128 max\");\r\n        units_ = uint128(units256);\r\n\r\n        uint256 err = solver.buyAllowed(\r\n            sale.icToken,\r\n            sale.tokenId,\r\n            saleId_,\r\n            buyer,\r\n            sale.currency,\r\n            amount_,\r\n            units_,\r\n            price\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        _buy(buyer, sale, amount_, units_, price, fee);\r\n        return units_;\r\n    }\r\n\r\n    function buyByUnits(uint24 saleId_, uint128 units_)\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        returns (uint256 amount_, uint128 fee_)\r\n    {\r\n        Sale storage sale = sales[saleId_];\r\n        address buyer = msg.sender;\r\n        uint128 price = PriceManager.price(sale.priceType, sale.saleId);\r\n\r\n        amount_ = uint256(units_).mul(uint256(price)).div(\r\n            uint256(markets[sale.icToken].precision)\r\n        );\r\n\r\n        if (\r\n            sale.currency == EthAddressLib.ethAddress() &&\r\n            sale.priceType == PriceType.DECLIINING_BY_TIME &&\r\n            amount_ != msg.value\r\n        ) {\r\n            amount_ = msg.value;\r\n            uint128 fee = _getFee(sale.icToken, sale.currency, amount_);\r\n            uint256 units256;\r\n            if (markets[sale.icToken].feePayType == FeePayType.BUYER_PAY) {\r\n                units256 = amount_\r\n                    .sub(fee, \"fee exceeds amount\")\r\n                    .mul(uint256(markets[sale.icToken].precision))\r\n                    .div(uint256(price));\r\n            } else {\r\n                units256 = amount_\r\n                    .mul(uint256(markets[sale.icToken].precision))\r\n                    .div(uint256(price));\r\n            }\r\n            require(units256 <= uint128(-1), \"exceeds uint128 max\");\r\n            units_ = uint128(units256);\r\n        }\r\n\r\n        fee_ = _getFee(sale.icToken, sale.currency, amount_);\r\n\r\n        uint256 err = solver.buyAllowed(\r\n            sale.icToken,\r\n            sale.tokenId,\r\n            saleId_,\r\n            buyer,\r\n            sale.currency,\r\n            amount_,\r\n            units_,\r\n            price\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        _buy(buyer, sale, amount_, units_, price, fee_);\r\n        return (amount_, fee_);\r\n    }\r\n\r\n    struct BuyLocalVar {\r\n        uint256 transferInAmount;\r\n        uint256 transferOutAmount;\r\n        FeePayType feePayType;\r\n    }\r\n\r\n    function _buy(\r\n        address buyer_,\r\n        Sale storage sale_,\r\n        uint256 amount_,\r\n        uint128 units_,\r\n        uint128 price_,\r\n        uint128 fee_\r\n    ) internal {\r\n        require(sale_.isValid, \"invalid saleId\");\r\n        require(block.timestamp >= sale_.startTime, \"not yet on sale\");\r\n        if (sale_.units >= sale_.min) {\r\n            require(units_ >= sale_.min, \"min units not met\");\r\n        }\r\n        if (sale_.max > 0) {\r\n            uint128 purchased = saleRecords[sale_.saleId][buyer_].add(units_);\r\n            require(purchased <= sale_.max, \"exceeds purchase limit\");\r\n            saleRecords[sale_.saleId][buyer_] = purchased;\r\n        }\r\n\r\n        if (sale_.useAllowList) {\r\n            require(\r\n                _allowAddresses[sale_.icToken].contains(buyer_),\r\n                \"not in allow list\"\r\n            );\r\n        }\r\n\r\n        sale_.units = sale_.units.sub(units_, \"insufficient units for sale\");\r\n        BuyLocalVar memory vars;\r\n        vars.feePayType = markets[sale_.icToken].feePayType;\r\n\r\n        if (vars.feePayType == FeePayType.BUYER_PAY) {\r\n            vars.transferInAmount = amount_.add(fee_);\r\n            vars.transferOutAmount = amount_;\r\n        } else if (vars.feePayType == FeePayType.SELLER_PAY) {\r\n            vars.transferInAmount = amount_;\r\n            vars.transferOutAmount = amount_.sub(fee_, \"fee exceeds amount\");\r\n        } else {\r\n            revert(\"unsupported feePayType\");\r\n        }\r\n\r\n        ERC20TransferHelper.doTransferIn(\r\n            sale_.currency,\r\n            buyer_,\r\n            vars.transferInAmount\r\n        );\r\n        if (units_ == IVNFT(sale_.icToken).unitsInToken(sale_.tokenId)) {\r\n            VNFTTransferHelper.doTransferOut(\r\n                sale_.icToken,\r\n                buyer_,\r\n                sale_.tokenId\r\n            );\r\n        } else {\r\n            VNFTTransferHelper.doTransferOut(\r\n                sale_.icToken,\r\n                buyer_,\r\n                sale_.tokenId,\r\n                units_\r\n            );\r\n        }\r\n\r\n        ERC20TransferHelper.doTransferOut(\r\n            sale_.currency,\r\n            payable(sale_.seller),\r\n            vars.transferOutAmount\r\n        );\r\n\r\n        emit Traded(\r\n            buyer_,\r\n            sale_.saleId,\r\n            sale_.icToken,\r\n            sale_.tokenId,\r\n            _generateNextTradeId(),\r\n            uint32(block.timestamp),\r\n            sale_.currency,\r\n            uint8(sale_.priceType),\r\n            price_,\r\n            units_,\r\n            amount_,\r\n            uint8(vars.feePayType),\r\n            fee_\r\n        );\r\n\r\n        solver.buyVerify(\r\n            sale_.icToken,\r\n            sale_.tokenId,\r\n            sale_.saleId,\r\n            buyer_,\r\n            sale_.seller,\r\n            amount_,\r\n            units_,\r\n            price_,\r\n            fee_\r\n        );\r\n\r\n        if (sale_.units == 0) {\r\n            emit Remove(\r\n                sale_.icToken,\r\n                sale_.seller,\r\n                sale_.saleId,\r\n                sale_.total,\r\n                sale_.total - sale_.units\r\n            );\r\n            delete sales[sale_.saleId];\r\n        }\r\n    }\r\n\r\n    function purchasedUnits(uint24 saleId_, address buyer_)\r\n        external\r\n        view\r\n        returns (uint128)\r\n    {\r\n        return saleRecords[saleId_][buyer_];\r\n    }\r\n\r\n    function remove(uint24 saleId_) public virtual override {\r\n        Sale memory sale = sales[saleId_];\r\n        require(sale.isValid, \"invalid sale\");\r\n        require(sale.seller == msg.sender, \"only seller\");\r\n\r\n        uint256 err = solver.removeAllow(\r\n            sale.icToken,\r\n            sale.tokenId,\r\n            sale.saleId,\r\n            sale.seller\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        VNFTTransferHelper.doTransferOut(\r\n            sale.icToken,\r\n            sale.seller,\r\n            sale.tokenId\r\n        );\r\n\r\n        delete sales[saleId_];\r\n        emit Remove(\r\n            sale.icToken,\r\n            sale.seller,\r\n            sale.saleId,\r\n            sale.total,\r\n            sale.total - sale.units\r\n        );\r\n    }\r\n\r\n    function _getFee(\r\n        address icToken_,\r\n        address currency_,\r\n        uint256 amount\r\n    ) internal view returns (uint128) {\r\n        if (currency_ == IUnderlyingContainer(icToken_).underlying()) {\r\n            uint256 fee = amount.mul(uint256(repoFeeRate)).div(PERCENTAGE_BASE);\r\n            require(fee <= uint128(-1), \"Fee: exceeds uint128 max\");\r\n            return uint128(fee);\r\n        }\r\n\r\n        Market storage market = markets[icToken_];\r\n        if (market.feeType == FeeType.FIXED) {\r\n            return market.feeAmount;\r\n        } else if (market.feeType == FeeType.BY_AMOUNT) {\r\n            uint256 fee = amount.mul(uint256(market.feeRate)).div(\r\n                uint256(PERCENTAGE_BASE)\r\n            );\r\n            require(fee <= uint128(-1), \"Fee: exceeds uint128 max\");\r\n            return uint128(fee);\r\n        } else {\r\n            revert(\"unsupported feeType\");\r\n        }\r\n    }\r\n\r\n    function getPrice(uint24 saleId_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint128)\r\n    {\r\n        return PriceManager.price(sales[saleId_].priceType, saleId_);\r\n    }\r\n\r\n    function totalSalesOfICToken(address icToken_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _icTokenSales[icToken_].length();\r\n    }\r\n\r\n    function saleIdOfICTokenByIndex(address icToken_, uint256 index_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _icTokenSales[icToken_].at(index_);\r\n    }\r\n\r\n    function _generateNextSaleId() internal returns (uint24) {\r\n        return nextSaleId++;\r\n    }\r\n\r\n    function _generateNextTradeId() internal returns (uint24) {\r\n        return nextTradeId++;\r\n    }\r\n\r\n    function _addMarket(\r\n        address icToken_,\r\n        uint64 precision_,\r\n        uint8 feePayType_,\r\n        uint8 feeType_,\r\n        uint128 feeAmount_,\r\n        uint16 feeRate_\r\n    ) public onlyAdmin {\r\n        markets[icToken_].isValid = true;\r\n        markets[icToken_].precision = precision_;\r\n        markets[icToken_].feePayType = FeePayType(feePayType_);\r\n        markets[icToken_].feeType = FeeType(feeType_);\r\n        markets[icToken_].feeAmount = feeAmount_;\r\n        markets[icToken_].feeRate = feeRate_;\r\n\r\n        emit AddMarket(\r\n            icToken_,\r\n            precision_,\r\n            feePayType_,\r\n            feeType_,\r\n            feeAmount_,\r\n            feeRate_\r\n        );\r\n    }\r\n\r\n    function _removeMarket(address icToken_) public onlyAdmin {\r\n        delete markets[icToken_];\r\n        emit RemoveMarket(icToken_);\r\n    }\r\n\r\n    function _setCurrency(address currency_, bool enable_) public onlyAdmin {\r\n        currencies[currency_] = enable_;\r\n        emit SetCurrency(currency_, enable_);\r\n    }\r\n\r\n    function _setRepoFeeRate(uint16 newRepoFeeRate_) external onlyAdmin {\r\n        repoFeeRate = newRepoFeeRate_;\r\n    }\r\n\r\n    function _withdrawFee(address icToken_, uint256 reduceAmount_)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            ERC20TransferHelper.getCashPrior(icToken_) >= reduceAmount_,\r\n            \"insufficient cash\"\r\n        );\r\n        ERC20TransferHelper.doTransferOut(icToken_, _admin, reduceAmount_);\r\n        emit WithdrawFee(icToken_, reduceAmount_);\r\n    }\r\n\r\n    function _addAllowAddress(\r\n        address icToken_,\r\n        address[] calldata addresses_,\r\n        bool resetExisting_\r\n    ) external onlyAllowAddressManager(icToken_) {\r\n        require(markets[icToken_].isValid, \"unsupported icToken\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _allowAddresses[\r\n            icToken_\r\n        ];\r\n\r\n        if (resetExisting_) {\r\n            while (set.length() != 0) {\r\n                set.remove(set.at(0));\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            set.add(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function _removeAllowAddress(\r\n        address icToken_,\r\n        address[] calldata addresses_\r\n    ) external onlyAllowAddressManager(icToken_) {\r\n        require(markets[icToken_].isValid, \"unsupported icToken\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _allowAddresses[\r\n            icToken_\r\n        ];\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            set.remove(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function isBuyerAllowed(address icToken_, address buyer_)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _allowAddresses[icToken_].contains(buyer_);\r\n    }\r\n\r\n    function setAllowAddressManager(\r\n        address icToken_,\r\n        address[] calldata managers_,\r\n        bool resetExisting_\r\n    ) external onlyAdmin {\r\n        require(markets[icToken_].isValid, \"unsupported icToken\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = allowAddressManagers[\r\n            icToken_\r\n        ];\r\n        if (resetExisting_) {\r\n            while (set.length() != 0) {\r\n                set.remove(set.at(0));\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < managers_.length; i++) {\r\n            set.add(managers_[i]);\r\n        }\r\n    }\r\n\r\n    function allowAddressManager(address icToken_, uint256 index_)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return allowAddressManagers[icToken_].at(index_);\r\n    }\r\n\r\n    function _setSolver(ISolver newSolver_) public virtual onlyAdmin {\r\n        ISolver oldSolver = solver;\r\n        require(newSolver_.isSolver(), \"invalid solver\");\r\n        solver = newSolver_;\r\n\r\n        emit NewSolver(oldSolver, newSolver_);\r\n    }\r\n\r\n    function _setPendingAdmin(address payable newPendingAdmin) public {\r\n        require(msg.sender == _admin, \"only admin\");\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n    }\r\n\r\n    function _acceptAdmin() public {\r\n        require(\r\n            msg.sender == pendingAdmin && msg.sender != address(0),\r\n            \"only pending admin\"\r\n        );\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = _admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        _admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, _admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n}\r\n"
    },
    "src/helpers/VNFTTransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ERC721Interface {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ninterface VNFTInterface {\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external returns (uint256 newTokenId);\r\n}\r\n\r\nlibrary VNFTTransferHelper {\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 tokenId\r\n    ) internal {\r\n        ERC721Interface token = ERC721Interface(underlying);\r\n        token.transferFrom(from, address(this), tokenId);\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        ERC721Interface token = ERC721Interface(underlying);\r\n        token.transferFrom(address(this), to, tokenId);\r\n    }\r\n\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) internal {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        token.safeTransferFrom(from, address(this), tokenId, units, \"\");\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) internal {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        token.safeTransferFrom(address(this), to, tokenId, units, \"\");\r\n    }\r\n}\r\n"
    },
    "src/market/interface/external/IVNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVNFT /* is IERC721 */{\r\n    event TransferUnits(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 transferUnits);\r\n    event Split(address owner, uint256 tokenId, uint256 newTokenId, uint256 splitUnits);\r\n    event Merge(address owner, uint256 tokenId, uint256 targetTokenId, uint256 mergeUnits);\r\n    event ApprovalUnits(address indexed owner, address indexed approved, uint256 indexed tokenId, uint256 approvalUnits);\r\n\r\n    function slotOf(uint256 tokenId)  external view returns(uint256 slot);\r\n\r\n    function balanceOfSlot(uint256 slot) external view returns (uint256 balance);\r\n    function tokenOfSlotByIndex(uint256 slot, uint256 index) external view returns (uint256 tokenId);\r\n    function unitsInToken(uint256 tokenId) external view returns (uint256 units);\r\n\r\n    function approve(address to, uint256 tokenId, uint256 units) external;\r\n    function allowance(uint256 tokenId, address spender) external view returns (uint256 allowed);\r\n\r\n    function split(uint256 tokenId, uint256[] calldata units) external returns (uint256[] memory newTokenIds);\r\n    function merge(uint256[] calldata tokenIds, uint256 targetTokenId) external;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units) external returns (uint256 newTokenId);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (uint256 newTokenId);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units) external;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units, bytes calldata data) external;\r\n}\r\n\r\ninterface IVNFTReceiver {\r\n    function onVNFTReceived(address operator, address from, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (bytes4);\r\n}"
    },
    "src/market/interface/external/ISolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ISolver {\r\n    \r\n    function isSolver() external returns (bool);\r\n\r\n    function depositAllowed(\r\n        address product,\r\n        address depositor,\r\n        uint64 term,\r\n        uint256 depositAmount,\r\n        uint64[] calldata maturities\r\n    ) external returns (uint256);\r\n\r\n    function depositVerify(\r\n        address product,\r\n        address depositor,\r\n        uint256 depositAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64[] calldata maturities\r\n    ) external returns (uint256);\r\n\r\n    function withdrawAllowed(\r\n        address product,\r\n        address payee,\r\n        uint256 withdrawAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64 maturity\r\n    ) external returns (uint256);\r\n\r\n    function withdrawVerify(\r\n        address product,\r\n        address payee,\r\n        uint256 withdrawAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64 maturity\r\n    ) external returns (uint256);\r\n\r\n    function transferFromAllowed(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function transferFromVerify(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function mergeAllowed(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function mergeVerify(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function splitAllowed(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 newTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function splitVerify(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 newTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function needConvertUnsafeTransfer(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external view returns (bool);\r\n\r\n    function needRejectUnsafeTransfer(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external view returns (bool);\r\n\r\n    function publishFixedPriceAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 min,\r\n        uint256 max,\r\n        uint256 startTime,\r\n        bool useAllowList,\r\n        uint256 price\r\n    ) external returns (uint256);\r\n\r\n    function publishDecliningPriceAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 min,\r\n        uint256 max,\r\n        uint256 startTime,\r\n        bool useAllowList,\r\n        uint256 highest,\r\n        uint256 lowest,\r\n        uint256 duration,\r\n        uint256 interval\r\n    ) external returns (uint256);\r\n\r\n    function publishVerify(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 saleId,\r\n        uint256 units\r\n    ) external;\r\n\r\n    function buyAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address buyer,\r\n        address currency,\r\n        uint256 buyAmount,\r\n        uint256 buyUnits,\r\n        uint256 price\r\n    ) external returns (uint256);\r\n\r\n    function buyVerify(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address buyer,\r\n        address seller,\r\n        uint256 amount,\r\n        uint256 units,\r\n        uint256 price,\r\n        uint256 fee\r\n    ) external;\r\n\r\n    function removeAllow(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address seller\r\n    ) external returns (uint256);\r\n}\r\n"
    },
    "src/market/interface/external/IUnderlyingContainer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IUnderlyingContainer {\r\n    function underlying() external view returns (address);\r\n}"
    },
    "src/market/interface/ISolvICMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ISolvICMarket {\r\n    event Publish(\r\n        address indexed icToken,\r\n        address indexed seller,\r\n        uint24 indexed tokenId,\r\n        uint24 saleId,\r\n        uint8 priceType,\r\n        uint128 units,\r\n        uint128 startTime,\r\n        address currency,\r\n        uint128 min,\r\n        uint128 max,\r\n        bool useAllowList\r\n    );\r\n\r\n    event Remove(\r\n        address indexed icToken,\r\n        address indexed seller,\r\n        uint24 indexed saleId,\r\n        uint128 total,\r\n        uint128 saled\r\n    );\r\n\r\n    event FixedPriceSet(\r\n        address indexed icToken,\r\n        uint24 indexed saleId,\r\n        uint24 indexed tokenId,\r\n        uint8 priceType,\r\n        uint128 lastPrice\r\n    );\r\n\r\n    event DecliningPriceSet(\r\n        address indexed icToken,\r\n        uint24 indexed saleId,\r\n        uint24 indexed tokenId,\r\n        uint128 highest,\r\n        uint128 lowest,\r\n        uint32 duration,\r\n        uint32 interval\r\n    );\r\n\r\n    event Traded(\r\n        address indexed buyer,\r\n        uint24 indexed saleId,\r\n        address indexed icToken,\r\n        uint24 tokenId,\r\n        uint24 tradeId,\r\n        uint32 tradeTime,\r\n        address currency,\r\n        uint8 priceType,\r\n        uint128 price,\r\n        uint128 tradedUnits,\r\n        uint256 tradedAmount,\r\n        uint8 feePayType,\r\n        uint128 fee\r\n    );\r\n\r\n    function publishFixedPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 price_\r\n    ) external returns (uint24 saleId);\r\n\r\n    function publishDecliningPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) external returns (uint24 saleId);\r\n\r\n    function buyByAmount(uint24 saleId_, uint256 amount_)\r\n        external\r\n        payable\r\n        returns (uint128 units_);\r\n\r\n    function buyByUnits(uint24 saleId_, uint128 units_)\r\n        external\r\n        payable\r\n        returns (uint256 amount_, uint128 fee_);\r\n\r\n    function remove(uint24 saleId_) external;\r\n\r\n    function totalSalesOfICToken(address icToken_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function saleIdOfICTokenByIndex(address icToken_, uint256 index_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function getPrice(uint24 saleId_) external view returns (uint128);\r\n}\r\n"
    },
    "src/market/PriceManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ncontract PriceManager {\r\n    enum PriceType {FIXED, DECLIINING_BY_TIME}\r\n\r\n    struct DecliningPrice {\r\n        uint128 highest; //起始价格\r\n        uint128 lowest; //最终价格\r\n        uint32 startTime;\r\n        uint32 duration; //持续时间\r\n        uint32 interval; //降价周期\r\n    }\r\n\r\n    //saleId => DecliningPrice\r\n    mapping(uint24 => DecliningPrice) internal decliningPrices;\r\n    mapping(uint24 => uint128) internal fixedPrices;\r\n\r\n    function price(PriceType priceType_, uint24 saleId_)\r\n        internal\r\n        view\r\n        returns (uint128)\r\n    {\r\n        if (priceType_ == PriceType.FIXED) {\r\n            return fixedPrices[saleId_];\r\n        }\r\n\r\n        if (priceType_ == PriceType.DECLIINING_BY_TIME) {\r\n            DecliningPrice storage price_ = decliningPrices[saleId_];\r\n            if (block.timestamp >= price_.startTime + price_.duration) {\r\n                return price_.lowest;\r\n            }\r\n            if (block.timestamp <= price_.startTime) {\r\n                return price_.highest;\r\n            }\r\n\r\n            uint256 lastPrice =\r\n                price_.highest -\r\n                    ((block.timestamp - price_.startTime) / price_.interval) *\r\n                    (((price_.highest - price_.lowest) / price_.duration) *\r\n                        price_.interval);\r\n            uint256 price256 = lastPrice < price_.lowest ? price_.lowest : lastPrice;\r\n            require(price256 <= uint128(-1), \"price: exceeds uint128 max\");\r\n\r\n            return uint128(price256);\r\n        }\r\n\r\n        revert(\"unsupported priceType\");\r\n    }\r\n\r\n    function setFixedPrice(uint24 saleId_, uint128 price_) internal {\r\n        fixedPrices[saleId_] = price_;\r\n    }\r\n\r\n    function setDecliningPrice(\r\n        uint24 saleId_,\r\n        uint32 startTime_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) internal {\r\n        decliningPrices[saleId_].startTime = startTime_;\r\n        decliningPrices[saleId_].highest = highest_;\r\n        decliningPrices[saleId_].lowest = lowest_;\r\n        decliningPrices[saleId_].duration = duration_;\r\n        decliningPrices[saleId_].interval = interval_;\r\n    }\r\n}\r\n"
    },
    "src/market/SafeMathUpgradeable128.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable128 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        uint128 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint128 a, uint128 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        if (a == 0) return 0;\r\n        uint128 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "src/proxy/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./AdminUpgradeabilityProxy.sol\";\r\n\r\n/**\r\n * @title ProxyAdmin\r\n * @dev This contract is the admin of a proxy, and is in charge\r\n * of upgrading it as well as transferring it to another admin.\r\n */\r\ncontract ProxyAdmin is Ownable {\r\n  \r\n  /**\r\n   * @dev Constructor.\r\n   */\r\n  constructor(address admin) {\r\n    // We need this for our hardhat tooling\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation of a proxy.\r\n   * This is needed because only the proxy admin can query it.\r\n   * @return The address of the current implementation of the proxy.\r\n   */\r\n  function getProxyImplementation(AdminUpgradeabilityProxy proxy) public view returns (address) {\r\n    // We need to manually run the static call since the getter cannot be flagged as view\r\n    // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\r\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\r\n    require(success);\r\n    return abi.decode(returndata, (address));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the admin of a proxy. Only the admin can query it.\r\n   * @return The address of the current admin of the proxy.\r\n   */\r\n  function getProxyAdmin(AdminUpgradeabilityProxy proxy) public view returns (address) {\r\n    // We need to manually run the static call since the getter cannot be flagged as view\r\n    // bytes4(keccak256(\"admin()\")) == 0xf851a440\r\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\r\n    require(success);\r\n    return abi.decode(returndata, (address));\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of a proxy.\r\n   * @param proxy Proxy to change admin.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeProxyAdmin(AdminUpgradeabilityProxy proxy, address newAdmin) public onlyOwner {\r\n    proxy.changeAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades a proxy to the newest implementation of a contract.\r\n   * @param proxy Proxy to be upgraded.\r\n   * @param implementation the address of the Implementation.\r\n   */\r\n  function upgrade(AdminUpgradeabilityProxy proxy, address implementation) public onlyOwner {\r\n    proxy.upgradeTo(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades a proxy to the newest implementation of a contract and forwards a function call to it.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param proxy Proxy to be upgraded.\r\n   * @param implementation Address of the Implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeAndCall(AdminUpgradeabilityProxy proxy, address implementation, bytes memory data) payable public onlyOwner {\r\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\r\n  }\r\n}\r\n"
    },
    "src/proxy/AdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"./UpgradeabilityProxy.sol\";\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _initAdmin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _initAdmin, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_initAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal override virtual {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n"
    },
    "src/proxy/UpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport './Proxy.sol';\r\nimport '@openzeppelin/contracts/utils/Address.sol';\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() internal override view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n"
    },
    "src/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  receive () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal virtual view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/ivo/commons/solidity-utils/misc/StringConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport '@openzeppelin/contracts/utils/Strings.sol';\r\nimport '@openzeppelin/contracts/math/SafeMath.sol';\r\n\r\nlibrary StringConvertor {\r\n\r\n    using Strings for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function uint2decimal(uint256 self, uint8 decimals) \r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        uint256 base = 10 ** decimals;\r\n        string memory round = self.div(base).toString();\r\n        string memory fraction = self.mod(base).toString();\r\n        uint256 fractionLength = bytes(fraction).length;\r\n\r\n        bytes memory fullStr = abi.encodePacked(round, '.');\r\n        if (fractionLength < decimals) {\r\n            for (uint8 i = 0; i < decimals - fractionLength; i++) {\r\n                fullStr = abi.encodePacked(fullStr, '0');\r\n            }\r\n        }\r\n\r\n        return abi.encodePacked(fullStr, fraction);\r\n    }\r\n\r\n    function trim(bytes memory self, uint256 cutLength) \r\n        internal \r\n        pure\r\n        returns (bytes memory newString)\r\n    {\r\n        newString = new bytes(self.length - cutLength);\r\n        uint256 index = newString.length;\r\n        while (index-- > 0) {\r\n            newString[index] = self[index];\r\n        }\r\n    }\r\n\r\n    function addThousandsSeparator(bytes memory self)\r\n        internal\r\n        pure\r\n        returns (bytes memory newString)\r\n    {\r\n        if (self.length <= 6) {\r\n            return self;\r\n        }\r\n\r\n        newString = new bytes(self.length + (self.length - 4) / 3);\r\n        uint256 oriIndex = self.length - 1;\r\n        uint256 newIndex = newString.length - 1;\r\n        for (uint256 i = 0; i < self.length; i++) {\r\n            if (i >= 6 && i % 3 == 0) {\r\n                newString[newIndex--] = ',';\r\n            }\r\n            newString[newIndex--] = self[oriIndex--];\r\n        }\r\n    }\r\n\r\n    function addressToString(address self) \r\n        internal \r\n        pure \r\n        returns (string memory) \r\n    {\r\n        bytes32 value = bytes32(uint256(self));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\r\n            str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function uintArray2str(uint64[] memory array) \r\n        internal \r\n        pure \r\n        returns (string memory) \r\n    {\r\n        bytes memory pack = abi.encodePacked('[');\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (i == array.length - 1) {\r\n                pack = abi.encodePacked(pack, uint256(array[i]).toString());\r\n            } else {\r\n                pack = abi.encodePacked(pack, uint256(array[i]).toString(), ',');\r\n            }\r\n        }\r\n        return string(abi.encodePacked(pack, ']'));\r\n    }\r\n\r\n    function percentArray2str(uint32[] memory array) \r\n        internal \r\n        pure \r\n        returns (string memory) \r\n    {\r\n        bytes memory pack = abi.encodePacked('[');\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            bytes memory percent = abi.encodePacked('\"', uint2decimal(array[i], 2), '%\"');\r\n\r\n            if (i == array.length - 1) {\r\n                pack = abi.encodePacked(pack, percent);\r\n            } else {\r\n                pack = abi.encodePacked(pack, percent, ',');\r\n            }\r\n        }\r\n        return string(abi.encodePacked(pack, ']'));\r\n    }\r\n\r\n    function datetimeToString(uint256 timestamp) internal pure returns (string memory) {\r\n\r\n    }\r\n\r\n    function dateToString(uint256 timestamp) internal pure returns (string memory) {\r\n        \r\n    }\r\n\r\n}"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "src/ivo/vouchers/flexible-date-vesting-voucher/interface/IVNFTDescriptor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVNFTDescriptor {\r\n\r\n    function contractURI() external view returns (string memory);\r\n    function slotURI(uint256 slot) external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n}\r\n"
    },
    "src/ivo/vouchers/flexible-date-vesting-voucher/interface/IFlexibleDateVestingVoucher.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"../../vnft-core/interface/IVNFT.sol\";\r\nimport \"../../vnft-core/interface/optional/IVNFTMetadata.sol\";\r\nimport \"./IFlexibleDateVestingPool.sol\";\r\n\r\ninterface IFlexibleDateVestingVoucher is IVNFT, IVNFTMetadata {\r\n\r\n    struct FlexibleDateVestingVoucherSnapshot {\r\n        IFlexibleDateVestingPool.SlotDetail slotSnapshot;\r\n        uint256 tokenId;\r\n        uint256 vestingAmount;\r\n    }\r\n\r\n    /** ===== Begin of events emited by FlexibleDateVestingVoucher ===== */\r\n    event SetDescriptor(address oldDescriptor, address newDescriptor);\r\n\r\n    event SetSolver(address oldSolver, address newSolver);\r\n\r\n    event Claim(uint256 indexed tokenId, address to, uint256 claimAmount);\r\n    /** ===== End of events emited by FlexibleDateVestingVoucher ===== */\r\n\r\n\r\n    /** ===== Begin of interfaces of FlexibleDateVestingVoucher ===== */\r\n    function mint(\r\n        address issuer_,\r\n        uint8 claimType_,\r\n        uint64 latestStartTime_,\r\n        uint64[] calldata terms_,\r\n        uint32[] calldata percentages_,\r\n        uint256 vestingAmount_\r\n    ) \r\n        external \r\n        returns (uint256 slot, uint256 tokenId);\r\n\r\n    function claim(uint256 tokenId_, uint256 claimAmount_) external;\r\n\r\n    function claimTo(uint256 tokenId_, address to_, uint256 claimAmount_) external;\r\n\r\n    function setStartTime(uint256 slot_, uint64 startTime_) external;\r\n\r\n    function isClaimable(uint256 slot_) external view returns (bool);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function underlyingVestingVoucher() external view returns (address);\r\n    /** ===== End of interfaces of FlexibleDateVestingVoucher ===== */\r\n\r\n}"
    },
    "src/ivo/vouchers/vnft-core/interface/IVNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\n/* is ERC721, ERC165 */\r\ninterface IVNFT {\r\n    event TransferUnits(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 transferUnits\r\n    );\r\n\r\n    event Split(\r\n        address indexed owner,\r\n        uint256 indexed tokenId,\r\n        uint256 newTokenId,\r\n        uint256 splitUnits\r\n    );\r\n\r\n    event Merge(\r\n        address indexed owner,\r\n        uint256 indexed tokenId,\r\n        uint256 indexed targetTokenId,\r\n        uint256 mergeUnits\r\n    );\r\n\r\n    event ApprovalUnits(\r\n        address indexed approval,\r\n        uint256 indexed tokenId,\r\n        uint256 allowance\r\n    );\r\n\r\n    function slotOf(uint256 tokenId) external view returns (uint256 slot);\r\n\r\n    function unitDecimals() external view returns (uint8);\r\n\r\n    function unitsInSlot(uint256 slot) external view returns (uint256);\r\n\r\n    function tokensInSlot(uint256 slot)\r\n        external\r\n        view\r\n        returns (uint256 tokenCount);\r\n\r\n    function tokenOfSlotByIndex(uint256 slot, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    function unitsInToken(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (uint256 units);\r\n\r\n    function approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external;\r\n\r\n    function allowance(uint256 tokenId, address spender)\r\n        external\r\n        view\r\n        returns (uint256 allowed);\r\n\r\n    function split(uint256 tokenId, uint256[] calldata units)\r\n        external\r\n        returns (uint256[] memory newTokenIds);\r\n\r\n    function merge(uint256[] calldata tokenIds, uint256 targetTokenId) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external returns (uint256 newTokenId);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external returns (uint256 newTokenId);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 units\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IVNFTReceiver {\r\n    function onVNFTReceived(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "src/ivo/vouchers/vnft-core/interface/optional/IVNFTMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVNFTMetadata /* is IERC721Metadata */ {\r\n    function contractURI() external view returns (string memory);\r\n    function slotURI(uint256 slot) external view returns (string memory);\r\n}"
    },
    "src/ivo/vouchers/flexible-date-vesting-voucher/interface/IFlexibleDateVestingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IFlexibleDateVestingPool {\r\n\r\n    struct SlotDetail {\r\n        address issuer;\r\n        uint8 claimType;\r\n        uint64 startTime;\r\n        uint64 latestStartTime;\r\n        uint64[] terms;\r\n        uint32[] percentages;\r\n        bool isValid;\r\n    }\r\n\r\n    /** ===== Begin of events emited by FlexibleDateVestingPool ===== */\r\n    event NewManager(address oldManager, address newManager);\r\n\r\n    event CreateSlot (\r\n        uint256 indexed slot,\r\n        address indexed issuer,\r\n        uint8 claimType,\r\n        uint64 latestStartTime,\r\n        uint64[] terms,\r\n        uint32[] percentages\r\n    );\r\n\r\n    event Mint (\r\n        address indexed minter,\r\n        uint256 indexed slot,\r\n        uint256 vestingAmount\r\n    );\r\n\r\n    event Claim (\r\n        uint256 indexed slot,\r\n        address indexed claimer,\r\n        uint256 claimAmount\r\n    );\r\n\r\n    event SetStartTime (\r\n        uint256 indexed slot,\r\n        uint64 oldStartTime,\r\n        uint64 newStartTime\r\n    );\r\n    /** ===== End of events emited by FlexibleDateVestingPool ===== */\r\n\r\n}"
    },
    "src/ivo/vouchers/vnft-core/VNFTCoreV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"../../commons/solidity-utils/openzeppelin/token/ERC721/ERC721Upgradeable.sol\";\r\nimport \"../../commons/solidity-utils/openzeppelin/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"./interface/IVNFT.sol\";\r\nimport \"./interface/optional/IVNFTMetadata.sol\";\r\n\r\nabstract contract VNFTCoreV2 is IVNFT, IVNFTMetadata, ERC721Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n\r\n    struct ApproveUnits {\r\n        address[] approvals;\r\n        mapping(address => uint256) allowances;\r\n    }\r\n\r\n    /// @dev tokenId => units\r\n    mapping(uint256 => uint256) internal _units;\r\n\r\n    /// @dev tokenId => operator => units\r\n    mapping(uint256 => ApproveUnits) private _tokenApprovalUnits;\r\n\r\n    /// @dev slot => tokenIds\r\n    mapping(uint256 => EnumerableSetUpgradeable.UintSet) private _slotTokens;\r\n\r\n    uint8 internal _unitDecimals;\r\n\r\n    function _initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 unitDecimals_\r\n    ) internal virtual {\r\n        ERC721Upgradeable.__ERC721_init(name_, symbol_);\r\n        ERC165Upgradeable._registerInterface(type(IVNFT).interfaceId);\r\n        _unitDecimals = unitDecimals_;\r\n    }\r\n\r\n    function _safeTransferUnitsFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_,\r\n        bytes memory data_\r\n    ) internal virtual {\r\n        _transferUnitsFrom(\r\n            from_,\r\n            to_,\r\n            tokenId_,\r\n            targetTokenId_,\r\n            transferUnits_\r\n        );\r\n        require(\r\n            _checkOnVNFTReceived(\r\n                from_,\r\n                to_,\r\n                targetTokenId_,\r\n                transferUnits_,\r\n                data_\r\n            ),\r\n            \"to non VNFTReceiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _transferUnitsFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_\r\n    ) internal virtual {\r\n        require(from_ == ownerOf(tokenId_), \"source token owner mismatch\");\r\n        require(to_ != address(0), \"transfer to the zero address\");\r\n\r\n        _beforeTransferUnits(\r\n            from_,\r\n            to_,\r\n            tokenId_,\r\n            targetTokenId_,\r\n            transferUnits_\r\n        );\r\n\r\n        // approve all后可不需要approve units\r\n        if (_msgSender() != from_ && !isApprovedForAll(from_, _msgSender())) {\r\n            _tokenApprovalUnits[tokenId_].allowances[\r\n                _msgSender()\r\n            ] = _tokenApprovalUnits[tokenId_].allowances[_msgSender()].sub(\r\n                transferUnits_,\r\n                \"transfer units exceeds allowance\"\r\n            );\r\n        }\r\n\r\n        _units[tokenId_] = _units[tokenId_].sub(\r\n            transferUnits_,\r\n            \"transfer excess units\"\r\n        );\r\n\r\n        if (!_exists(targetTokenId_)) {\r\n            _mintUnits(to_, targetTokenId_, _slotOf(tokenId_), transferUnits_);\r\n        } else {\r\n            require(\r\n                ownerOf(targetTokenId_) == to_,\r\n                \"target token owner mismatch\"\r\n            );\r\n            require(\r\n                _slotOf(tokenId_) == _slotOf(targetTokenId_),\r\n                \"slot mismatch\"\r\n            );\r\n            _units[targetTokenId_] = _units[targetTokenId_].add(transferUnits_);\r\n        }\r\n\r\n        emit TransferUnits(\r\n            from_,\r\n            to_,\r\n            tokenId_,\r\n            targetTokenId_,\r\n            transferUnits_\r\n        );\r\n    }\r\n\r\n    function _merge(uint256 tokenId_, uint256 targetTokenId_) internal virtual {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId_),\r\n            \"VNFT: not owner nor approved\"\r\n        );\r\n        require(tokenId_ != targetTokenId_, \"self merge not allowed\");\r\n        require(_slotOf(tokenId_) == _slotOf(targetTokenId_), \"slot mismatch\");\r\n\r\n        address owner = ownerOf(tokenId_);\r\n        require(owner == ownerOf(targetTokenId_), \"not same owner\");\r\n\r\n        uint256 mergeUnits = _units[tokenId_];\r\n        _units[targetTokenId_] = _units[tokenId_].add(_units[targetTokenId_]);\r\n        _burn(tokenId_);\r\n\r\n        emit Merge(owner, tokenId_, targetTokenId_, mergeUnits);\r\n    }\r\n\r\n    function _split(\r\n        uint256 tokenId_,\r\n        uint256 newTokenId_,\r\n        uint256 splitUnits_\r\n    ) internal virtual {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId_),\r\n            \"VNFT: not owner nor approved\"\r\n        );\r\n        require(!_exists(newTokenId_), \"new token already exists\");\r\n\r\n        _units[tokenId_] = _units[tokenId_].sub(splitUnits_);\r\n\r\n        address owner = ownerOf(tokenId_);\r\n        _mintUnits(owner, newTokenId_, _slotOf(tokenId_), splitUnits_);\r\n\r\n        emit Split(owner, tokenId_, newTokenId_, splitUnits_);\r\n    }\r\n\r\n    function _mintUnits(\r\n        address minter_,\r\n        uint256 tokenId_,\r\n        uint256 slot_,\r\n        uint256 units_\r\n    ) internal virtual {\r\n        if (!_exists(tokenId_)) {\r\n            ERC721Upgradeable._mint(minter_, tokenId_);\r\n            _slotTokens[slot_].add(tokenId_);\r\n        }\r\n\r\n        _units[tokenId_] = _units[tokenId_].add(units_);\r\n        emit TransferUnits(address(0), minter_, 0, tokenId_, units_);\r\n    }\r\n\r\n    function _burn(uint256 tokenId_) internal virtual override {\r\n        address owner = ownerOf(tokenId_);\r\n        uint256 slot = _slotOf(tokenId_);\r\n        uint256 burnUnits = _units[tokenId_];\r\n\r\n        _slotTokens[slot].remove(tokenId_);\r\n        delete _units[tokenId_];\r\n\r\n        ERC721Upgradeable._burn(tokenId_);\r\n        emit TransferUnits(owner, address(0), tokenId_, 0, burnUnits);\r\n    }\r\n\r\n    function _burnUnits(uint256 tokenId_, uint256 burnUnits_)\r\n        internal\r\n        virtual\r\n        returns (uint256 balance)\r\n    {\r\n        address owner = ownerOf(tokenId_);\r\n        _units[tokenId_] = _units[tokenId_].sub(\r\n            burnUnits_,\r\n            \"burn excess units\"\r\n        );\r\n\r\n        emit TransferUnits(owner, address(0), tokenId_, 0, burnUnits_);\r\n        return _units[tokenId_];\r\n    }\r\n\r\n    function approve(\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 allowance_\r\n    ) public virtual override {\r\n        require(_msgSender() == ownerOf(tokenId_), \"VNFT: only owner\");\r\n        _approveUnits(to_, tokenId_, allowance_);\r\n    }\r\n\r\n    function allowance(uint256 tokenId_, address spender_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _tokenApprovalUnits[tokenId_].allowances[spender_];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to_` to operate on `tokenId_` within range of `allowance_`\r\n     */\r\n    function _approveUnits(\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 allowance_\r\n    ) internal virtual {\r\n        if (_tokenApprovalUnits[tokenId_].allowances[to_] == 0) {\r\n            _tokenApprovalUnits[tokenId_].approvals.push(to_);\r\n        }\r\n        _tokenApprovalUnits[tokenId_].allowances[to_] = allowance_;\r\n        emit ApprovalUnits(to_, tokenId_, allowance_);\r\n    }\r\n\r\n    /**\r\n     * @dev Clear existing approveUnits for `tokenId_`, including approved addresses and their approved units.\r\n     */\r\n    function _clearApproveUnits(uint256 tokenId_) internal virtual {\r\n        ApproveUnits storage approveUnits = _tokenApprovalUnits[tokenId_];\r\n        for (uint256 i = 0; i < approveUnits.approvals.length; i++) {\r\n            delete approveUnits.allowances[approveUnits.approvals[i]];\r\n            delete approveUnits.approvals[i];\r\n        }\r\n    }\r\n\r\n    function unitDecimals() public view override returns (uint8) {\r\n        return _unitDecimals;\r\n    }\r\n\r\n    function unitsInSlot(uint256 slot_)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 units_)\r\n    {\r\n        for (uint256 i = 0; i < tokensInSlot(slot_); i++) {\r\n            units_ = units_.add(unitsInToken(tokenOfSlotByIndex(slot_, i)));\r\n        }\r\n    }\r\n\r\n    function unitsInToken(uint256 tokenId_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _units[tokenId_];\r\n    }\r\n\r\n    function tokensInSlot(uint256 slot_)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _slotTokens[slot_].length();\r\n    }\r\n\r\n    function tokenOfSlotByIndex(uint256 slot_, uint256 index_)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _slotTokens[slot_].at(index_);\r\n    }\r\n\r\n    function slotOf(uint256 tokenId_) public view override returns (uint256) {\r\n        return _slotOf(tokenId_);\r\n    }\r\n\r\n    function _slotOf(uint256 tokenId_) internal view virtual returns (uint256);\r\n\r\n    /**\r\n     * @dev Before transferring or burning a token, the existing approveUnits should be cleared.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_\r\n    ) internal virtual override {\r\n        if (from_ != address(0)) {\r\n            _clearApproveUnits(tokenId_);\r\n        }\r\n    }\r\n\r\n    function _beforeTransferUnits(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_\r\n    ) internal virtual {}\r\n\r\n    function _checkOnVNFTReceived(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 units_,\r\n        bytes memory _data\r\n    ) internal returns (bool) {\r\n        if (!to_.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to_.functionCall(\r\n            abi.encodeWithSelector(\r\n                IVNFTReceiver(to_).onVNFTReceived.selector,\r\n                _msgSender(),\r\n                from_,\r\n                tokenId_,\r\n                units_,\r\n                _data\r\n            ),\r\n            \"non VNFTReceiver implementer\"\r\n        );\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        /*b382cdcd  =>  onVNFTReceived(address,address,uint256,uint256,bytes)*/\r\n        return (retval == type(IVNFTReceiver).interfaceId);\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"../../utils/ContextUpgradeable.sol\";\r\nimport \"./IERC721Upgradeable.sol\";\r\nimport \"./IERC721MetadataUpgradeable.sol\";\r\nimport \"./IERC721EnumerableUpgradeable.sol\";\r\nimport \"./IERC721ReceiverUpgradeable.sol\";\r\nimport \"../../introspection/ERC165Upgradeable.sol\";\r\nimport \"../../math/SafeMathUpgradeable.sol\";\r\nimport \"../../utils/AddressUpgradeable.sol\";\r\nimport \"../../utils/EnumerableSetUpgradeable.sol\";\r\nimport \"../../utils/EnumerableMapUpgradeable.sol\";\r\nimport \"../../utils/StringsUpgradeable.sol\";\r\nimport \"../../proxy/Initializable.sol\";\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable, IERC721EnumerableUpgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\r\n    using StringsUpgradeable for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from holder address to their (enumerable) set of owned tokens\r\n    mapping (address => EnumerableSetUpgradeable.UintSet) private _holderTokens;\r\n\r\n    // Enumerable mapping from token ids to their owners\r\n    EnumerableMapUpgradeable.UintToAddressMap private _tokenOwners;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping (uint256 => string) private _tokenURIs;\r\n\r\n    // Base URI\r\n    string private _baseURI;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n     *     bytes4(keccak256('name()')) == 0x06fdde03\r\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n     *\r\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __ERC721_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n        return string(abi.encodePacked(base, tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\r\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\r\n    * to the token ID if no specific URI is set for that token ID.\r\n    */\r\n    function baseURI() public view virtual returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || ERC721Upgradeable.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || ERC721Upgradeable.isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     d*\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId); // internal owner\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n\r\n        _holderTokens[owner].remove(tokenId);\r\n\r\n        _tokenOwners.remove(tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the base URI for all token IDs. It is\r\n     * automatically added as a prefix to the value returned in {tokenURI},\r\n     * or to the token ID if {tokenURI} is empty.\r\n     */\r\n    function _setBaseURI(string memory baseURI_) internal virtual {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\r\n            IERC721ReceiverUpgradeable(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId); // internal owner\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n    uint256[41] private __gap;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nimport \"../proxy/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\nimport \"../../introspection/IERC165Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/token/ERC721/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\nimport \"./IERC721Upgradeable.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/token/ERC721/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\nimport \"./IERC721Upgradeable.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"./IERC165Upgradeable.sol\";\r\nimport \"../proxy/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/EnumerableMapUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMapUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\r\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\r\n        return (success, address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\nimport \"../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "src/ivo/vouchers/convertible-voucher/interface/IConvertibleVoucher.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"./IConvertiblePool.sol\";\r\n\r\ninterface IConvertibleVoucher {\r\n\r\n    struct ConvertibleVoucherSnapshot {\r\n        IConvertiblePool.SlotDetail slotDetail;\r\n        uint256 tokenId;\r\n        uint256 parValue;\r\n    }\r\n\r\n    /** ===== Begin of events emited by ConvertiblePool ===== */\r\n    event SetDescriptor(address oldDescriptor, address newDescriptor);\r\n\r\n    event SetSolver(address oldSolver, address newSolver);\r\n\r\n    event Claim (\r\n        uint256 indexed tokenId,\r\n        address indexed to,\r\n        uint256 claimUnits,\r\n        uint256 claimCurrencyAmount, \r\n        uint256 claimTokenAmount\r\n    );\r\n    /** ===== End of events emited by ConvertiblePool ===== */\r\n\r\n    function mint(\r\n        address issuer_,\r\n        address fundCurrency_,\r\n        uint128 lowestPrice_,\r\n        uint128 highestPrice_,\r\n        uint64 effectiveTime_,\r\n        uint64 maturity_,\r\n        uint256 tokenInAmount_\r\n    ) \r\n        external \r\n        returns (uint256 slot, uint256 tokenId);\r\n\r\n    function claimAll(uint256 tokenId_) external;\r\n    \r\n    function claim(uint256 tokenId_, uint256 claimUnits_) external;\r\n\r\n    function claimTo(uint256 tokenId_, address to_, uint256 claimUnits_) external;\r\n\r\n    function getSlot(\r\n        address issuer_,\r\n        address fundCurrency_,\r\n        uint128 lowestPrice_,\r\n        uint128 highestPrice_,\r\n        uint64 effectiveTime_,\r\n        uint64 maturity_,\r\n        uint8 collateralType_\r\n    ) \r\n        external\r\n        view \r\n        returns (uint256 slot);\r\n\r\n    function getSlotDetail(uint256 slot_) \r\n        external \r\n        view \r\n        returns (IConvertiblePool.SlotDetail memory);\r\n\r\n    function getIssuerSlots(address issuer_) \r\n        external \r\n        view \r\n        returns (uint256[] memory slots);\r\n\r\n    function getSnapshot(uint256 tokenId_)\r\n        external\r\n        view\r\n        returns (ConvertibleVoucherSnapshot memory);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function underlyingVestingVoucher() external view returns (address);\r\n\r\n}"
    },
    "src/ivo/vouchers/convertible-voucher/interface/IConvertiblePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IConvertiblePool {\r\n\r\n    enum CollateralType {\r\n        ERC20,\r\n        VESTING_VOUCHER\r\n    }\r\n\r\n    /**\r\n     * @notice Params for Convertible Vouchers.\r\n     * totalValue total issue value, decimals = price decimals + underlying token decimals\r\n     * @param currency currency address of the fund\r\n     * @param lowestPrice decimals fixed at 8\r\n     * @param highestPrice decimals fixed at 8\r\n     * @param settlePrice settlement price set after maturity, decimals fixed at 8\r\n     * @param settings uint16 type settings representing 16 boolean settings\r\n     *        bit0: isValid\r\n     *        bit1: isRefunded (if refunded, CV holders will receive currency instead of token)\r\n     *        bit2: isRedeemed\r\n     *        bit3: isClaimed, identify if the CV has been claimed by any holder\r\n     *        bit4 ~ bit15: reserved\r\n     */\r\n    struct SlotDetail {\r\n        address issuer;\r\n        address fundCurrency;\r\n        uint256 totalValue;\r\n        uint128 lowestPrice;\r\n        uint128 highestPrice;\r\n        uint128 settlePrice;\r\n        uint64 effectiveTime;\r\n        uint64 maturity;\r\n        CollateralType collateralType;\r\n        bool isIssuerRefunded;\r\n        bool isIssuerWithdrawn;\r\n        bool isClaimed;\r\n        bool isValid;\r\n    }\r\n\r\n    /** ===== Begin of events emited by ConvertiblePool ===== */\r\n    event NewVoucher(address oldVoucher, address newVoucher);\r\n\r\n    event SetFundCurrency(address indexed currency, bool enabled);\r\n\r\n    event CreateSlot(\r\n        uint256 indexed slot,\r\n        address indexed issuer,\r\n        address fundCurrency,\r\n        uint128 lowestPrice,\r\n        uint128 highestPrice,\r\n        uint64 effectiveTime,\r\n        uint64 maturity,\r\n        CollateralType collateralType\r\n    );\r\n\r\n    event Mint(\r\n        address indexed minter,\r\n        uint256 indexed slot,\r\n        uint256 totalValue\r\n    );\r\n\r\n    event Refund(uint256 indexed slot, address sender, uint256 refundAmount);\r\n\r\n    event Withdraw(\r\n        uint256 indexed slot,\r\n        address sender,\r\n        uint256 redeemCurrencyAmount,\r\n        uint256 redeemUnderlyingTokenAmount\r\n    );\r\n\r\n    event SettlePrice(uint256 indexed slot, uint128 settlePrice);\r\n\r\n    /** ===== End of events emited by ConvertiblePool ===== */\r\n\r\n    function mintWithUnderlyingToken(\r\n        address minter_,\r\n        uint256 slot_,\r\n        uint256 tokenInAmount_\r\n    ) external returns (uint256 totalValue);\r\n\r\n    function refund(uint256 slot_) external;\r\n\r\n    function withdraw(uint256 slot_) external returns (uint256, uint256);\r\n\r\n    function claim(\r\n        uint256 slot_,\r\n        address to_,\r\n        uint256 claimValue_\r\n    ) external returns (uint256, uint256);\r\n\r\n    function settleConvertiblePrice(uint256 slot_) external;\r\n\r\n    function getSettlePrice(uint256 slot_) external view returns (uint128);\r\n}\r\n"
    },
    "src/ivo/vouchers/convertible-voucher/interface/external/IICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IICToken {\r\n\r\n    function mint(\r\n        uint64 term, \r\n        uint256 amount,\r\n        uint64[] calldata maturities, \r\n        uint32[] calldata percentages,\r\n        string memory originalInvestor\r\n    ) \r\n        external \r\n        returns (uint256 slot, uint256 tokenId);\r\n    \r\n    function vestingPool() external view returns (address);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n}"
    },
    "src/ivo/vouchers/convertible-voucher/interface/IVNFTDescriptor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVNFTDescriptor {\r\n\r\n    function contractURI() external view returns (string memory);\r\n    function slotURI(uint256 slot) external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n}\r\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\nlibrary Base64 {\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n        \n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n            \n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n            \n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n            \n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n            \n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               dataPtr := add(dataPtr, 3)\n               \n               // read 3 bytes\n               let input := mload(dataPtr)\n               \n               // write 4 characters\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\n               resultPtr := add(resultPtr, 1)\n            }\n            \n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n        \n        return result;\n    }\n}\n"
    },
    "src/ivo/vouchers/convertible-voucher/interface/IVoucherSVG.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVoucherSVG {\r\n\r\n    function generateSVG(address voucher_, uint256 tokenId_) external view returns (string memory);\r\n\r\n}"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"../../utils/ContextUpgradeable.sol\";\r\nimport \"./IERC20Upgradeable.sol\";\r\nimport \"../../math/SafeMathUpgradeable.sol\";\r\nimport \"../../proxy/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    uint256[44] private __gap;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nimport \"../proxy/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "src/ivo/markets/offering-market-core/OfferingMarketCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../../commons/solidity-utils/misc/Constants.sol\";\r\nimport \"../../commons/solidity-utils/access/AdminControl.sol\";\r\nimport \"../../commons/solidity-utils/openzeppelin/math/SafeMathUpgradeable.sol\";\r\nimport \"../../commons/solidity-utils/openzeppelin/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"../../commons/solidity-utils/math/SafeMathUpgradeable128.sol\";\r\nimport \"../../commons/solidity-utils/helpers/VNFTTransferHelper.sol\";\r\nimport \"../../commons/solidity-utils/helpers/ERC20TransferHelper.sol\";\r\nimport \"../../commons/solidity-utils/openzeppelin/utils/ReentrancyGuardUpgradeable.sol\";\r\nimport \"../../commons/solver/interface/IIVOSolver.sol\";\r\nimport \"./PriceManager.sol\";\r\n\r\nabstract contract OfferingMarketCore is\r\n    PriceManager,\r\n    AdminControl,\r\n    ReentrancyGuardUpgradeable\r\n{\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable128 for uint128;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    event AddMarket(\r\n        address indexed voucher,\r\n        Constants.VoucherType voucherType,\r\n        address asset,\r\n        uint8 decimals,\r\n        uint16 feeRate,\r\n        bool onlyManangerOffer\r\n    );\r\n\r\n    event RemoveMarket(address indexed voucher);\r\n\r\n    event Offer(\r\n        address indexed voucher,\r\n        address indexed issuer,\r\n        Offering offering\r\n    );\r\n\r\n    event Remove(\r\n        address indexed issuer,\r\n        uint24 indexed offeringId,\r\n        address voucher,\r\n        uint128 total,\r\n        uint128 sold\r\n    );\r\n\r\n    event FixedPriceSet(\r\n        address indexed voucher,\r\n        uint24 indexed offeringId,\r\n        uint8 priceType,\r\n        uint128 lastPrice\r\n    );\r\n\r\n    event DecliningPriceSet(\r\n        address indexed voucher,\r\n        uint24 indexed offeringId,\r\n        uint128 highest,\r\n        uint128 lowest,\r\n        uint32 duration,\r\n        uint32 interval\r\n    );\r\n\r\n    event Traded(\r\n        address indexed buyer,\r\n        uint24 indexed offeringId,\r\n        address indexed voucher,\r\n        uint256 voucherId,\r\n        uint24 tradeId,\r\n        uint32 tradeTime,\r\n        address currency,\r\n        uint8 priceType,\r\n        uint128 price,\r\n        uint128 tradedUnits,\r\n        uint256 tradedAmount,\r\n        uint128 fee\r\n    );\r\n\r\n    event SetCurrency(address indexed currency, bool enable);\r\n\r\n    event WithdrawFee(address voucher, uint256 reduceAmount);\r\n\r\n    event NewSolver(IIVOSolver oldSolver, IIVOSolver newSolver);\r\n\r\n    struct Market {\r\n        Constants.VoucherType voucherType;\r\n        address voucherPool;\r\n        address asset;\r\n        uint8 decimals;\r\n        uint16 feeRate;\r\n        bool onlyManangerOffer;\r\n        bool isValid;\r\n    }\r\n\r\n    struct Offering {\r\n        uint24 offeringId;\r\n        uint32 startTime;\r\n        uint32 endTime;\r\n        PriceManager.PriceType priceType;\r\n        uint128 totalUnits;\r\n        uint128 units;\r\n        uint128 min;\r\n        uint128 max;\r\n        address voucher;\r\n        address currency;\r\n        address issuer;\r\n        bool useAllowList;\r\n        bool isValid;\r\n    }\r\n\r\n    //key: offeringId\r\n    mapping(uint24 => Offering) public offerings;\r\n\r\n    //key: voucher\r\n    mapping(address => Market) public markets;\r\n\r\n    EnumerableSetUpgradeable.AddressSet internal _currencies;\r\n    EnumerableSetUpgradeable.AddressSet internal _vouchers;\r\n\r\n    //voucher => offeringId\r\n    mapping(address => EnumerableSetUpgradeable.UintSet)\r\n        internal _voucherOfferings;\r\n\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet)\r\n        internal _allowAddresses;\r\n\r\n    // managers with authorities to set allow addresses of a voucher market and offer offering\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet)\r\n        internal _voucherManagers;\r\n\r\n    // records of user purchased units from an order\r\n    mapping(uint24 => mapping(address => uint128)) internal _tradeRecords;\r\n\r\n    IIVOSolver public solver;\r\n    uint24 public nextOfferingId;\r\n    uint24 public nextTradeId;\r\n\r\n    modifier onlyVoucherManager(address voucher_) {\r\n        require(\r\n            msg.sender == _admin ||\r\n                _voucherManagers[voucher_].contains(msg.sender),\r\n            \"only manager\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function _mintVoucher(uint24 oferingId, uint128 units)\r\n        internal\r\n        virtual\r\n        returns (uint256 voucherId);\r\n\r\n    function _refund(uint24 offeringId, uint128 units) internal virtual;\r\n\r\n    function isSupportVoucherType(Constants.VoucherType voucherType)\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function initialize(IIVOSolver solver_) external initializer {\r\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\r\n        AdminControl.__AdminControl_init(msg.sender);\r\n        nextOfferingId = 1;\r\n        nextTradeId = 1;\r\n        setSolver(solver_);\r\n    }\r\n\r\n    function _offer(\r\n        address voucher_,\r\n        address currency_,\r\n        uint128 units_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        uint32 endTime_,\r\n        bool useAllowList_,\r\n        PriceManager.PriceType priceType_,\r\n        bytes memory priceData_\r\n    ) internal nonReentrant returns (uint24 offeringId) {\r\n        require(\r\n            voucher_ != address(0) && currency_ != address(0),\r\n            \"address cannot be 0\"\r\n        );\r\n        Market memory market = markets[voucher_];\r\n        require(market.isValid, \"unsupported voucher\");\r\n        require(_currencies.contains(currency_), \"unsupported currency\");\r\n        require(endTime_ > startTime_, \"endTime less than startTime\");\r\n\r\n        if (market.onlyManangerOffer) {\r\n            require(\r\n                _voucherManagers[voucher_].contains(msg.sender),\r\n                \"only manager\"\r\n            );\r\n        }\r\n\r\n        if (max_ > 0) {\r\n            require(min_ <= max_, \"min > max\");\r\n        }\r\n\r\n        uint256 err = solver.operationAllowed(\r\n            \"Offer\",\r\n            abi.encode(\r\n                voucher_,\r\n                msg.sender,\r\n                currency_,\r\n                units_,\r\n                min_,\r\n                max_,\r\n                startTime_,\r\n                endTime_,\r\n                useAllowList_,\r\n                priceType_,\r\n                priceData_\r\n            )\r\n        );\r\n        require(err == 0, \"solver not allowed\");\r\n\r\n        offeringId = _generateNextofferingId();\r\n\r\n        offerings[offeringId] = Offering({\r\n            offeringId: offeringId,\r\n            startTime: startTime_,\r\n            endTime: endTime_,\r\n            priceType: priceType_,\r\n            totalUnits: units_,\r\n            units: units_,\r\n            min: min_,\r\n            max: max_,\r\n            currency: currency_,\r\n            issuer: msg.sender,\r\n            voucher: voucher_,\r\n            useAllowList: useAllowList_,\r\n            isValid: true\r\n        });\r\n\r\n        Offering memory offering = offerings[offeringId];\r\n\r\n        _setPrice(offering, priceType_, priceData_);\r\n\r\n        solver.operationVerify(\r\n            \"Offer\",\r\n            abi.encode(offering.voucher, offering.offeringId)\r\n        );\r\n        emit Offer(offering.voucher, offering.issuer, offering);\r\n\r\n        return offeringId;\r\n    }\r\n\r\n    function _setPrice(\r\n        Offering memory offering_,\r\n        PriceManager.PriceType priceType_,\r\n        bytes memory priceData_\r\n    ) internal {\r\n        if (priceType_ == PriceManager.PriceType.FIXED) {\r\n            uint128 price = abi.decode(priceData_, (uint128));\r\n            PriceManager.setFixedPrice(offering_.offeringId, price);\r\n\r\n            emit FixedPriceSet(\r\n                offering_.voucher,\r\n                offering_.offeringId,\r\n                uint8(priceType_),\r\n                price\r\n            );\r\n        } else {\r\n            (\r\n                uint128 highest,\r\n                uint128 lowest,\r\n                uint32 duration,\r\n                uint32 interval\r\n            ) = abi.decode(priceData_, (uint128, uint128, uint32, uint32));\r\n            PriceManager.setDecliningPrice(\r\n                offering_.offeringId,\r\n                offering_.startTime,\r\n                highest,\r\n                lowest,\r\n                duration,\r\n                interval\r\n            );\r\n\r\n            emit DecliningPriceSet(\r\n                offering_.voucher,\r\n                offering_.offeringId,\r\n                highest,\r\n                lowest,\r\n                duration,\r\n                interval\r\n            );\r\n        }\r\n    }\r\n\r\n    function buy(uint24 offeringId_, uint128 units_)\r\n        external\r\n        payable\r\n        virtual\r\n        nonReentrant\r\n        returns (uint256 amount_, uint128 fee_)\r\n    {\r\n        address buyer = msg.sender;\r\n        uint128 price = getPrice(offeringId_);\r\n        Offering storage offering = offerings[offeringId_];\r\n        require(offering.isValid, \"invalid offering\");\r\n\r\n        Market memory market = markets[offering.voucher];\r\n        require(market.isValid, \"invalid market\");\r\n        amount_ = uint256(units_).mul(uint256(price)).div(\r\n            uint256(10**market.decimals)\r\n        );\r\n\r\n        fee_ = _getFee(offering.voucher, amount_);\r\n\r\n        uint256 err = solver.operationAllowed(\r\n            \"Buy\",\r\n            abi.encode(\r\n                offering.voucher,\r\n                offeringId_,\r\n                buyer,\r\n                amount_,\r\n                units_,\r\n                price\r\n            )\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        BuyParameter memory buyParameter = BuyParameter({\r\n            buyer: buyer,\r\n            amount: amount_,\r\n            units: units_,\r\n            price: price,\r\n            fee: fee_\r\n        });\r\n        _buy(offering, buyParameter);\r\n        return (amount_, fee_);\r\n    }\r\n\r\n    struct BuyLocalVar {\r\n        uint256 transferInAmount;\r\n        uint256 transferOutAmount;\r\n    }\r\n\r\n    struct BuyParameter {\r\n        address buyer;\r\n        uint256 amount;\r\n        uint128 units;\r\n        uint128 price;\r\n        uint128 fee;\r\n    }\r\n\r\n    function _buy(Offering storage offering_, BuyParameter memory parameter_)\r\n        internal\r\n    {\r\n        require(offering_.isValid, \"offering invalid\");\r\n        require(offering_.units > 0, \"sold out\");\r\n        require(\r\n            block.timestamp >= offering_.startTime &&\r\n                block.timestamp <= offering_.endTime,\r\n            \"not offering time\"\r\n        );\r\n        if (offering_.useAllowList) {\r\n            require(\r\n                _allowAddresses[offering_.voucher].contains(parameter_.buyer),\r\n                \"not in allow list\"\r\n            );\r\n        }\r\n        if (offering_.units >= offering_.min) {\r\n            require(parameter_.units >= offering_.min, \"min amount not met\");\r\n        }\r\n        if (offering_.max > 0) {\r\n            uint128 purchased = _tradeRecords[offering_.offeringId][\r\n                parameter_.buyer\r\n            ].add(parameter_.units);\r\n            require(purchased <= offering_.max, \"exceeds purchase limit\");\r\n            _tradeRecords[offering_.offeringId][parameter_.buyer] = purchased;\r\n        }\r\n\r\n        offering_.units = offering_.units.sub(\r\n            parameter_.units,\r\n            \"insufficient units for sale\"\r\n        );\r\n        BuyLocalVar memory vars;\r\n\r\n        vars.transferInAmount = parameter_.amount;\r\n        vars.transferOutAmount = parameter_.amount.sub(\r\n            parameter_.fee,\r\n            \"fee exceeds amount\"\r\n        );\r\n\r\n        uint256 voucherId = _transferAsset(\r\n            offering_,\r\n            parameter_.buyer,\r\n            vars.transferInAmount,\r\n            parameter_.units,\r\n            vars.transferOutAmount\r\n        );\r\n\r\n        solver.operationVerify(\r\n            \"Buy\",\r\n            abi.encode(\r\n                offering_.offeringId,\r\n                parameter_.buyer,\r\n                parameter_.amount,\r\n                parameter_.units,\r\n                parameter_.fee\r\n            )\r\n        );\r\n\r\n        emit Traded(\r\n            parameter_.buyer,\r\n            offering_.offeringId,\r\n            offering_.voucher,\r\n            voucherId,\r\n            _generateNextTradeId(),\r\n            uint32(block.timestamp),\r\n            offering_.currency,\r\n            uint8(offering_.priceType),\r\n            parameter_.price,\r\n            parameter_.units,\r\n            parameter_.amount,\r\n            parameter_.fee\r\n        );\r\n    }\r\n\r\n    function _transferAsset(\r\n        Offering memory offering_,\r\n        address buyer_,\r\n        uint256 transferInAmount_,\r\n        uint128 transferOutUnits_,\r\n        uint256 transferOutAmount_\r\n    ) internal returns (uint256 voucherId) {\r\n        ERC20TransferHelper.doTransferIn(\r\n            offering_.currency,\r\n            buyer_,\r\n            transferInAmount_\r\n        );\r\n\r\n        voucherId = _mintVoucher(offering_.offeringId, transferOutUnits_);\r\n\r\n        VNFTTransferHelper.doTransferOut(offering_.voucher, buyer_, voucherId);\r\n\r\n        ERC20TransferHelper.doTransferOut(\r\n            offering_.currency,\r\n            payable(offering_.issuer),\r\n            transferOutAmount_\r\n        );\r\n    }\r\n\r\n    function purchasedUnits(uint24 offeringId_, address buyer_)\r\n        external\r\n        view\r\n        returns (uint128)\r\n    {\r\n        return _tradeRecords[offeringId_][buyer_];\r\n    }\r\n\r\n    function remove(uint24 offeringId_) external virtual nonReentrant {\r\n        Offering memory offering = offerings[offeringId_];\r\n        require(offering.isValid, \"invalid offering\");\r\n        require(offering.issuer == msg.sender, \"only issuer\");\r\n        require(\r\n            block.timestamp < offering.startTime ||\r\n                block.timestamp > offering.endTime,\r\n            \"offering processing\"\r\n        );\r\n\r\n        uint256 err = solver.operationAllowed(\r\n            \"Remove\",\r\n            abi.encode(offering.voucher, offering.offeringId, offering.issuer)\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        _refund(offeringId_, offering.units);\r\n\r\n        emit Remove(\r\n            offering.issuer,\r\n            offering.offeringId,\r\n            offering.voucher,\r\n            offering.totalUnits,\r\n            offering.totalUnits - offering.units\r\n        );\r\n        delete offerings[offeringId_];\r\n    }\r\n\r\n    function _getFee(address voucher_, uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint128)\r\n    {\r\n        Market storage market = markets[voucher_];\r\n\r\n        uint256 fee = amount.mul(uint256(market.feeRate)).div(\r\n            uint256(Constants.FULL_PERCENTAGE)\r\n        );\r\n        require(fee <= uint128(-1), \"Fee: exceeds uint128 max\");\r\n        return uint128(fee);\r\n    }\r\n\r\n    function getPrice(uint24 offeringId_)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint128)\r\n    {\r\n        return\r\n            PriceManager.price(offerings[offeringId_].priceType, offeringId_);\r\n    }\r\n\r\n    function totalOfferingsOfvoucher(address voucher_)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return _voucherOfferings[voucher_].length();\r\n    }\r\n\r\n    function offeringIdOfvoucherByIndex(address voucher_, uint256 index_)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return _voucherOfferings[voucher_].at(index_);\r\n    }\r\n\r\n    function _generateNextofferingId() internal returns (uint24) {\r\n        return nextOfferingId++;\r\n    }\r\n\r\n    function _generateNextTradeId() internal returns (uint24) {\r\n        return nextTradeId++;\r\n    }\r\n\r\n    function addMarket(\r\n        address voucher_,\r\n        address voucherPool_,\r\n        Constants.VoucherType voucherType_,\r\n        address asset_,\r\n        uint8 decimals_,\r\n        uint16 feeRate_,\r\n        bool onlyManangerOffer_\r\n    ) external onlyAdmin {\r\n        if (_vouchers.contains(voucher_)) {\r\n            revert(\"already added\");\r\n        }\r\n        require(isSupportVoucherType(voucherType_), \"unsupported voucher type\");\r\n        require(feeRate_ <= Constants.FULL_PERCENTAGE, \"invalid fee rate\");\r\n        markets[voucher_].voucherPool = voucherPool_;\r\n        markets[voucher_].isValid = true;\r\n        markets[voucher_].decimals = decimals_;\r\n        markets[voucher_].feeRate = feeRate_;\r\n        markets[voucher_].voucherType = voucherType_;\r\n        markets[voucher_].asset = asset_;\r\n        markets[voucher_].onlyManangerOffer = onlyManangerOffer_;\r\n\r\n        _vouchers.add(voucher_);\r\n\r\n        emit AddMarket(\r\n            voucher_,\r\n            voucherType_,\r\n            asset_,\r\n            decimals_,\r\n            feeRate_,\r\n            onlyManangerOffer_\r\n        );\r\n    }\r\n\r\n    function removeMarket(address voucher_) external onlyAdmin {\r\n        _vouchers.remove(voucher_);\r\n        delete markets[voucher_];\r\n        emit RemoveMarket(voucher_);\r\n    }\r\n\r\n    function setCurrency(address currency_, bool enable_) external onlyAdmin {\r\n        if (enable_) {\r\n            _currencies.add(currency_);\r\n        } else {\r\n            _currencies.remove(currency_);\r\n        }\r\n        emit SetCurrency(currency_, enable_);\r\n    }\r\n\r\n    function withdrawFee(address currency_, uint256 reduceAmount_)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        ERC20TransferHelper.doTransferOut(\r\n            currency_,\r\n            payable(_admin),\r\n            reduceAmount_\r\n        );\r\n        emit WithdrawFee(currency_, reduceAmount_);\r\n    }\r\n\r\n    function addAllowAddress(\r\n        address voucher_,\r\n        address[] calldata addresses_,\r\n        bool resetExisting_\r\n    ) external onlyVoucherManager(voucher_) {\r\n        require(markets[voucher_].isValid, \"unsupported voucher\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _allowAddresses[\r\n            voucher_\r\n        ];\r\n\r\n        if (resetExisting_) {\r\n            while (set.length() != 0) {\r\n                set.remove(set.at(0));\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            set.add(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function removeAllowAddress(address voucher_, address[] calldata addresses_)\r\n        external\r\n        onlyVoucherManager(voucher_)\r\n    {\r\n        require(markets[voucher_].isValid, \"unsupported voucher\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _allowAddresses[\r\n            voucher_\r\n        ];\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            set.remove(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function isBuyerAllowed(address voucher_, address buyer_)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _allowAddresses[voucher_].contains(buyer_);\r\n    }\r\n\r\n    function setVoucherManager(\r\n        address voucher_,\r\n        address[] calldata managers_,\r\n        bool resetExisting_\r\n    ) external onlyAdmin {\r\n        require(markets[voucher_].isValid, \"unsupported voucher\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _voucherManagers[\r\n            voucher_\r\n        ];\r\n        if (resetExisting_) {\r\n            while (set.length() != 0) {\r\n                set.remove(set.at(0));\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < managers_.length; i++) {\r\n            set.add(managers_[i]);\r\n        }\r\n    }\r\n\r\n    function voucherManagers(address voucher_)\r\n        external\r\n        view\r\n        returns (address[] memory managers_)\r\n    {\r\n        managers_ = new address[](_voucherManagers[voucher_].length());\r\n        for (uint256 i = 0; i < _voucherManagers[voucher_].length(); i++) {\r\n            managers_[i] = _voucherManagers[voucher_].at(i);\r\n        }\r\n    }\r\n\r\n    function setSolver(IIVOSolver newSolver_) public virtual onlyAdmin {\r\n        IIVOSolver oldSolver = solver;\r\n        require(newSolver_.isSolver(), \"invalid solver\");\r\n        solver = newSolver_;\r\n\r\n        emit NewSolver(oldSolver, newSolver_);\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/misc/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nlibrary Constants {\r\n    enum ClaimType {\r\n        LINEAR,\r\n        ONE_TIME,\r\n        STAGED\r\n    }\r\n\r\n    enum VoucherType {\r\n        STANDARD_VESTING,\r\n        FLEXIBLE_DATE_VESTING,\r\n        BOUNDING\r\n    }\r\n\r\n    uint32 internal constant FULL_PERCENTAGE = 10000;\r\n    address internal constant ETH_ADDRESS =\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/access/AdminControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"../openzeppelin/utils/ContextUpgradeable.sol\";\r\nimport \"../openzeppelin/proxy/Initializable.sol\";\r\n\r\nabstract contract AdminControl is Initializable, ContextUpgradeable {\r\n\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    address public _admin;\r\n    address public pendingAdmin;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_msgSender() == _admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    function __AdminControl_init(address admin_) internal initializer {\r\n        _admin = admin_;\r\n    }\r\n\r\n    function setPendingAdmin(address newPendingAdmin_) external virtual onlyAdmin {\r\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin_);\r\n        pendingAdmin = newPendingAdmin_;        \r\n    }\r\n\r\n    function acceptAdmin() external virtual {\r\n        require(_msgSender() == pendingAdmin, \"only pending admin\");\r\n        emit NewAdmin(_admin, pendingAdmin);\r\n        _admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n}"
    },
    "src/ivo/commons/solidity-utils/math/SafeMathUpgradeable128.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable128 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        uint128 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint128 a, uint128 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        if (a == 0) return 0;\r\n        uint128 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/helpers/VNFTTransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ERC721Interface {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ninterface VNFTInterface {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external returns (uint256 newTokenId);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external returns (uint256 newTokenId);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 units\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\nlibrary VNFTTransferHelper {\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 tokenId\r\n    ) internal {\r\n        ERC721Interface token = ERC721Interface(underlying);\r\n        token.transferFrom(from, address(this), tokenId);\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        ERC721Interface token = ERC721Interface(underlying);\r\n        token.transferFrom(address(this), to, tokenId);\r\n    }\r\n\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) internal {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        token.safeTransferFrom(from, address(this), tokenId, units, \"\");\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) internal returns (uint256 newTokenId) {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        newTokenId = token.safeTransferFrom(\r\n            address(this),\r\n            to,\r\n            tokenId,\r\n            units,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 units\r\n    ) internal {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        token.safeTransferFrom(\r\n            address(this),\r\n            to,\r\n            tokenId,\r\n            targetTokenId,\r\n            units,\r\n            \"\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/helpers/ERC20TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\nimport \"../misc/Constants.sol\";\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary ERC20TransferHelper {\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (underlying == Constants.ETH_ADDRESS) {\r\n            // Sanity checks\r\n            require(tx.origin == from || msg.sender == from, \"sender mismatch\");\r\n            require(msg.value == amount, \"value mismatch\");\r\n\r\n            return amount;\r\n        } else {\r\n            require(msg.value == 0, \"don't support msg.value\");\r\n            uint256 balanceBefore = ERC20Interface(underlying).balanceOf(\r\n                address(this)\r\n            );\r\n            (bool success, bytes memory data) = underlying.call(\r\n                abi.encodeWithSelector(\r\n                    ERC20Interface.transferFrom.selector,\r\n                    from,\r\n                    address(this),\r\n                    amount\r\n                )\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"STF\"\r\n            );\r\n\r\n            // Calculate the amount that was *actually* transferred\r\n            uint256 balanceAfter = ERC20Interface(underlying).balanceOf(\r\n                address(this)\r\n            );\r\n            require(\r\n                balanceAfter >= balanceBefore,\r\n                \"TOKEN_TRANSFER_IN_OVERFLOW\"\r\n            );\r\n            return balanceAfter - balanceBefore; // underflow already checked above, just subtract\r\n        }\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address payable to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (underlying == Constants.ETH_ADDRESS) {\r\n            (bool success, ) = to.call{value: amount}(new bytes(0));\r\n            require(success, \"STE\");\r\n        } else {\r\n            (bool success, bytes memory data) = underlying.call(\r\n                abi.encodeWithSelector(\r\n                    ERC20Interface.transfer.selector,\r\n                    to,\r\n                    amount\r\n                )\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"ST\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function getCashPrior(address underlying_) internal view returns (uint256) {\r\n        if (underlying_ == Constants.ETH_ADDRESS) {\r\n            uint256 startingBalance = sub(address(this).balance, msg.value);\r\n            return startingBalance;\r\n        } else {\r\n            ERC20Interface token = ERC20Interface(underlying_);\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solver/interface/IIVOSolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IIVOSolver {\r\n\r\n    event SetOperationPaused (\r\n        address product,\r\n        string operation,\r\n        bool setPaused\r\n    );\r\n\r\n\r\n    function isSolver() external pure returns (bool);\r\n\r\n    function setOperationPaused(address product_, string calldata operation_, bool setPaused_) external;\r\n\r\n    function operationAllowed(string calldata operation_, bytes calldata data_) external returns (uint256);\r\n\r\n    function operationVerify(string calldata operation_, bytes calldata data_) external returns (uint256);\r\n    \r\n}"
    },
    "src/ivo/markets/offering-market-core/PriceManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ncontract PriceManager {\r\n    enum PriceType {\r\n        FIXED,\r\n        DECLIINING_BY_TIME\r\n    }\r\n\r\n    struct DecliningPrice {\r\n        uint128 highest; //起始价格\r\n        uint128 lowest; //最终价格\r\n        uint32 startTime;\r\n        uint32 duration; //持续时间\r\n        uint32 interval; //降价周期\r\n    }\r\n\r\n    //saleId => DecliningPrice\r\n    mapping(uint24 => DecliningPrice) internal decliningPrices;\r\n    mapping(uint24 => uint128) internal fixedPrices;\r\n\r\n    function price(PriceType priceType_, uint24 offeringId_)\r\n        internal\r\n        view\r\n        returns (uint128)\r\n    {\r\n        if (priceType_ == PriceType.FIXED) {\r\n            return fixedPrices[offeringId_];\r\n        }\r\n\r\n        if (priceType_ == PriceType.DECLIINING_BY_TIME) {\r\n            DecliningPrice storage price_ = decliningPrices[offeringId_];\r\n            if (block.timestamp >= price_.startTime + price_.duration) {\r\n                return price_.lowest;\r\n            }\r\n            if (block.timestamp <= price_.startTime) {\r\n                return price_.highest;\r\n            }\r\n\r\n            uint256 lastPrice = price_.highest -\r\n                ((block.timestamp - price_.startTime) / price_.interval) *\r\n                ((price_.interval * (price_.highest - price_.lowest)) /\r\n                    price_.duration);\r\n            uint256 price256 = lastPrice < price_.lowest\r\n                ? price_.lowest\r\n                : lastPrice;\r\n            require(price256 <= uint128(-1), \"price: exceeds uint128 max\");\r\n\r\n            return uint128(price256);\r\n        }\r\n\r\n        revert(\"unsupported priceType\");\r\n    }\r\n\r\n    function setFixedPrice(uint24 offeringId_, uint128 price_) internal {\r\n        fixedPrices[offeringId_] = price_;\r\n    }\r\n\r\n    function setDecliningPrice(\r\n        uint24 offeringId_,\r\n        uint32 startTime_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) internal {\r\n        require(highest_ > lowest_, \"highest must greater than lowest\");\r\n        require(duration_ >= interval_, \"duration must greater than interval\");\r\n        decliningPrices[offeringId_].startTime = startTime_;\r\n        decliningPrices[offeringId_].highest = highest_;\r\n        decliningPrices[offeringId_].lowest = lowest_;\r\n        decliningPrices[offeringId_].duration = duration_;\r\n        decliningPrices[offeringId_].interval = interval_;\r\n    }\r\n\r\n    function getDecliningPrice(uint24 offeringId_)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 highest,\r\n            uint128 lowest,\r\n            uint32 startTime,\r\n            uint32 duration,\r\n            uint32 interval\r\n        )\r\n    {\r\n        DecliningPrice storage decliningPrice = decliningPrices[offeringId_];\r\n        return (\r\n            decliningPrice.highest,\r\n            decliningPrice.lowest,\r\n            decliningPrice.startTime,\r\n            decliningPrice.duration,\r\n            decliningPrice.interval\r\n        );\r\n    }\r\n\r\n    function getFixedPrice(uint24 offeringId_) external view returns (uint128) {\r\n        return fixedPrices[offeringId_];\r\n    }\r\n}\r\n"
    },
    "src/ivo/markets/convertible-marketplace/interface/ISolvMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ISolvMarketplace {\r\n    event Publish(\r\n        address indexed icToken,\r\n        address indexed seller,\r\n        uint24 indexed tokenId,\r\n        uint24 saleId,\r\n        uint8 priceType,\r\n        uint128 units,\r\n        uint128 startTime,\r\n        address currency,\r\n        uint128 min,\r\n        uint128 max,\r\n        bool useAllowList\r\n    );\r\n\r\n    event Remove(\r\n        address indexed icToken,\r\n        address indexed seller,\r\n        uint24 indexed saleId,\r\n        uint128 total,\r\n        uint128 saled\r\n    );\r\n\r\n    event FixedPriceSet(\r\n        address indexed icToken,\r\n        uint24 indexed saleId,\r\n        uint24 indexed tokenId,\r\n        uint8 priceType,\r\n        uint128 lastPrice\r\n    );\r\n\r\n    event DecliningPriceSet(\r\n        address indexed icToken,\r\n        uint24 indexed saleId,\r\n        uint24 indexed tokenId,\r\n        uint128 highest,\r\n        uint128 lowest,\r\n        uint32 duration,\r\n        uint32 interval\r\n    );\r\n\r\n    event Traded(\r\n        address indexed buyer,\r\n        uint24 indexed saleId,\r\n        address indexed icToken,\r\n        uint24 tokenId,\r\n        uint24 tradeId,\r\n        uint32 tradeTime,\r\n        address currency,\r\n        uint8 priceType,\r\n        uint128 price,\r\n        uint128 tradedUnits,\r\n        uint256 tradedAmount,\r\n        uint8 feePayType,\r\n        uint128 fee\r\n    );\r\n\r\n    function publishFixedPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 price_\r\n    ) external returns (uint24 saleId);\r\n\r\n    function publishDecliningPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) external returns (uint24 saleId);\r\n\r\n    function buyByAmount(uint24 saleId_, uint256 amount_)\r\n        external\r\n        payable\r\n        returns (uint128 units_);\r\n\r\n    function buyByUnits(uint24 saleId_, uint128 units_)\r\n        external\r\n        payable\r\n        returns (uint256 amount_, uint128 fee_);\r\n\r\n    function remove(uint24 saleId_) external;\r\n\r\n    function totalSalesOfICToken(address icToken_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function saleIdOfICTokenByIndex(address icToken_, uint256 index_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPrice(uint24 saleId_) external view returns (uint128);\r\n}\r\n"
    },
    "src/ivo/vouchers/convertible-voucher/oracle/UniswapV2PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../../../commons/solidity-utils/access/AdminControl.sol\";\r\nimport \"../../../commons/solidity-utils/misc/Constants.sol\";\r\nimport \"../../../commons/solidity-utils/misc/StringConvertor.sol\";\r\nimport \"../../../commons/solidity-utils/misc/BokkyPooBahsDateTimeLibrary.sol\";\r\nimport \"../../../commons/solidity-utils/openzeppelin/math/SafeMathUpgradeable.sol\";\r\nimport \"../../../commons/solidity-utils/openzeppelin/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"../interface/IPriceOracle.sol\";\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator)\r\n        internal\r\n        pure\r\n        returns (uq112x112 memory)\r\n    {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << 112) / denominator);\r\n    }\r\n\r\n    // decode a uq112x112 into a uint256 with 18 decimals of precision\r\n    function decode112with18(uq112x112 memory self)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\r\n        // instead, get close to:\r\n        //  (x * 1e18) >> 112\r\n        // without risk of overflowing, e.g.:\r\n        //  (x) / 2 ** (112 - lg(1e18))\r\n        return uint256(self._x) / 5192296858534827;\r\n    }\r\n}\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2**32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(address pair)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 price0Cumulative,\r\n            uint256 price1Cumulative,\r\n            uint32 blockTimestamp\r\n        )\r\n    {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        ) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative +=\r\n                uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\r\n                timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative +=\r\n                uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\r\n                timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\n/**\r\n * Only support UniswapV2 pairs with ETH or any StableCoin.\r\n */\r\ncontract UniswapV2PriceOracle is IPriceOracle, AdminControl {\r\n    using FixedPoint for *;\r\n    using SafeMathUpgradeable for *;\r\n    using BokkyPooBahsDateTimeLibrary for uint64;\r\n\r\n    event AddTokenConfig(\r\n        address underlying,\r\n        uint256 baseUnit,\r\n        uint256 anchorUnit,\r\n        address uniswapMarket,\r\n        bool isStableCoinBase,\r\n        bool isUniswapReversed\r\n    );\r\n\r\n    event SetPriceOracleManager(\r\n        address oldPriceOracleManager, \r\n        address newPriceOracleManager\r\n    );\r\n\r\n    event RefreshPrice(\r\n        address underlying,\r\n        uint64 fromDate,\r\n        uint64 toDate,\r\n        uint256 fromTimestamp,\r\n        uint256 fromTokenAcc,\r\n        uint256 fromEthAcc,\r\n        uint256 toTimestamp,\r\n        uint256 toTokenAcc,\r\n        uint256 toEthAcc,\r\n        uint256 price\r\n    );\r\n\r\n    struct TokenConfig {\r\n        uint256 baseUnit;\r\n        uint256 anchorUnit;\r\n        address uniswapMarket;\r\n        bool isStableCoinBase;\r\n        bool isUniswapReversed;\r\n    }\r\n\r\n    struct Observation {\r\n        uint256 fromTimestamp;\r\n        uint256 fromTokenAcc;\r\n        uint256 fromEthAcc;\r\n        uint256 toTimestamp;\r\n        uint256 toTokenAcc;\r\n        uint256 toEthAcc;\r\n        uint256 price;\r\n    }\r\n\r\n    /// @notice A common scaling factor to maintain precision\r\n    uint256 public constant expScale = 1e18;\r\n\r\n    /// @notice Decimals of price value that this oracle should return\r\n    uint256 public constant priceUnit = 1e8;\r\n\r\n    // underlying => tokenConfig\r\n    mapping(address => TokenConfig) public tokenConfigs;\r\n\r\n    // underlying => datesig => Observation\r\n    mapping(address => mapping(bytes32 => Observation)) public observations;\r\n\r\n    address public priceOracleManager;\r\n\r\n    modifier onlyPriceOracleManager() {\r\n        require(msg.sender == priceOracleManager, \"only priceOracleManager\");\r\n        _;\r\n    }\r\n\r\n    function initialize(TokenConfig calldata ethConfig) external initializer {\r\n        AdminControl.__AdminControl_init(_msgSender());\r\n        tokenConfigs[Constants.ETH_ADDRESS] = TokenConfig(\r\n            ethConfig.baseUnit,\r\n            ethConfig.anchorUnit,\r\n            ethConfig.uniswapMarket,\r\n            ethConfig.isStableCoinBase,\r\n            ethConfig.isUniswapReversed\r\n        );\r\n    }\r\n\r\n    function addTokenConfig(\r\n        address underlying_,\r\n        uint256 baseUnit_,\r\n        uint256 anchorUnit_,\r\n        address uniswapMarket_,\r\n        bool isStableCoinBase_,\r\n        bool isUniswapReversed_\r\n    ) external onlyAdmin {\r\n        tokenConfigs[underlying_] = (\r\n            TokenConfig(baseUnit_, anchorUnit_, uniswapMarket_, isStableCoinBase_, isUniswapReversed_)\r\n        );\r\n\r\n        emit AddTokenConfig(\r\n            underlying_, baseUnit_, anchorUnit_, uniswapMarket_, \r\n            isStableCoinBase_, isUniswapReversed_\r\n        );\r\n    }\r\n\r\n    function refreshPrice(\r\n        address underlying_,\r\n        uint64 fromDate_,\r\n        uint64 toDate_\r\n    ) external override onlyPriceOracleManager {\r\n        string memory fromDate = _getDateString(fromDate_);\r\n        string memory toDate = _getDateString(toDate_);\r\n        bytes32 dateSignature = _getDateSignature(fromDate, toDate);\r\n\r\n        TokenConfig memory config = tokenConfigs[underlying_];\r\n        Observation storage observation = observations[underlying_][dateSignature];\r\n        require(\r\n            (observation.fromTimestamp == 0 &&\r\n                block.timestamp.sub(fromDate_) <= 86400) ||\r\n                (observation.toTimestamp == 0 && \r\n                    block.timestamp > observation.fromTimestamp &&\r\n                    block.timestamp.sub(toDate_) <= 86400),\r\n            \"non-refreshable\"\r\n        );\r\n\r\n        if (observation.fromTimestamp == 0) {\r\n            observation.fromTimestamp = block.timestamp;\r\n            observation.fromTokenAcc = currentCumulativePrice(\r\n                tokenConfigs[underlying_]\r\n            );\r\n            if (!config.isStableCoinBase) {\r\n                observation.fromEthAcc = currentCumulativePrice(\r\n                    tokenConfigs[Constants.ETH_ADDRESS]\r\n                );\r\n            }\r\n            \r\n        } else {\r\n            observation.toTimestamp = block.timestamp;\r\n            observation.toTokenAcc = currentCumulativePrice(\r\n                tokenConfigs[underlying_]\r\n            );\r\n\r\n            // determine the final price by fromAcc and toAcc\r\n            if (config.isStableCoinBase) {\r\n                observation.price = calculateAveragePrice(\r\n                    observation.fromTimestamp,\r\n                    observation.fromTokenAcc,\r\n                    observation.toTimestamp,\r\n                    observation.toTokenAcc,\r\n                    priceUnit,\r\n                    config.baseUnit,\r\n                    config.anchorUnit\r\n                );\r\n\r\n            } else {\r\n                TokenConfig memory ethConfig = tokenConfigs[Constants.ETH_ADDRESS];\r\n                observation.toEthAcc = currentCumulativePrice(ethConfig);\r\n\r\n                // 1e20 is used to scale the 6-decimal USDC price to the desired 8-decimal usd price\r\n                uint256 ethAveragePrice = calculateAveragePrice(\r\n                    observation.fromTimestamp,\r\n                    observation.fromEthAcc,\r\n                    observation.toTimestamp,\r\n                    observation.toEthAcc,\r\n                    priceUnit,\r\n                    ethConfig.baseUnit,\r\n                    ethConfig.anchorUnit\r\n                );\r\n                observation.price = calculateAveragePrice(\r\n                    observation.fromTimestamp,\r\n                    observation.fromTokenAcc,\r\n                    observation.toTimestamp,\r\n                    observation.toTokenAcc,\r\n                    ethAveragePrice,\r\n                    config.baseUnit,\r\n                    config.anchorUnit\r\n                );\r\n            }\r\n        }\r\n\r\n        emit RefreshPrice(\r\n            underlying_, fromDate_, toDate_, \r\n            observation.fromTimestamp, observation.fromTokenAcc, observation.fromEthAcc,\r\n            observation.toTimestamp, observation.toTokenAcc, observation.toEthAcc,\r\n            observation.price\r\n        );\r\n    }\r\n\r\n    function calculateAveragePrice(\r\n        uint256 fromTimestamp_,\r\n        uint256 fromAcc_,\r\n        uint256 toTimestamp_,\r\n        uint256 toAcc_,\r\n        uint256 conversionFactor_,\r\n        uint256 baseUnit_,\r\n        uint256 anchorUnit_\r\n    ) internal pure returns (uint256) {\r\n        require(\r\n            toTimestamp_ > fromTimestamp_ && toAcc_ > fromAcc_,\r\n            \"invalid acc values\"\r\n        );\r\n        uint256 timeElapsed = toTimestamp_ - fromTimestamp_;\r\n\r\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\r\n            uint224((toAcc_ - fromAcc_) / timeElapsed)\r\n        );\r\n        uint256 rawUniswapPriceMantissa = priceAverage.decode112with18();\r\n        uint256 unscaledPriceMantissa = rawUniswapPriceMantissa.mul(conversionFactor_);\r\n        return unscaledPriceMantissa.mul(baseUnit_).div(anchorUnit_).div(expScale);\r\n    }\r\n\r\n    function currentCumulativePrice(TokenConfig memory config)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (\r\n            uint256 cumulativePrice0,\r\n            uint256 cumulativePrice1,\r\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(\r\n                config.uniswapMarket\r\n            );\r\n        if (config.isUniswapReversed) {\r\n            return cumulativePrice1;\r\n        } else {\r\n            return cumulativePrice0;\r\n        }\r\n    }\r\n\r\n    function getObservation(\r\n        address underlying_,\r\n        uint64 fromDate_,\r\n        uint64 toDate_\r\n    ) external view returns (Observation memory) {\r\n        string memory fromDate = _getDateString(fromDate_);\r\n        string memory toDate = _getDateString(toDate_);\r\n        bytes32 dateSignature = _getDateSignature(fromDate, toDate);\r\n        return observations[underlying_][dateSignature];\r\n    }\r\n\r\n    function getPrice(\r\n        address underlying_,\r\n        uint64 fromDate_,\r\n        uint64 toDate_\r\n    ) external view override returns (int256) {\r\n        string memory fromDate = _getDateString(fromDate_);\r\n        string memory toDate = _getDateString(toDate_);\r\n        bytes32 dateSignature = _getDateSignature(fromDate, toDate);\r\n        return int256(observations[underlying_][dateSignature].price);\r\n    }\r\n\r\n    function setPriceOracleManager(address manager_) external onlyAdmin {\r\n        require(manager_ != address(0), \"manager can not be 0 address\");\r\n        emit SetPriceOracleManager(priceOracleManager, manager_);\r\n        priceOracleManager = manager_;\r\n    }\r\n\r\n    function _getDateString(uint64 date_)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = date_.timestampToDate();\r\n        return string(abi.encodePacked(year, \"-\", month, \"-\", day));\r\n    }\r\n\r\n    function _getDateSignature(string memory fromDate_, string memory toDate_)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(fromDate_, toDate_));\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/misc/BokkyPooBahsDateTimeLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's DateTime Library v1.01\r\n//\r\n// A gas-efficient Solidity date and time library\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\n//\r\n// Tested date range 1970/01/01 to 2345/12/31\r\n//\r\n// Conventions:\r\n// Unit      | Range         | Notes\r\n// :-------- |:-------------:|:-----\r\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\r\n// year      | 1970 ... 2345 |\r\n// month     | 1 ... 12      |\r\n// day       | 1 ... 31      |\r\n// hour      | 0 ... 23      |\r\n// minute    | 0 ... 59      |\r\n// second    | 0 ... 59      |\r\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary BokkyPooBahsDateTimeLibrary {\r\n\r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint constant SECONDS_PER_MINUTE = 60;\r\n    int constant OFFSET19700101 = 2440588;\r\n\r\n    uint constant DOW_MON = 1;\r\n    uint constant DOW_TUE = 2;\r\n    uint constant DOW_WED = 3;\r\n    uint constant DOW_THU = 4;\r\n    uint constant DOW_FRI = 5;\r\n    uint constant DOW_SAT = 6;\r\n    uint constant DOW_SUN = 7;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate the number of days from 1970/01/01 to year/month/day using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // days = day\r\n    //      - 32075\r\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\r\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\r\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\r\n    //      - offset\r\n    // ------------------------------------------------------------------------\r\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\r\n        require(year >= 1970);\r\n        int _year = int(year);\r\n        int _month = int(month);\r\n        int _day = int(day);\r\n\r\n        int __days = _day\r\n          - 32075\r\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\r\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\r\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\r\n          - OFFSET19700101;\r\n\r\n        _days = uint(__days);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate year/month/day from the number of days since 1970/01/01 using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // int L = days + 68569 + offset\r\n    // int N = 4 * L / 146097\r\n    // L = L - (146097 * N + 3) / 4\r\n    // year = 4000 * (L + 1) / 1461001\r\n    // L = L - 1461 * year / 4 + 31\r\n    // month = 80 * L / 2447\r\n    // dd = L - 2447 * month / 80\r\n    // L = month / 11\r\n    // month = month + 2 - 12 * L\r\n    // year = 100 * (N - 49) + year + L\r\n    // ------------------------------------------------------------------------\r\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\r\n        int __days = int(_days);\r\n\r\n        int L = __days + 68569 + OFFSET19700101;\r\n        int N = 4 * L / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int _year = 4000 * (L + 1) / 1461001;\r\n        L = L - 1461 * _year / 4 + 31;\r\n        int _month = 80 * L / 2447;\r\n        int _day = L - 2447 * _month / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint(_year);\r\n        month = uint(_month);\r\n        day = uint(_day);\r\n    }\r\n\r\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\r\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\r\n    }\r\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\r\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\r\n    }\r\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        uint secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n        secs = secs % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n        second = secs % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\r\n        if (year >= 1970 && month > 0 && month <= 12) {\r\n            uint daysInMonth = _getDaysInMonth(year, month);\r\n            if (day > 0 && day <= daysInMonth) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\r\n        if (isValidDate(year, month, day)) {\r\n            if (hour < 24 && minute < 60 && second < 60) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\r\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        leapYear = _isLeapYear(year);\r\n    }\r\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\r\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n    }\r\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\r\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\r\n    }\r\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\r\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\r\n    }\r\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\r\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        daysInMonth = _getDaysInMonth(year, month);\r\n    }\r\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\r\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n            daysInMonth = 31;\r\n        } else if (month != 2) {\r\n            daysInMonth = 30;\r\n        } else {\r\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\r\n        }\r\n    }\r\n    // 1 = Monday, 7 = Sunday\r\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\r\n        uint _days = timestamp / SECONDS_PER_DAY;\r\n        dayOfWeek = (_days + 3) % 7 + 1;\r\n    }\r\n\r\n    function getYear(uint timestamp) internal pure returns (uint year) {\r\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getMonth(uint timestamp) internal pure returns (uint month) {\r\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getDay(uint timestamp) internal pure returns (uint day) {\r\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getHour(uint timestamp) internal pure returns (uint hour) {\r\n        uint secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n    }\r\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\r\n        uint secs = timestamp % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n    }\r\n    function getSecond(uint timestamp) internal pure returns (uint second) {\r\n        second = timestamp % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        year += _years;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        month += _months;\r\n        year += (month - 1) / 12;\r\n        month = (month - 1) % 12 + 1;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp + _seconds;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        year -= _years;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        uint yearMonth = year * 12 + (month - 1) - _months;\r\n        year = yearMonth / 12;\r\n        month = yearMonth % 12 + 1;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\r\n        newTimestamp = timestamp - _seconds;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n        _years = toYear - fromYear;\r\n    }\r\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\r\n    }\r\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\r\n    }\r\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\r\n    }\r\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\r\n    }\r\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _seconds = toTimestamp - fromTimestamp;\r\n    }\r\n}"
    },
    "src/ivo/vouchers/convertible-voucher/interface/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IPriceOracle {\r\n    function refreshPrice(\r\n        address underlying_,\r\n        uint64 fromDate_,\r\n        uint64 toDate_\r\n    ) external;\r\n\r\n    function getPrice(\r\n        address underlying_,\r\n        uint64 fromDate_,\r\n        uint64 toDate_\r\n    ) external view returns (int256);\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "src/ivo/vouchers/convertible-voucher/oracle/ChainlinkPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../../../commons/solidity-utils/chainlink/ChainlinkClient.sol\";\r\nimport \"../../../commons/solidity-utils/misc/BokkyPooBahsDateTimeLibrary.sol\";\r\nimport \"../../../commons/solidity-utils/misc/StringConvertor.sol\";\r\nimport \"../../../commons/solidity-utils/openzeppelin/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"../interface/IPriceOracle.sol\";\r\n\r\ncontract ChainlinkPriceOracle is IPriceOracle, ChainlinkClient {\r\n    using StringConvertor for uint256;\r\n    using StringConvertor for bytes;\r\n    using StringConvertor for address;\r\n    using BokkyPooBahsDateTimeLibrary for uint256;\r\n    using Chainlink for Chainlink.Request;\r\n\r\n    struct Request {\r\n        address underlying;\r\n        bytes32 dateSignature;\r\n    }\r\n\r\n    event NewAdmin(\r\n        address oldAdmin, \r\n        address newAdmin\r\n    );\r\n\r\n    event NewPendingAdmin(\r\n        address oldPendingAdmin, \r\n        address newPendingAdmin\r\n    );\r\n\r\n    event SetPriceOracleManager(\r\n        address oldPriceOracleManager, \r\n        address newPriceOracleManager\r\n    );\r\n\r\n    event SetJobId(\r\n        bytes32 oldJobId,\r\n        bytes32 newJobId\r\n    );\r\n \r\n    event SetOraclePayment(\r\n        uint256 oldOraclePayment,\r\n        uint256 newOraclePayment\r\n    );\r\n\r\n    event SetTokenId(\r\n        address underlying,\r\n        uint256 tokenId\r\n    );\r\n\r\n    event RefreshPrice(\r\n        address underlying, \r\n        uint64 fromDate, \r\n        uint64 toDate,\r\n        bytes32 requestId\r\n    );\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n\r\n    address public priceOracleManager;\r\n\r\n    //underlying => datesig => price\r\n    mapping(address => mapping(bytes32 => int256)) public prices;\r\n\r\n    //underlying => cmc token id\r\n    mapping(address => uint256) public tokenIds;\r\n\r\n    //requestId => Request\r\n    mapping(bytes32 => Request) public requests;\r\n\r\n    bytes32 public JOB_ID;\r\n    uint256 public oraclePayment;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPriceOracleManager() {\r\n        require(msg.sender == priceOracleManager, \"only priceOracleManager\");\r\n        _;\r\n    }\r\n\r\n    constructor(bytes32 jobId_, uint256 oraclePayment_) {\r\n        JOB_ID = jobId_;\r\n        admin = msg.sender;\r\n        oraclePayment = oraclePayment_;\r\n    }\r\n\r\n    function refreshPrice(\r\n        address underlying_,\r\n        uint64 fromDate_,\r\n        uint64 toDate_\r\n    ) external override onlyPriceOracleManager {\r\n        require(block.timestamp > toDate_, \"premature\");\r\n\r\n        string memory fromDate = _getDateString(fromDate_);\r\n        string memory toDate = _getDateString(toDate_);\r\n\r\n        bytes32 dateSignature = _getDateSignature(fromDate, toDate);\r\n        require(prices[underlying_][dateSignature] != 0, \"already refreshed\");\r\n\r\n        bytes32 requestId = _requestChainlinkOracle(\r\n            underlying_,\r\n            fromDate,\r\n            toDate\r\n        );\r\n        requests[requestId] = Request({\r\n            underlying: underlying_,\r\n            dateSignature: _getDateSignature(fromDate, toDate)\r\n        });\r\n\r\n        emit RefreshPrice(underlying_, fromDate_, toDate_, requestId);\r\n    }\r\n\r\n    function getPrice(\r\n        address underlying_,\r\n        uint64 fromDate_,\r\n        uint64 toDate_\r\n    ) external view override returns (int256) {\r\n        string memory fromDate = _getDateString(fromDate_);\r\n        string memory toDate = _getDateString(toDate_);\r\n        bytes32 dateSignature = _getDateSignature(fromDate, toDate);\r\n        return prices[underlying_][dateSignature];\r\n    }\r\n\r\n    function _getDateString(uint64 date_)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        uint256 year = uint256(date_).getYear();\r\n        uint256 month = uint256(date_).getMonth();\r\n        uint256 day = uint256(date_).getDay();\r\n        return string(abi.encodePacked(year, \"-\", month, \"-\", day));\r\n    }\r\n\r\n    function _requestChainlinkOracle(\r\n        address underlying_,\r\n        string memory fromDate_,\r\n        string memory toDate_\r\n    ) internal returns (bytes32 requestId) {\r\n        Chainlink.Request memory req = buildChainlinkRequest(\r\n            JOB_ID,\r\n            address(this),\r\n            this.fulfill.selector\r\n        );\r\n        uint256 tokenId = tokenIds[underlying_];\r\n        require(tokenId > 0, \"invalid underlying\");\r\n        req.addUint(\"tokenId\", tokenId);\r\n        req.add(\"from\", fromDate_);\r\n        req.add(\"to\", toDate_);\r\n\r\n        requestId = sendChainlinkRequest(req, oraclePayment);\r\n    }\r\n\r\n    function _getDateSignature(string memory fromDate_, string memory toDate_)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(fromDate_, toDate_));\r\n    }\r\n\r\n    function fulfill(bytes32 requestId_, uint256 value_)\r\n        public\r\n        recordChainlinkFulfillment(requestId_)\r\n    {\r\n        Request memory request = requests[requestId_];\r\n        require(request.underlying != address(0), \"invalid request\");\r\n        prices[request.underlying][request.dateSignature] = int256(value_);\r\n    }\r\n\r\n    function setJobId(bytes32 jobId_) external onlyAdmin {\r\n        emit SetJobId(JOB_ID, jobId_);\r\n        JOB_ID = jobId_;\r\n    }\r\n\r\n    function setOraclePayment(uint256 payment_) external onlyAdmin {\r\n        emit SetOraclePayment(oraclePayment, payment_);\r\n        oraclePayment = payment_;\r\n    }\r\n\r\n    function setTokenId(address underlying_, uint256 tokenId_)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        tokenIds[underlying_] = tokenId_;\r\n        emit SetTokenId(underlying_, tokenId_);\r\n    }\r\n\r\n    function setPriceOracleManager(address manager_) external onlyAdmin {\r\n        require(manager_ != address(0), \"manager can not be 0 address\");\r\n        emit SetPriceOracleManager(priceOracleManager, manager_);\r\n        priceOracleManager = manager_;\r\n    }\r\n\r\n    function setPendingAdmin(address newPendingAdmin) external {\r\n        require(msg.sender == admin, \"only admin\");\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n    }\r\n\r\n    function acceptAdmin() external {\r\n        require(\r\n            msg.sender == pendingAdmin && msg.sender != address(0),\r\n            \"only pending admin\"\r\n        );\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/ChainlinkClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./Chainlink.sol\";\r\nimport \"./interfaces/ENSInterface.sol\";\r\nimport \"./interfaces/LinkTokenInterface.sol\";\r\nimport \"./interfaces/OperatorInterface.sol\";\r\nimport \"./interfaces/PointerInterface.sol\";\r\nimport { ENSResolver as ENSResolver_Chainlink } from \"./vendor/ENSResolver.sol\";\r\n\r\n/**\r\n * @title The ChainlinkClient contract\r\n * @notice Contract writers can inherit this contract in order to create requests for the\r\n * Chainlink network\r\n */\r\ncontract ChainlinkClient {\r\n  using Chainlink for Chainlink.Request;\r\n\r\n  uint256 constant internal LINK_DIVISIBILITY = 10**18;\r\n  uint256 constant private AMOUNT_OVERRIDE = 0;\r\n  address constant private SENDER_OVERRIDE = address(0);\r\n  uint256 constant private ORACLE_ARGS_VERSION = 1;\r\n  uint256 constant private OPERATOR_ARGS_VERSION = 2;\r\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\"link\");\r\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\r\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\r\n\r\n  ENSInterface private ens;\r\n  bytes32 private ensNode;\r\n  LinkTokenInterface private link;\r\n  OperatorInterface private oracle;\r\n  uint256 private requestCount = 1;\r\n  mapping(bytes32 => address) private pendingRequests;\r\n\r\n  event ChainlinkRequested(\r\n    bytes32 indexed id\r\n  );\r\n  event ChainlinkFulfilled(\r\n    bytes32 indexed id\r\n  );\r\n  event ChainlinkCancelled(\r\n    bytes32 indexed id\r\n  );\r\n\r\n  /**\r\n   * @notice Creates a request that can hold additional parameters\r\n   * @param specId The Job Specification ID that the request will be created for\r\n   * @param callbackAddress The callback address that the response will be sent to\r\n   * @param callbackFunctionSignature The callback function signature to use for the callback address\r\n   * @return A Chainlink Request struct in memory\r\n   */\r\n  function buildChainlinkRequest(\r\n    bytes32 specId,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionSignature\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      Chainlink.Request memory\r\n    )\r\n  {\r\n    Chainlink.Request memory req;\r\n    return req.initialize(specId, callbackAddress, callbackFunctionSignature);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the stored oracle address\r\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function sendChainlinkRequest(\r\n    Chainlink.Request memory req,\r\n    uint256 payment\r\n  )\r\n    internal\r\n    returns (\r\n      bytes32\r\n    )\r\n  {\r\n    return sendChainlinkRequestTo(address(oracle), req, payment);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the specified oracle address\r\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\r\n   * send LINK which creates a request on the target oracle contract.\r\n   * Emits ChainlinkRequested event.\r\n   * @param oracleAddress The address of the oracle for the request\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function sendChainlinkRequestTo(\r\n    address oracleAddress,\r\n    Chainlink.Request memory req,\r\n    uint256 payment\r\n  )\r\n    internal\r\n    returns (\r\n      bytes32 requestId\r\n    )\r\n  {\r\n    return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the stored oracle address\r\n   * @dev This function supports multi-word response\r\n   * @dev Calls `requestOracleDataFrom` with the stored oracle address\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function requestOracleData(\r\n    Chainlink.Request memory req,\r\n    uint256 payment\r\n  )\r\n    internal\r\n    returns (\r\n      bytes32\r\n    )\r\n  {\r\n    return requestOracleDataFrom(address(oracle), req, payment);\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a Chainlink request to the specified oracle address\r\n   * @dev This function supports multi-word response\r\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\r\n   * send LINK which creates a request on the target oracle contract.\r\n   * Emits ChainlinkRequested event.\r\n   * @param oracleAddress The address of the oracle for the request\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @return requestId The request ID\r\n   */\r\n  function requestOracleDataFrom(\r\n    address oracleAddress,\r\n    Chainlink.Request memory req,\r\n    uint256 payment\r\n  )\r\n    internal\r\n    returns (\r\n      bytes32 requestId\r\n    )\r\n  {\r\n    return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\r\n  }\r\n\r\n  /**\r\n   * @notice Make a request to an oracle\r\n   * @param oracleAddress The address of the oracle for the request\r\n   * @param req The initialized Chainlink Request\r\n   * @param payment The amount of LINK to send for the request\r\n   * @param argsVersion The version of data support (single word, multi word)\r\n   * @return requestId The request ID\r\n   */\r\n  function rawRequest(\r\n    address oracleAddress,\r\n    Chainlink.Request memory req,\r\n    uint256 payment,\r\n    uint256 argsVersion,\r\n    bytes4 funcSelector\r\n  )\r\n    private\r\n    returns (\r\n      bytes32 requestId\r\n    )\r\n  {\r\n    requestId = keccak256(abi.encodePacked(this, requestCount));\r\n    req.nonce = requestCount;\r\n    pendingRequests[requestId] = oracleAddress;\r\n    emit ChainlinkRequested(requestId);\r\n    bytes memory encodedData = abi.encodeWithSelector(\r\n      funcSelector,\r\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\r\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\r\n      req.id,\r\n      req.callbackAddress,\r\n      req.callbackFunctionId,\r\n      req.nonce,\r\n      argsVersion,\r\n      req.buf.buf);\r\n    require(link.transferAndCall(oracleAddress, payment, encodedData), \"unable to transferAndCall to oracle\");\r\n    requestCount += 1;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows a request to be cancelled if it has not been fulfilled\r\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\r\n   * Deletes the request from the `pendingRequests` mapping.\r\n   * Emits ChainlinkCancelled event.\r\n   * @param requestId The request ID\r\n   * @param payment The amount of LINK sent for the request\r\n   * @param callbackFunc The callback function specified for the request\r\n   * @param expiration The time of the expiration for the request\r\n   */\r\n  function cancelChainlinkRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    bytes4 callbackFunc,\r\n    uint256 expiration\r\n  )\r\n    internal\r\n  {\r\n    OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\r\n    delete pendingRequests[requestId];\r\n    emit ChainlinkCancelled(requestId);\r\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle address\r\n   * @param oracleAddress The address of the oracle contract\r\n   */\r\n  function setChainlinkOracle(\r\n    address oracleAddress\r\n  )\r\n    internal\r\n  {\r\n    oracle = OperatorInterface(oracleAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the LINK token address\r\n   * @param linkAddress The address of the LINK token contract\r\n   */\r\n  function setChainlinkToken(\r\n    address linkAddress\r\n  )\r\n    internal\r\n  {\r\n    link = LinkTokenInterface(linkAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the Chainlink token address for the public\r\n   * network as given by the Pointer contract\r\n   */\r\n  function setPublicChainlinkToken() \r\n    internal\r\n  {\r\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the stored address of the LINK token\r\n   * @return The address of the LINK token\r\n   */\r\n  function chainlinkTokenAddress()\r\n    internal\r\n    view\r\n    returns (\r\n      address\r\n    )\r\n  {\r\n    return address(link);\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the stored address of the oracle contract\r\n   * @return The address of the oracle contract\r\n   */\r\n  function chainlinkOracleAddress()\r\n    internal\r\n    view\r\n    returns (\r\n      address\r\n    )\r\n  {\r\n    return address(oracle);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows for a request which was created on another contract to be fulfilled\r\n   * on this contract\r\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\r\n   * @param requestId The request ID used for the response\r\n   */\r\n  function addChainlinkExternalRequest(\r\n    address oracleAddress,\r\n    bytes32 requestId\r\n  )\r\n    internal\r\n    notPendingRequest(requestId)\r\n  {\r\n    pendingRequests[requestId] = oracleAddress;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\r\n   * @dev Accounts for subnodes having different resolvers\r\n   * @param ensAddress The address of the ENS contract\r\n   * @param node The ENS node hash\r\n   */\r\n  function useChainlinkWithENS(\r\n    address ensAddress,\r\n    bytes32 node\r\n  )\r\n    internal\r\n  {\r\n    ens = ENSInterface(ensAddress);\r\n    ensNode = node;\r\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\r\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\r\n    setChainlinkToken(resolver.addr(linkSubnode));\r\n    updateChainlinkOracleWithENS();\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the stored oracle contract with the address resolved by ENS\r\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\r\n   */\r\n  function updateChainlinkOracleWithENS()\r\n    internal\r\n  {\r\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\r\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\r\n    setChainlinkOracle(resolver.addr(oracleSubnode));\r\n  }\r\n\r\n  /**\r\n   * @notice Ensures that the fulfillment is valid for this contract\r\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\r\n   * @param requestId The request ID for fulfillment\r\n   */\r\n  function validateChainlinkCallback(\r\n    bytes32 requestId\r\n  )\r\n    internal\r\n    recordChainlinkFulfillment(requestId)\r\n    // solhint-disable-next-line no-empty-blocks\r\n  {}\r\n\r\n  /**\r\n   * @dev Reverts if the sender is not the oracle of the request.\r\n   * Emits ChainlinkFulfilled event.\r\n   * @param requestId The request ID for fulfillment\r\n   */\r\n  modifier recordChainlinkFulfillment(\r\n    bytes32 requestId\r\n  )\r\n  {\r\n    require(msg.sender == pendingRequests[requestId],\r\n            \"Source must be the oracle of the request\");\r\n    delete pendingRequests[requestId];\r\n    emit ChainlinkFulfilled(requestId);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the request is already pending\r\n   * @param requestId The request ID for fulfillment\r\n   */\r\n  modifier notPendingRequest(\r\n    bytes32 requestId\r\n  )\r\n  {\r\n    require(pendingRequests[requestId] == address(0), \"Request is already pending\");\r\n    _;\r\n  }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/Chainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport { CBORChainlink } from \"./vendor/CBORChainlink.sol\";\r\nimport { BufferChainlink } from \"./vendor/BufferChainlink.sol\";\r\n\r\n/**\r\n * @title Library for common Chainlink functions\r\n * @dev Uses imported CBOR library for encoding to buffer\r\n */\r\nlibrary Chainlink {\r\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\r\n\r\n  using CBORChainlink for BufferChainlink.buffer;\r\n\r\n  struct Request {\r\n    bytes32 id;\r\n    address callbackAddress;\r\n    bytes4 callbackFunctionId;\r\n    uint256 nonce;\r\n    BufferChainlink.buffer buf;\r\n  }\r\n\r\n  /**\r\n   * @notice Initializes a Chainlink request\r\n   * @dev Sets the ID, callback address, and callback function signature on the request\r\n   * @param self The uninitialized request\r\n   * @param jobId The Job Specification ID\r\n   * @param callbackAddr The callback address\r\n   * @param callbackFunc The callback function signature\r\n   * @return The initialized request\r\n   */\r\n  function initialize(\r\n    Request memory self,\r\n    bytes32 jobId,\r\n    address callbackAddr,\r\n    bytes4 callbackFunc\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      Chainlink.Request memory\r\n    )\r\n  {\r\n    BufferChainlink.init(self.buf, defaultBufferSize);\r\n    self.id = jobId;\r\n    self.callbackAddress = callbackAddr;\r\n    self.callbackFunctionId = callbackFunc;\r\n    return self;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\r\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\r\n   * @param self The initialized request\r\n   * @param data The CBOR data\r\n   */\r\n  function setBuffer(\r\n    Request memory self,\r\n    bytes memory data\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    BufferChainlink.init(self.buf, data.length);\r\n    BufferChainlink.append(self.buf, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a string value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param value The string value to add\r\n   */\r\n  function add(\r\n    Request memory self,\r\n    string memory key,\r\n    string memory value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    self.buf.encodeString(key);\r\n    self.buf.encodeString(value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a bytes value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param value The bytes value to add\r\n   */\r\n  function addBytes(\r\n    Request memory self,\r\n    string memory key,\r\n    bytes memory value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    self.buf.encodeString(key);\r\n    self.buf.encodeBytes(value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a int256 value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param value The int256 value to add\r\n   */\r\n  function addInt(\r\n    Request memory self,\r\n    string memory key,\r\n    int256 value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    self.buf.encodeString(key);\r\n    self.buf.encodeInt(value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a uint256 value to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param value The uint256 value to add\r\n   */\r\n  function addUint(\r\n    Request memory self,\r\n    string memory key,\r\n    uint256 value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    self.buf.encodeString(key);\r\n    self.buf.encodeUInt(value);\r\n  }\r\n\r\n  /**\r\n   * @notice Adds an array of strings to the request with a given key name\r\n   * @param self The initialized request\r\n   * @param key The name of the key\r\n   * @param values The array of string values to add\r\n   */\r\n  function addStringArray(\r\n    Request memory self,\r\n    string memory key,\r\n    string[] memory values\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    self.buf.encodeString(key);\r\n    self.buf.startArray();\r\n    for (uint256 i = 0; i < values.length; i++) {\r\n      self.buf.encodeString(values[i]);\r\n    }\r\n    self.buf.endSequence();\r\n  }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/ENSInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface ENSInterface {\r\n\r\n  // Logged when the owner of a node assigns a new owner to a subnode.\r\n  event NewOwner(\r\n    bytes32 indexed node,\r\n    bytes32 indexed label,\r\n    address owner\r\n  );\r\n\r\n  // Logged when the owner of a node transfers ownership to a new account.\r\n  event Transfer(\r\n    bytes32 indexed node,\r\n    address owner\r\n  );\r\n\r\n  // Logged when the resolver for a node changes.\r\n  event NewResolver(\r\n    bytes32 indexed node,\r\n    address resolver\r\n  );\r\n\r\n  // Logged when the TTL of a node changes\r\n  event NewTTL(\r\n    bytes32 indexed node,\r\n    uint64 ttl\r\n  );\r\n\r\n\r\n  function setSubnodeOwner(\r\n    bytes32 node,\r\n    bytes32 label,\r\n    address owner\r\n  ) external;\r\n\r\n  function setResolver(\r\n    bytes32 node,\r\n    address resolver\r\n  ) external;\r\n\r\n  function setOwner(\r\n    bytes32 node,\r\n    address owner\r\n  ) external;\r\n\r\n  function setTTL(\r\n    bytes32 node,\r\n    uint64 ttl\r\n  ) external;\r\n\r\n  function owner(\r\n    bytes32 node\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      address\r\n    );\r\n\r\n  function resolver(\r\n    bytes32 node\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      address\r\n    );\r\n\r\n  function ttl(\r\n    bytes32 node\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint64\r\n    );\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface LinkTokenInterface {\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 remaining\r\n    );\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function balanceOf(\r\n    address owner\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 balance\r\n    );\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8 decimalPlaces\r\n    );\r\n\r\n  function decreaseApproval(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function increaseApproval(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) external;\r\n\r\n  function name()\r\n    external\r\n    view\r\n    returns (\r\n      string memory tokenName\r\n    );\r\n\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (\r\n      string memory tokenSymbol\r\n    );\r\n\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalTokensIssued\r\n    );\r\n\r\n  function transfer(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/OperatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./ChainlinkRequestInterface.sol\";\r\nimport \"./OracleInterface.sol\";\r\n\r\ninterface OperatorInterface is\r\n  ChainlinkRequestInterface,\r\n  OracleInterface\r\n{\r\n\r\n  function requestOracleData(\r\n    address sender,\r\n    uint256 payment,\r\n    bytes32 specId,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 dataVersion,\r\n    bytes calldata data\r\n  )\r\n    external;\r\n\r\n  function fulfillOracleRequest2(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    returns (\r\n      bool\r\n    );\r\n\r\n  function ownerTransferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    returns (\r\n      bool success\r\n    );\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/PointerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface PointerInterface {\r\n  \r\n  function getAddress()\r\n    external\r\n    view\r\n    returns (\r\n      address\r\n    );\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/vendor/ENSResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nabstract contract ENSResolver {\r\n  function addr(\r\n    bytes32 node\r\n  )\r\n    public\r\n    view\r\n    virtual\r\n    returns (\r\n      address\r\n    );\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/vendor/CBORChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.4.19;\r\n\r\nimport { BufferChainlink } from \"./BufferChainlink.sol\";\r\n\r\nlibrary CBORChainlink {\r\n  using BufferChainlink for BufferChainlink.buffer;\r\n\r\n  uint8 private constant MAJOR_TYPE_INT = 0;\r\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n  uint8 private constant MAJOR_TYPE_STRING = 3;\r\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n  uint8 private constant MAJOR_TYPE_MAP = 5;\r\n  uint8 private constant MAJOR_TYPE_TAG = 6;\r\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\r\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\r\n\r\n  function encodeType(\r\n    BufferChainlink.buffer memory buf,\r\n    uint8 major,\r\n    uint value\r\n  )\r\n    private\r\n    pure\r\n  {\r\n    if(value <= 23) {\r\n      buf.appendUint8(uint8((major << 5) | value));\r\n    } else if(value <= 0xFF) {\r\n      buf.appendUint8(uint8((major << 5) | 24));\r\n      buf.appendInt(value, 1);\r\n    } else if(value <= 0xFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 25));\r\n      buf.appendInt(value, 2);\r\n    } else if(value <= 0xFFFFFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 26));\r\n      buf.appendInt(value, 4);\r\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\r\n      buf.appendUint8(uint8((major << 5) | 27));\r\n      buf.appendInt(value, 8);\r\n    }\r\n  }\r\n\r\n  function encodeIndefiniteLengthType(\r\n    BufferChainlink.buffer memory buf,\r\n    uint8 major\r\n  )\r\n    private\r\n    pure\r\n  {\r\n    buf.appendUint8(uint8((major << 5) | 31));\r\n  }\r\n\r\n  function encodeUInt(\r\n    BufferChainlink.buffer memory buf,\r\n    uint value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    encodeType(buf, MAJOR_TYPE_INT, value);\r\n  }\r\n\r\n  function encodeInt(\r\n    BufferChainlink.buffer memory buf,\r\n    int value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    if(value < -0x10000000000000000) {\r\n      encodeSignedBigNum(buf, value);\r\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\r\n      encodeBigNum(buf, value);\r\n    } else if(value >= 0) {\r\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\r\n    } else {\r\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\r\n    }\r\n  }\r\n\r\n  function encodeBytes(\r\n    BufferChainlink.buffer memory buf,\r\n    bytes memory value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\r\n    buf.append(value);\r\n  }\r\n\r\n  function encodeBigNum(\r\n    BufferChainlink.buffer memory buf,\r\n    int value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\r\n    encodeBytes(buf, abi.encode(uint(value)));\r\n  }\r\n\r\n  function encodeSignedBigNum(\r\n    BufferChainlink.buffer memory buf,\r\n    int input\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\r\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\r\n  }\r\n\r\n  function encodeString(\r\n    BufferChainlink.buffer memory buf,\r\n    string memory value\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\r\n    buf.append(bytes(value));\r\n  }\r\n\r\n  function startArray(\r\n    BufferChainlink.buffer memory buf\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\r\n  }\r\n\r\n  function startMap(\r\n    BufferChainlink.buffer memory buf\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\r\n  }\r\n\r\n  function endSequence(\r\n    BufferChainlink.buffer memory buf\r\n  )\r\n    internal\r\n    pure\r\n  {\r\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\r\n  }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/vendor/BufferChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n* @dev A library for working with mutable byte buffers in Solidity.\r\n*\r\n* Byte buffers are mutable and expandable, and provide a variety of primitives\r\n* for writing to them. At any time you can fetch a bytes object containing the\r\n* current contents of the buffer. The bytes object should not be stored between\r\n* operations, as it may change due to resizing of the buffer.\r\n*/\r\nlibrary BufferChainlink {\r\n  /**\r\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\r\n  *      a capacity. The capacity may be longer than the current value, in\r\n  *      which case it can be extended without the need to allocate more memory.\r\n  */\r\n  struct buffer {\r\n    bytes buf;\r\n    uint capacity;\r\n  }\r\n\r\n  /**\r\n  * @dev Initializes a buffer with an initial capacity.\r\n  * @param buf The buffer to initialize.\r\n  * @param capacity The number of bytes of space to allocate the buffer.\r\n  * @return The buffer, for chaining.\r\n  */\r\n  function init(\r\n    buffer memory buf,\r\n    uint capacity\r\n  )\r\n    internal\r\n    pure\r\n    returns(\r\n      buffer memory\r\n    )\r\n  {\r\n    if (capacity % 32 != 0) {\r\n      capacity += 32 - (capacity % 32);\r\n    }\r\n    // Allocate space for the buffer data\r\n    buf.capacity = capacity;\r\n    assembly {\r\n      let ptr := mload(0x40)\r\n      mstore(buf, ptr)\r\n      mstore(ptr, 0)\r\n      mstore(0x40, add(32, add(ptr, capacity)))\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Initializes a new buffer from an existing bytes object.\r\n  *      Changes to the buffer may mutate the original value.\r\n  * @param b The bytes object to initialize the buffer with.\r\n  * @return A new buffer.\r\n  */\r\n  function fromBytes(\r\n    bytes memory b\r\n  )\r\n    internal\r\n    pure\r\n    returns(\r\n      buffer memory\r\n    )\r\n  {\r\n    buffer memory buf;\r\n    buf.buf = b;\r\n    buf.capacity = b.length;\r\n    return buf;\r\n  }\r\n\r\n  function resize(\r\n    buffer memory buf,\r\n    uint capacity\r\n  )\r\n    private\r\n    pure\r\n  {\r\n    bytes memory oldbuf = buf.buf;\r\n    init(buf, capacity);\r\n    append(buf, oldbuf);\r\n  }\r\n\r\n  function max(\r\n    uint a,\r\n    uint b\r\n  )\r\n    private\r\n    pure\r\n    returns(\r\n      uint\r\n    )\r\n  {\r\n    if (a > b) {\r\n      return a;\r\n    }\r\n    return b;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets buffer length to 0.\r\n  * @param buf The buffer to truncate.\r\n  * @return The original buffer, for chaining..\r\n  */\r\n  function truncate(\r\n    buffer memory buf\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      buffer memory\r\n    )\r\n  {\r\n    assembly {\r\n      let bufptr := mload(buf)\r\n      mstore(bufptr, 0)\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The start offset to write to.\r\n  * @param data The data to append.\r\n  * @param len The number of bytes to copy.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function write(\r\n    buffer memory buf,\r\n    uint off,\r\n    bytes memory data,\r\n    uint len\r\n  )\r\n    internal\r\n    pure\r\n    returns(\r\n      buffer memory\r\n    )\r\n  {\r\n    require(len <= data.length);\r\n\r\n    if (off + len > buf.capacity) {\r\n      resize(buf, max(buf.capacity, len + off) * 2);\r\n    }\r\n\r\n    uint dest;\r\n    uint src;\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Length of existing buffer data\r\n      let buflen := mload(bufptr)\r\n      // Start address = buffer address + offset + sizeof(buffer length)\r\n      dest := add(add(bufptr, 32), off)\r\n      // Update buffer length if we're extending it\r\n      if gt(add(len, off), buflen) {\r\n        mstore(bufptr, add(len, off))\r\n      }\r\n      src := add(data, 32)\r\n    }\r\n\r\n    // Copy word-length chunks while possible\r\n    for (; len >= 32; len -= 32) {\r\n      assembly {\r\n        mstore(dest, mload(src))\r\n      }\r\n      dest += 32;\r\n      src += 32;\r\n    }\r\n\r\n    // Copy remaining bytes\r\n    uint mask = 256 ** (32 - len) - 1;\r\n    assembly {\r\n      let srcpart := and(mload(src), not(mask))\r\n      let destpart := and(mload(dest), mask)\r\n      mstore(dest, or(destpart, srcpart))\r\n    }\r\n\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @param len The number of bytes to copy.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function append(\r\n    buffer memory buf,\r\n    bytes memory data,\r\n    uint len\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      buffer memory\r\n    )\r\n  {\r\n    return write(buf, buf.buf.length, data, len);\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function append(\r\n    buffer memory buf,\r\n    bytes memory data\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      buffer memory\r\n    )\r\n  {\r\n    return write(buf, buf.buf.length, data, data.length);\r\n  }\r\n\r\n  /**\r\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\r\n  *      capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The offset to write the byte at.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function writeUint8(\r\n    buffer memory buf,\r\n    uint off,\r\n    uint8 data\r\n  )\r\n    internal\r\n    pure\r\n    returns(\r\n      buffer memory\r\n    )\r\n  {\r\n    if (off >= buf.capacity) {\r\n      resize(buf, buf.capacity * 2);\r\n    }\r\n\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Length of existing buffer data\r\n      let buflen := mload(bufptr)\r\n      // Address = buffer address + sizeof(buffer length) + off\r\n      let dest := add(add(bufptr, off), 32)\r\n      mstore8(dest, data)\r\n      // Update buffer length if we extended it\r\n      if eq(off, buflen) {\r\n        mstore(bufptr, add(buflen, 1))\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\r\n  *      capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function appendUint8(\r\n    buffer memory buf,\r\n    uint8 data\r\n  )\r\n    internal\r\n    pure\r\n    returns(\r\n      buffer memory\r\n    )\r\n  {\r\n    return writeUint8(buf, buf.buf.length, data);\r\n  }\r\n\r\n  /**\r\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\r\n  *      exceed the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The offset to write at.\r\n  * @param data The data to append.\r\n  * @param len The number of bytes to write (left-aligned).\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function write(\r\n    buffer memory buf,\r\n    uint off,\r\n    bytes32 data,\r\n    uint len\r\n  )\r\n    private\r\n    pure\r\n    returns(\r\n      buffer memory\r\n    )\r\n  {\r\n    if (len + off > buf.capacity) {\r\n      resize(buf, (len + off) * 2);\r\n    }\r\n\r\n    uint mask = 256 ** len - 1;\r\n    // Right-align data\r\n    data = data >> (8 * (32 - len));\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Address = buffer address + sizeof(buffer length) + off + len\r\n      let dest := add(add(bufptr, off), len)\r\n      mstore(dest, or(and(mload(dest), not(mask)), data))\r\n      // Update buffer length if we extended it\r\n      if gt(add(off, len), mload(bufptr)) {\r\n        mstore(bufptr, add(off, len))\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\r\n  *      capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The offset to write at.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function writeBytes20(\r\n    buffer memory buf,\r\n    uint off,\r\n    bytes20 data\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      buffer memory\r\n    )\r\n  {\r\n    return write(buf, off, bytes32(data), 20);\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chhaining.\r\n  */\r\n  function appendBytes20(\r\n    buffer memory buf,\r\n    bytes20 data\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      buffer memory\r\n    )\r\n  {\r\n    return write(buf, buf.buf.length, bytes32(data), 20);\r\n  }\r\n\r\n  /**\r\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param data The data to append.\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function appendBytes32(\r\n    buffer memory buf,\r\n    bytes32 data\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      buffer memory\r\n    )\r\n  {\r\n    return write(buf, buf.buf.length, data, 32);\r\n  }\r\n\r\n  /**\r\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\r\n  *      the capacity of the buffer.\r\n  * @param buf The buffer to append to.\r\n  * @param off The offset to write at.\r\n  * @param data The data to append.\r\n  * @param len The number of bytes to write (right-aligned).\r\n  * @return The original buffer, for chaining.\r\n  */\r\n  function writeInt(\r\n    buffer memory buf,\r\n    uint off,\r\n    uint data,\r\n    uint len\r\n  )\r\n    private\r\n    pure\r\n    returns(\r\n      buffer memory\r\n    )\r\n  {\r\n    if (len + off > buf.capacity) {\r\n      resize(buf, (len + off) * 2);\r\n    }\r\n\r\n    uint mask = 256 ** len - 1;\r\n    assembly {\r\n      // Memory address of the buffer data\r\n      let bufptr := mload(buf)\r\n      // Address = buffer address + off + sizeof(buffer length) + len\r\n      let dest := add(add(bufptr, off), len)\r\n      mstore(dest, or(and(mload(dest), not(mask)), data))\r\n      // Update buffer length if we extended it\r\n      if gt(add(off, len), mload(bufptr)) {\r\n        mstore(bufptr, add(off, len))\r\n      }\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  /**\r\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n    * exceed the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param data The data to append.\r\n    * @return The original buffer.\r\n    */\r\n  function appendInt(\r\n    buffer memory buf,\r\n    uint data,\r\n    uint len\r\n  )\r\n    internal\r\n    pure\r\n    returns(\r\n      buffer memory\r\n    )\r\n  {\r\n    return writeInt(buf, buf.buf.length, data, len);\r\n  }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/ChainlinkRequestInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface ChainlinkRequestInterface {\r\n  function oracleRequest(\r\n    address sender,\r\n    uint256 requestPrice,\r\n    bytes32 serviceAgreementID,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 dataVersion,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function cancelOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration\r\n  ) external;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface OracleInterface {\r\n  function fulfillOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration,\r\n    bytes32 data\r\n  )\r\n    external\r\n    returns (\r\n      bool\r\n    );\r\n\r\n  function withdraw(\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function withdrawable()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/Operator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./AuthorizedReceiver.sol\";\r\nimport \"./LinkTokenReceiver.sol\";\r\nimport \"./ConfirmedOwner.sol\";\r\nimport \"./interfaces/LinkTokenInterface.sol\";\r\nimport \"./interfaces/OperatorInterface.sol\";\r\nimport \"./interfaces/OwnableInterface.sol\";\r\nimport \"./interfaces/WithdrawalInterface.sol\";\r\nimport \"./vendor/Address.sol\";\r\nimport \"./vendor/SafeMathChainlink.sol\";\r\n\r\n/**\r\n * @title The Chainlink Operator contract\r\n * @notice Node operators can deploy this contract to fulfill requests sent to them\r\n */\r\ncontract Operator is\r\n  AuthorizedReceiver,\r\n  ConfirmedOwner,\r\n  LinkTokenReceiver,\r\n  OperatorInterface,\r\n  WithdrawalInterface\r\n{\r\n  using Address for address;\r\n  using SafeMathChainlink for uint256;\r\n\r\n  struct Commitment {\r\n    bytes31 paramsHash;\r\n    uint8 dataVersion;\r\n  }\r\n\r\n  uint256 constant public getExpiryTime = 5 minutes;\r\n  uint256 constant private MAXIMUM_DATA_VERSION = 256;\r\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\r\n  uint256 constant private SELECTOR_LENGTH = 4;\r\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\r\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\r\n  // We initialize fields to 1 instead of 0 so that the first invocation\r\n  // does not cost more gas.\r\n  uint256 constant private ONE_FOR_CONSISTENT_GAS_COST = 1;\r\n  // oracleRequest is version 1, enabling single word responses\r\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = this.oracleRequest.selector;\r\n  // requestOracleData is version 2, enabling multi-word responses\r\n  bytes4 constant private OPERATOR_REQUEST_SELECTOR = this.requestOracleData.selector;\r\n\r\n  LinkTokenInterface internal immutable linkToken;\r\n  mapping(bytes32 => Commitment) private s_commitments;\r\n  // Tokens sent for requests that have not been fulfilled yet\r\n  uint256 private s_tokensInEscrow = ONE_FOR_CONSISTENT_GAS_COST;\r\n\r\n  event OracleRequest(\r\n    bytes32 indexed specId,\r\n    address requester,\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddr,\r\n    bytes4 callbackFunctionId,\r\n    uint256 cancelExpiration,\r\n    uint256 dataVersion,\r\n    bytes data\r\n  );\r\n\r\n  event CancelOracleRequest(\r\n    bytes32 indexed requestId\r\n  );\r\n\r\n  event OracleResponse(\r\n    bytes32 indexed requestId\r\n  );\r\n\r\n  event OwnableContractAccepted(\r\n    address indexed accpetedContract\r\n  );\r\n\r\n  event TargetsUpdatedAuthorizedSenders(\r\n    address[] targets,\r\n    address[] senders,\r\n    address changedBy\r\n  );\r\n\r\n  /**\r\n   * @notice Deploy with the address of the LINK token\r\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\r\n   * @param link The address of the LINK token\r\n   * @param owner The address of the owner\r\n   */\r\n  constructor(\r\n    address link,\r\n    address owner\r\n  )\r\n    ConfirmedOwner(owner)\r\n  {\r\n    linkToken = LinkTokenInterface(link); // external but already deployed and unalterable\r\n  }\r\n\r\n  function oracleRequest(\r\n    address sender,\r\n    uint256 payment,\r\n    bytes32 specId,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 dataVersion,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    override\r\n  {\r\n    requestOracleData(\r\n      sender,\r\n      payment,\r\n      specId,\r\n      callbackAddress,\r\n      callbackFunctionId,\r\n      nonce,\r\n      dataVersion,\r\n      data\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Creates the Chainlink request\r\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\r\n   * Emits OracleRequest event for the Chainlink node to detect.\r\n   * @param sender The sender of the request\r\n   * @param payment The amount of payment given (specified in wei)\r\n   * @param specId The Job Specification ID\r\n   * @param callbackAddress The callback address for the response\r\n   * @param callbackFunctionId The callback function ID for the response\r\n   * @param nonce The nonce sent by the requester\r\n   * @param dataVersion The specified data version\r\n   * @param data The CBOR payload of the request\r\n   */\r\n  function requestOracleData(\r\n    address sender,\r\n    uint256 payment,\r\n    bytes32 specId,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 dataVersion,\r\n    bytes calldata data\r\n  )\r\n    public\r\n    override\r\n    validateFromLINK()\r\n    validateNotToLINK(callbackAddress)\r\n  {\r\n    (bytes32 requestId, uint256 expiration) = _verifyOracleRequest(\r\n      sender,\r\n      payment,\r\n      callbackAddress,\r\n      callbackFunctionId,\r\n      nonce,\r\n      dataVersion\r\n    );\r\n    emit OracleRequest(\r\n      specId,\r\n      sender,\r\n      requestId,\r\n      payment,\r\n      callbackAddress,\r\n      callbackFunctionId,\r\n      expiration,\r\n      dataVersion,\r\n      data);\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the Chainlink node to fulfill requests\r\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\r\n   * Will call the callback address' callback function without bubbling up error\r\n   * checking in a `require` so that the node can get paid.\r\n   * @param requestId The fulfillment request ID that must match the requester's\r\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\r\n   * @param callbackAddress The callback address to call for fulfillment\r\n   * @param callbackFunctionId The callback function ID to use for fulfillment\r\n   * @param expiration The expiration that the node should respond by before the requester can cancel\r\n   * @param data The data to return to the consuming contract\r\n   * @return Status if the external call was successful\r\n   */\r\n  function fulfillOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration,\r\n    bytes32 data\r\n  )\r\n    external\r\n    override\r\n    validateAuthorizedSender()\r\n    validateRequestId(requestId)\r\n    returns (\r\n      bool\r\n    )\r\n  {\r\n    _verifyOracleResponse(\r\n      requestId,\r\n      payment,\r\n      callbackAddress,\r\n      callbackFunctionId,\r\n      expiration,\r\n      1\r\n    );\r\n    emit OracleResponse(requestId);\r\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\r\n    // All updates to the oracle's fulfillment should come before calling the\r\n    // callback(addr+functionId) as it is untrusted.\r\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\r\n    (bool success, ) = callbackAddress.call(abi.encodeWithSelector(callbackFunctionId, requestId, data)); // solhint-disable-line avoid-low-level-calls\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the Chainlink node to fulfill requests with multi-word support\r\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\r\n   * Will call the callback address' callback function without bubbling up error\r\n   * checking in a `require` so that the node can get paid.\r\n   * @param requestId The fulfillment request ID that must match the requester's\r\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\r\n   * @param callbackAddress The callback address to call for fulfillment\r\n   * @param callbackFunctionId The callback function ID to use for fulfillment\r\n   * @param expiration The expiration that the node should respond by before the requester can cancel\r\n   * @param data The data to return to the consuming contract\r\n   * @return Status if the external call was successful\r\n   */\r\n  function fulfillOracleRequest2(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    override\r\n    validateAuthorizedSender()\r\n    validateRequestId(requestId)\r\n    validateMultiWordResponseId(requestId, data)\r\n    returns (\r\n      bool\r\n    )\r\n  {\r\n    _verifyOracleResponse(\r\n      requestId,\r\n      payment,\r\n      callbackAddress,\r\n      callbackFunctionId,\r\n      expiration,\r\n      2\r\n    );\r\n    emit OracleResponse(requestId);\r\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\r\n    // All updates to the oracle's fulfillment should come before calling the\r\n    // callback(addr+functionId) as it is untrusted.\r\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\r\n    (bool success, ) = callbackAddress.call(abi.encodePacked(callbackFunctionId, data)); // solhint-disable-line avoid-low-level-calls\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer the ownership of ownable contracts\r\n   * @param ownable list of addresses to transfer\r\n   * @param newOwner address to transfer ownership to\r\n   */\r\n  function transferOwnableContracts(\r\n    address[] calldata ownable,\r\n    address newOwner\r\n  )\r\n    external\r\n    onlyOwner()\r\n  {\r\n    for (uint256 i = 0; i < ownable.length; i++) {\r\n      OwnableInterface(ownable[i]).transferOwnership(newOwner);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Accept the ownership of an ownable contract\r\n   * @dev Must be the pending owner on the contract\r\n   * @param ownable list of addresses of Ownable contracts to accept\r\n   */\r\n  function acceptOwnableContracts(\r\n    address[] calldata ownable\r\n  )\r\n    public\r\n    validateAuthorizedSenderSetter()\r\n  {\r\n    for (uint256 i = 0; i < ownable.length; i++) {\r\n      OwnableInterface(ownable[i]).acceptOwnership();\r\n      emit OwnableContractAccepted(ownable[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the fulfillment permission for\r\n   * @param targets The addresses to set permissions on\r\n   * @param senders The addresses that are allowed to send updates\r\n   */\r\n  function setAuthorizedSendersOn(\r\n    address[] calldata targets,\r\n    address[] calldata senders\r\n  )\r\n    public\r\n    validateAuthorizedSenderSetter()\r\n  {\r\n    TargetsUpdatedAuthorizedSenders(targets, senders, msg.sender);\r\n\r\n    for (uint256 i = 0; i < targets.length; i++) {\r\n      AuthorizedReceiverInterface(targets[i]).setAuthorizedSenders(senders);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the fulfillment permission for\r\n   * @param targets The addresses to set permissions on\r\n   * @param senders The addresses that are allowed to send updates\r\n   */\r\n  function acceptAuthorizedReceivers(\r\n    address[] calldata targets,\r\n    address[] calldata senders\r\n  )\r\n    external\r\n    validateAuthorizedSenderSetter()\r\n  {\r\n    acceptOwnableContracts(targets);\r\n    setAuthorizedSendersOn(targets, senders);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the node operator to withdraw earned LINK to a given address\r\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\r\n   * @param recipient The address to send the LINK token to\r\n   * @param amount The amount to send (specified in wei)\r\n   */\r\n  function withdraw(\r\n    address recipient,\r\n    uint256 amount\r\n  )\r\n    external\r\n    override(OracleInterface, WithdrawalInterface)\r\n    onlyOwner()\r\n    validateAvailableFunds(amount)\r\n  {\r\n    assert(linkToken.transfer(recipient, amount));\r\n  }\r\n\r\n  /**\r\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\r\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\r\n   * @return The amount of withdrawable LINK on the contract\r\n   */\r\n  function withdrawable()\r\n    external\r\n    view\r\n    override(OracleInterface, WithdrawalInterface)\r\n    returns (uint256)\r\n  {\r\n    return _fundsAvailable();\r\n  }\r\n\r\n  /**\r\n   * @notice Forward a call to another contract\r\n   * @dev Only callable by the owner\r\n   * @param to address\r\n   * @param data to forward\r\n   */\r\n  function ownerForward(\r\n    address to,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    onlyOwner()\r\n    validateNotToLINK(to)\r\n  {\r\n    require(to.isContract(), \"Must forward to a contract\");\r\n    (bool status,) = to.call(data);\r\n    require(status, \"Forwarded call failed\");\r\n  }\r\n\r\n  /**\r\n   * @notice Interact with other LinkTokenReceiver contracts by calling transferAndCall\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   * @param data The extra data to be passed to the receiving contract.\r\n   * @return success bool\r\n   */\r\n  function ownerTransferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    override\r\n    onlyOwner()\r\n    validateAvailableFunds(value)\r\n    returns (\r\n      bool success\r\n    )\r\n  {\r\n    return linkToken.transferAndCall(to, value, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Distribute funds to multiple addresses using ETH send\r\n   * to this payable function.\r\n   * @dev Array length must be equal, ETH sent must equal the sum of amounts.\r\n   * @param receivers list of addresses\r\n   * @param amounts list of amounts\r\n   */\r\n  function distributeFunds(\r\n    address payable[] calldata receivers,\r\n    uint[] calldata amounts\r\n  )\r\n    external\r\n    payable\r\n  {\r\n    require(receivers.length > 0 && receivers.length == amounts.length, \"Invalid array length(s)\");\r\n    uint256 valueRemaining = msg.value;\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      uint256 sendAmount = amounts[i];\r\n      valueRemaining = valueRemaining.sub(sendAmount);\r\n      receivers[i].transfer(sendAmount);\r\n    }\r\n    require(valueRemaining == 0, \"Too much ETH sent\");\r\n  }\r\n\r\n  /**\r\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\r\n   * sent for the request back to the requester's address.\r\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\r\n   * Emits CancelOracleRequest event.\r\n   * @param requestId The request ID\r\n   * @param payment The amount of payment given (specified in wei)\r\n   * @param callbackFunc The requester's specified callback address\r\n   * @param expiration The time of the expiration for the request\r\n   */\r\n  function cancelOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    bytes4 callbackFunc,\r\n    uint256 expiration\r\n  )\r\n    external\r\n    override\r\n  {\r\n    bytes31 paramsHash = _buildFunctionHash(payment, msg.sender, callbackFunc, expiration);\r\n    require(s_commitments[requestId].paramsHash == paramsHash, \"Params do not match request ID\");\r\n    // solhint-disable-next-line not-rely-on-time\r\n    require(expiration <= block.timestamp, \"Request is not expired\");\r\n\r\n    delete s_commitments[requestId];\r\n    emit CancelOracleRequest(requestId);\r\n\r\n    assert(linkToken.transfer(msg.sender, payment));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the address of the LINK token\r\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\r\n   * an internal method of the ChainlinkClient contract\r\n   */\r\n  function getChainlinkToken()\r\n    public\r\n    view\r\n    override\r\n    returns (\r\n      address\r\n    )\r\n  {\r\n    return address(linkToken);\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Require that the token transfer action is valid\r\n   * @dev OPERATOR_REQUEST_SELECTOR = multiword, ORACLE_REQUEST_SELECTOR = singleword\r\n   */\r\n  function _validateTokenTransferAction(\r\n    bytes4 funcSelector,\r\n    bytes memory data\r\n  )\r\n    internal\r\n    override\r\n    pure\r\n  {\r\n    require(data.length >= MINIMUM_REQUEST_LENGTH, \"Invalid request length\");\r\n    require(funcSelector == OPERATOR_REQUEST_SELECTOR || funcSelector == ORACLE_REQUEST_SELECTOR, \"Must use whitelisted functions\");\r\n  }\r\n\r\n  /**\r\n   * @notice Verify the Oracle Request\r\n   * @param sender The sender of the request\r\n   * @param payment The amount of payment given (specified in wei)\r\n   * @param callbackAddress The callback address for the response\r\n   * @param callbackFunctionId The callback function ID for the response\r\n   * @param nonce The nonce sent by the requester\r\n   */\r\n  function _verifyOracleRequest(\r\n    address sender,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 dataVersion\r\n  )\r\n    private\r\n    returns (\r\n      bytes32 requestId,\r\n      uint256 expiration\r\n    )\r\n  {\r\n    requestId = keccak256(abi.encodePacked(sender, nonce));\r\n    require(s_commitments[requestId].paramsHash == 0, \"Must use a unique ID\");\r\n    // solhint-disable-next-line not-rely-on-time\r\n    expiration = block.timestamp.add(getExpiryTime);\r\n    bytes31 paramsHash = _buildFunctionHash(payment, callbackAddress, callbackFunctionId, expiration);\r\n    s_commitments[requestId] = Commitment(paramsHash, _safeCastToUint8(dataVersion));\r\n    s_tokensInEscrow = s_tokensInEscrow.add(payment);\r\n    return (requestId, expiration);\r\n  }\r\n\r\n  /**\r\n   * @notice Verify the Oracle Response\r\n   * @param requestId The fulfillment request ID that must match the requester's\r\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\r\n   * @param callbackAddress The callback address to call for fulfillment\r\n   * @param callbackFunctionId The callback function ID to use for fulfillment\r\n   * @param expiration The expiration that the node should respond by before the requester can cancel\r\n   */\r\n  function _verifyOracleResponse(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration,\r\n    uint256 dataVersion\r\n  )\r\n    internal\r\n  {\r\n    bytes31 paramsHash = _buildFunctionHash(payment, callbackAddress, callbackFunctionId, expiration);\r\n    require(s_commitments[requestId].paramsHash == paramsHash, \"Params do not match request ID\");\r\n    require(s_commitments[requestId].dataVersion <= _safeCastToUint8(dataVersion), \"Data versions must match\");\r\n    s_tokensInEscrow = s_tokensInEscrow.sub(payment);\r\n    delete s_commitments[requestId];\r\n  }\r\n\r\n  /**\r\n   * @notice Build the bytes31 function hash from the payment, callback and expiration.\r\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\r\n   * @param callbackAddress The callback address to call for fulfillment\r\n   * @param callbackFunctionId The callback function ID to use for fulfillment\r\n   * @param expiration The expiration that the node should respond by before the requester can cancel\r\n   * @return hash bytes31\r\n   */\r\n  function _buildFunctionHash(\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      bytes31\r\n    )\r\n  {\r\n    return bytes31(keccak256(\r\n      abi.encodePacked(\r\n        payment,\r\n        callbackAddress,\r\n        callbackFunctionId,\r\n        expiration\r\n      )\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * @notice Safely cast uint256 to uint8\r\n   * @param number uint256\r\n   * @return uint8 number\r\n   */\r\n  function _safeCastToUint8(\r\n    uint256 number\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint8\r\n    )\r\n  {\r\n    require(number < MAXIMUM_DATA_VERSION, \"number too big to cast\");\r\n    return uint8(number);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the LINK available in this contract, not locked in escrow\r\n   * @return uint256 LINK tokens available\r\n   */\r\n  function _fundsAvailable()\r\n    private\r\n    view\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    uint256 inEscrow = s_tokensInEscrow.sub(ONE_FOR_CONSISTENT_GAS_COST);\r\n    return linkToken.balanceOf(address(this)).sub(inEscrow);\r\n  }\r\n\r\n  /**\r\n   * @notice concrete implementation of AuthorizedReceiver\r\n   * @return bool of whether sender is authorized\r\n   */\r\n  function _canSetAuthorizedSenders()\r\n    internal\r\n    view\r\n    override\r\n    returns (bool)\r\n  {\r\n    return isAuthorizedSender(msg.sender) || owner() == msg.sender;\r\n  }\r\n\r\n\r\n  // MODIFIERS\r\n\r\n  /**\r\n   * @dev Reverts if the first 32 bytes of the bytes array is not equal to requestId\r\n   * @param requestId bytes32\r\n   * @param data bytes\r\n   */\r\n  modifier validateMultiWordResponseId(\r\n    bytes32 requestId,\r\n    bytes memory data\r\n  ) {\r\n    bytes32 firstWord;\r\n    assembly{\r\n      firstWord := mload(add(data, 0x20))\r\n    }\r\n    require(requestId == firstWord, \"First word must be requestId\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if amount requested is greater than withdrawable balance\r\n   * @param amount The given amount to compare to `s_withdrawableTokens`\r\n   */\r\n  modifier validateAvailableFunds(\r\n    uint256 amount\r\n  ) {\r\n    require(_fundsAvailable() >= amount, \"Amount requested is greater than withdrawable balance\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if request ID does not exist\r\n   * @param requestId The given request ID to check in stored `commitments`\r\n   */\r\n  modifier validateRequestId(\r\n    bytes32 requestId\r\n  ) {\r\n    require(s_commitments[requestId].paramsHash != 0, \"Must have a valid requestId\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the callback address is the LINK token\r\n   * @param to The callback address\r\n   */\r\n  modifier validateNotToLINK(\r\n    address to\r\n  ) {\r\n    require(to != address(linkToken), \"Cannot call to LINK\");\r\n    _;\r\n  }\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/AuthorizedReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./interfaces/AuthorizedReceiverInterface.sol\";\r\n\r\nabstract contract AuthorizedReceiver is\r\n  AuthorizedReceiverInterface\r\n{\r\n\r\n  mapping(address => bool) private s_authorizedSenders;\r\n  address[] private s_authorizedSenderList;\r\n\r\n  event AuthorizedSendersChanged(\r\n    address[] senders,\r\n    address changedBy\r\n  );\r\n\r\n  /**\r\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\r\n   * @param senders The addresses of the authorized Chainlink node\r\n   */\r\n  function setAuthorizedSenders(\r\n    address[] calldata senders\r\n  )\r\n    external\r\n    override\r\n    validateAuthorizedSenderSetter()\r\n  {\r\n    require(senders.length > 0, \"Must have at least 1 authorized sender\");\r\n    // Set previous authorized senders to false\r\n    uint256 authorizedSendersLength = s_authorizedSenderList.length;\r\n    for (uint256 i = 0; i < authorizedSendersLength; i++) {\r\n      s_authorizedSenders[s_authorizedSenderList[i]] = false;\r\n    }\r\n    // Set new to true\r\n    for (uint256 i = 0; i < senders.length; i++) {\r\n      s_authorizedSenders[senders[i]] = true;\r\n    }\r\n    // Replace list\r\n    s_authorizedSenderList = senders;\r\n    emit AuthorizedSendersChanged(senders, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieve a list of authorized senders\r\n   * @return array of addresses\r\n   */\r\n  function getAuthorizedSenders()\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      address[] memory\r\n    )\r\n  {\r\n    return s_authorizedSenderList;\r\n  }\r\n\r\n  /**\r\n   * @notice Use this to check if a node is authorized for fulfilling requests\r\n   * @param sender The address of the Chainlink node\r\n   * @return The authorization status of the node\r\n   */\r\n  function isAuthorizedSender(\r\n    address sender\r\n  )\r\n    public\r\n    view\r\n    override\r\n    returns (bool)\r\n  {\r\n    return s_authorizedSenders[sender];\r\n  }\r\n\r\n  /**\r\n   * @notice customizable guard of who can update the authorized sender list\r\n   * @return bool whether sender can update authorized sender list\r\n   */\r\n  function _canSetAuthorizedSenders()\r\n    internal\r\n    virtual\r\n    returns (bool);\r\n\r\n  /**\r\n   * @notice validates the sender is an authorized sender\r\n   */\r\n  function _validateIsAuthorizedSender()\r\n    internal\r\n    view\r\n  {\r\n    require(isAuthorizedSender(msg.sender), \"Not authorized sender\");\r\n  }\r\n\r\n  /**\r\n   * @notice prevents non-authorized addresses from calling this method\r\n   */\r\n  modifier validateAuthorizedSender()\r\n  {\r\n    _validateIsAuthorizedSender();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice prevents non-authorized addresses from calling this method\r\n   */\r\n  modifier validateAuthorizedSenderSetter()\r\n  {\r\n    require(_canSetAuthorizedSenders(), \"Cannot set authorized senders\");\r\n    _;\r\n  }\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/LinkTokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nabstract contract LinkTokenReceiver {\r\n\r\n  /**\r\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\r\n   * @dev The data payload's first 2 words will be overwritten by the `sender` and `amount`\r\n   * values to ensure correctness. Calls oracleRequest.\r\n   * @param sender Address of the sender\r\n   * @param amount Amount of LINK sent (specified in wei)\r\n   * @param data Payload of the transaction\r\n   */\r\n  function onTokenTransfer(\r\n    address sender,\r\n    uint256 amount,\r\n    bytes memory data\r\n  )\r\n    public\r\n    validateFromLINK()\r\n    permittedFunctionsForLINK(data)\r\n  {\r\n    assembly {\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      mstore(add(data, 36), sender) // ensure correct sender is passed\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      mstore(add(data, 68), amount)    // ensure correct amount is passed\r\n    }\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, ) = address(this).delegatecall(data); // calls oracleRequest\r\n    require(success, \"Unable to create request\");\r\n  }\r\n\r\n  function getChainlinkToken()\r\n    public\r\n    view\r\n    virtual\r\n    returns (\r\n      address\r\n    );\r\n\r\n  /**\r\n   * @notice Validate the function called on token transfer\r\n   */\r\n  function _validateTokenTransferAction(\r\n    bytes4 funcSelector,\r\n    bytes memory data\r\n  )\r\n    internal\r\n    virtual;\r\n\r\n  /**\r\n   * @dev Reverts if not sent from the LINK token\r\n   */\r\n  modifier validateFromLINK() {\r\n    require(msg.sender == getChainlinkToken(), \"Must use LINK token\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\r\n   * @param data The data payload of the request\r\n   */\r\n  modifier permittedFunctionsForLINK(\r\n    bytes memory data\r\n  ) {\r\n    bytes4 funcSelector;\r\n    assembly {\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      funcSelector := mload(add(data, 32))\r\n    }\r\n    _validateTokenTransferAction(funcSelector, data);\r\n    _;\r\n  }\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./ConfirmedOwnerWithProposal.sol\";\r\n\r\n/**\r\n * @title The ConfirmedOwner contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\r\n\r\n  constructor(\r\n    address newOwner\r\n  )\r\n    ConfirmedOwnerWithProposal(\r\n      newOwner,\r\n      address(0)\r\n    )\r\n  {\r\n  }\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/OwnableInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface OwnableInterface {\r\n  function owner()\r\n    external\r\n    returns (\r\n      address\r\n    );\r\n\r\n  function transferOwnership(\r\n    address recipient\r\n  )\r\n    external;\r\n\r\n  function acceptOwnership()\r\n    external;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/WithdrawalInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface WithdrawalInterface {\r\n  /**\r\n   * @notice transfer LINK held by the contract belonging to msg.sender to\r\n   * another address\r\n   * @param recipient is the address to send the LINK to\r\n   * @param amount is the amount of LINK to send\r\n   */\r\n  function withdraw(\r\n    address recipient,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  /**\r\n   * @notice query the available amount of LINK to withdraw by msg.sender\r\n   */\r\n  function withdrawable()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/vendor/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts v3.4.0(fa64a1ced0b70ab89073d5d0b6e01b0778f7e7d6)\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/vendor/SafeMathChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathChainlink {\r\n  /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n  function add(\r\n    uint256 a,\r\n    uint256 b\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n  function mul(\r\n    uint256 a,\r\n    uint256 b\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/interfaces/AuthorizedReceiverInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface AuthorizedReceiverInterface {\r\n\r\n  function isAuthorizedSender(\r\n    address sender\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  function getAuthorizedSenders()\r\n    external\r\n    returns (\r\n      address[] memory\r\n    );\r\n\r\n  function setAuthorizedSenders(\r\n    address[] calldata senders\r\n  )\r\n    external;\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./interfaces/OwnableInterface.sol\";\r\n\r\n/**\r\n * @title The ConfirmedOwner contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\r\n\r\n  address private s_owner;\r\n  address private s_pendingOwner;\r\n\r\n  event OwnershipTransferRequested(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event OwnershipTransferred(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  constructor(\r\n    address newOwner,\r\n    address pendingOwner\r\n  ) {\r\n    require(newOwner != address(0), \"Cannot set owner to zero\");\r\n\r\n    s_owner = newOwner;\r\n    if (pendingOwner != address(0)) {\r\n      _transferOwnership(pendingOwner);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(\r\n    address to\r\n  )\r\n    public\r\n    override\r\n    onlyOwner()\r\n  {\r\n    _transferOwnership(to);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership()\r\n    external\r\n    override\r\n  {\r\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = s_owner;\r\n    s_owner = msg.sender;\r\n    s_pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the current owner\r\n   */\r\n  function owner()\r\n    public\r\n    view\r\n    override\r\n    returns (\r\n      address\r\n    )\r\n  {\r\n    return s_owner;\r\n  }\r\n\r\n  /**\r\n   * @notice validate, transfer ownership, and emit relevant events\r\n   */\r\n  function _transferOwnership(\r\n    address to\r\n  )\r\n    private\r\n  {\r\n    require(to != msg.sender, \"Cannot transfer to self\");\r\n\r\n    s_pendingOwner = to;\r\n\r\n    emit OwnershipTransferRequested(s_owner, to);\r\n  }\r\n\r\n  /**\r\n   * @notice validate access\r\n   */\r\n  function _validateOwnership()\r\n    internal\r\n    view\r\n  {\r\n    require(msg.sender == s_owner, \"Only callable by owner\");\r\n  }\r\n\r\n  /**\r\n   * @notice Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    _validateOwnership();\r\n    _;\r\n  }\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/OperatorFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./Operator.sol\";\r\nimport \"./AuthorizedForwarder.sol\";\r\n\r\n/**\r\n * @title Operator Factory\r\n * @notice Creates Operator contracts for node operators\r\n */\r\ncontract OperatorFactory {\r\n\r\n  address public immutable getChainlinkToken;\r\n  mapping(address => bool) private s_created;\r\n\r\n  event OperatorCreated(\r\n    address indexed operator,\r\n    address indexed owner,\r\n    address indexed sender\r\n  );\r\n  event AuthorizedForwarderCreated(\r\n    address indexed forwarder,\r\n    address indexed owner,\r\n    address indexed sender\r\n  );\r\n\r\n  /**\r\n   * @param linkAddress address\r\n   */\r\n  constructor(\r\n    address linkAddress\r\n  ) {\r\n    getChainlinkToken = linkAddress;\r\n  }\r\n\r\n  /**\r\n   * @notice creates a new Operator contract with the msg.sender as owner\r\n   */\r\n  function deployNewOperator()\r\n    external\r\n    returns (\r\n      address\r\n    )\r\n  {\r\n    Operator operator = new Operator(\r\n      getChainlinkToken,\r\n      msg.sender\r\n    );\r\n\r\n    s_created[address(operator)] = true;\r\n    emit OperatorCreated(\r\n      address(operator),\r\n      msg.sender,\r\n      msg.sender\r\n    );\r\n\r\n    return address(operator);\r\n  }\r\n\r\n  /**\r\n   * @notice creates a new Operator contract with the msg.sender as owner and a\r\n   * new Operator Forwarder with the Operator as the owner\r\n   */\r\n  function deployNewOperatorAndForwarder()\r\n    external\r\n    returns (\r\n      address,\r\n      address\r\n    )\r\n  {\r\n    Operator operator = new Operator(\r\n      getChainlinkToken,\r\n      msg.sender\r\n    );\r\n    s_created[address(operator)] = true;\r\n    emit OperatorCreated(\r\n      address(operator),\r\n      msg.sender,\r\n      msg.sender\r\n    );\r\n\r\n    bytes memory tmp = new bytes(0);\r\n    AuthorizedForwarder forwarder = new AuthorizedForwarder(\r\n      getChainlinkToken,\r\n      address(operator),\r\n      address(0),\r\n      tmp\r\n    );\r\n    s_created[address(forwarder)] = true;\r\n    emit AuthorizedForwarderCreated(\r\n      address(forwarder),\r\n      address(operator),\r\n      msg.sender\r\n    );\r\n\r\n    return (address(operator), address(forwarder));\r\n  }\r\n\r\n  /**\r\n   * @notice creates a new Forwarder contract with the msg.sender as owner\r\n   */\r\n  function deployNewForwarder()\r\n    external\r\n    returns (\r\n      address\r\n    )\r\n  {\r\n    bytes memory tmp = new bytes(0);\r\n    AuthorizedForwarder forwarder = new AuthorizedForwarder(\r\n      getChainlinkToken,\r\n      msg.sender,\r\n      address(0),\r\n      tmp\r\n    );\r\n\r\n    s_created[address(forwarder)] = true;\r\n    emit AuthorizedForwarderCreated(\r\n      address(forwarder),\r\n      msg.sender,\r\n      msg.sender\r\n    );\r\n\r\n    return address(forwarder);\r\n  }\r\n\r\n  /**\r\n   * @notice creates a new Forwarder contract with the msg.sender as owner\r\n   */\r\n  function deployNewForwarderAndTransferOwnership(\r\n    address to,\r\n    bytes calldata message\r\n  )\r\n    external\r\n    returns (\r\n      address\r\n    )\r\n  {\r\n    AuthorizedForwarder forwarder = new AuthorizedForwarder(\r\n      getChainlinkToken,\r\n      msg.sender,\r\n      to,\r\n      message\r\n    );\r\n\r\n    s_created[address(forwarder)] = true;\r\n    emit AuthorizedForwarderCreated(\r\n      address(forwarder),\r\n      msg.sender,\r\n      msg.sender\r\n    );\r\n\r\n    return address(forwarder);\r\n  }\r\n\r\n  /**\r\n   * @notice indicates whether this factory deployed an address\r\n   */\r\n  function created(\r\n    address query\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return s_created[query];\r\n  }\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/AuthorizedForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./interfaces/OperatorInterface.sol\";\r\nimport \"./ConfirmedOwnerWithProposal.sol\";\r\nimport \"./AuthorizedReceiver.sol\";\r\nimport \"./vendor/Address.sol\";\r\n\r\ncontract AuthorizedForwarder is\r\n  ConfirmedOwnerWithProposal,\r\n  AuthorizedReceiver\r\n{\r\n  using Address for address;\r\n\r\n  address public immutable getChainlinkToken;\r\n\r\n  event OwnershipTransferRequestedWithMessage(\r\n    address indexed from,\r\n    address indexed to,\r\n    bytes message\r\n  );\r\n\r\n  constructor(\r\n    address link,\r\n    address owner,\r\n    address recipient,\r\n    bytes memory message\r\n  )\r\n    ConfirmedOwnerWithProposal(owner, recipient)\r\n  {\r\n    getChainlinkToken = link;\r\n    if (recipient != address(0)) {\r\n      emit OwnershipTransferRequestedWithMessage(owner, recipient, message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Forward a call to another contract\r\n   * @dev Only callable by an authorized sender\r\n   * @param to address\r\n   * @param data to forward\r\n   */\r\n  function forward(\r\n    address to,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    validateAuthorizedSender()\r\n  {\r\n    require(to != getChainlinkToken, \"Cannot #forward to Link token\");\r\n    _forward(to, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Forward a call to another contract\r\n   * @dev Only callable by the owner\r\n   * @param to address\r\n   * @param data to forward\r\n   */\r\n  function ownerForward(\r\n    address to,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    onlyOwner()\r\n  {\r\n    _forward(to, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer ownership with instructions for recipient\r\n   * @param to address proposed recipeint of ownership\r\n   * @param message instructions for recipient upon accepting ownership\r\n   */\r\n  function transferOwnershipWithMessage(\r\n    address to,\r\n    bytes memory message\r\n  )\r\n    public\r\n  {\r\n    transferOwnership(to);\r\n    emit OwnershipTransferRequestedWithMessage(msg.sender, to, message);\r\n  }\r\n\r\n  /**\r\n   * @notice concrete implementation of AuthorizedReceiver\r\n   * @return bool of whether sender is authorized\r\n   */\r\n  function _canSetAuthorizedSenders()\r\n    internal\r\n    view\r\n    override\r\n    returns (bool)\r\n  {\r\n    return owner() == msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @notice common forwarding functionality and validation\r\n   */\r\n  function _forward(\r\n    address to,\r\n    bytes calldata data\r\n  )\r\n    private\r\n  {\r\n    require(to.isContract(), \"Must forward to a contract\");\r\n    (bool status,) = to.call(data);\r\n    require(status, \"Forwarded call failed\");\r\n  }\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"./vendor/SafeMathChainlink.sol\";\r\n\r\nimport \"./interfaces/LinkTokenInterface.sol\";\r\n\r\nimport \"./VRFRequestIDBase.sol\";\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  using SafeMathChainlink for uint256;\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomness the VRF output\r\n   */\r\n  function fulfillRandomness(\r\n    bytes32 requestId,\r\n    uint256 randomness\r\n  )\r\n    internal\r\n    virtual;\r\n\r\n  /**\r\n   * @dev In order to keep backwards compatibility we have kept the user\r\n   * seed field around. We remove the use of it because given that the blockhash\r\n   * enters later, it overrides whatever randomness the used seed provides.\r\n   * Given that it adds no security, and can easily lead to misunderstandings,\r\n   * we have removed it from usage and can now provide a simpler API.\r\n   */\r\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\r\n\r\n  /**\r\n   * @notice requestRandomness initiates a request for VRF output given _seed\r\n   *\r\n   * @dev The fulfillRandomness method receives the output, once it's provided\r\n   * @dev by the Oracle, and verified by the vrfCoordinator.\r\n   *\r\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n   * @dev the _fee must exceed the fee specified during registration of the\r\n   * @dev _keyHash.\r\n   *\r\n   * @dev The _seed parameter is vestigial, and is kept only for API\r\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n   * @dev your own randomness, here, but it's not necessary because the VRF\r\n   * @dev oracle will mix the hash of the block containing your request into the\r\n   * @dev VRF seed it ultimately uses.\r\n   *\r\n   * @param _keyHash ID of public key against which randomness is generated\r\n   * @param _fee The amount of LINK to send with the request\r\n   *\r\n   * @return requestId unique ID for this request\r\n   *\r\n   * @dev The returned requestId can be used to distinguish responses to\r\n   * @dev concurrent requests. It is passed as the first argument to\r\n   * @dev fulfillRandomness.\r\n   */\r\n  function requestRandomness(\r\n    bytes32 _keyHash,\r\n    uint256 _fee\r\n  )\r\n    internal\r\n    returns (\r\n      bytes32 requestId\r\n    )\r\n  {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash].add(1);\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface immutable internal LINK;\r\n  address immutable private vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  constructor(\r\n    address _vrfCoordinator,\r\n    address _link\r\n  ) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(\r\n    bytes32 requestId,\r\n    uint256 randomness\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\n"
    },
    "src/ivo/commons/solidity-utils/chainlink/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(\r\n    bytes32 _keyHash,\r\n    uint256 _userSeed,\r\n    address _requester,\r\n    uint256 _nonce\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      uint256\r\n    )\r\n  {\r\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(\r\n    bytes32 _keyHash,\r\n    uint256 _vRFInputSeed\r\n  )\r\n    internal\r\n    pure\r\n    returns (\r\n      bytes32\r\n    )\r\n  {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n"
    },
    "src/ivo/vouchers/voucher-core/VoucherCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"../../commons/solidity-utils/access/AdminControl.sol\";\r\nimport \"../../commons/solidity-utils/misc/Constants.sol\";\r\nimport \"../vnft-core/VNFTCoreV2.sol\";\r\n\r\nabstract contract VoucherCore is VNFTCoreV2, AdminControl {\r\n    /// @dev tokenId => slot\r\n    mapping(uint256 => uint256) public voucherSlotMapping;\r\n\r\n    uint32 public nextTokenId;\r\n\r\n    function _initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 unitDecimals_\r\n    ) internal override {\r\n        AdminControl.__AdminControl_init(_msgSender());\r\n        VNFTCoreV2._initialize(name_, symbol_, unitDecimals_);\r\n        nextTokenId = 1;\r\n    }\r\n\r\n    function _generateTokenId() internal virtual returns (uint256) {\r\n        return nextTokenId++;\r\n    }\r\n\r\n    function split(uint256 tokenId_, uint256[] calldata splitUnits_)\r\n        public\r\n        virtual\r\n        override\r\n        returns (uint256[] memory newTokenIds)\r\n    {\r\n        require(splitUnits_.length > 0, \"empty splitUnits\");\r\n        newTokenIds = new uint256[](splitUnits_.length);\r\n\r\n        for (uint256 i = 0; i < splitUnits_.length; i++) {\r\n            uint256 newTokenId = _generateTokenId();\r\n            newTokenIds[i] = newTokenId;\r\n            VNFTCoreV2._split(tokenId_, newTokenId, splitUnits_[i]);\r\n            voucherSlotMapping[newTokenId] = voucherSlotMapping[tokenId_];\r\n        }\r\n    }\r\n\r\n    function merge(uint256[] calldata tokenIds_, uint256 targetTokenId_)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(tokenIds_.length > 0, \"empty tokenIds\");\r\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\r\n            VNFTCoreV2._merge(tokenIds_[i], targetTokenId_);\r\n            delete voucherSlotMapping[tokenIds_[i]];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer part of units of a Voucher to target address.\r\n     * @param from_ Address of the Voucher sender\r\n     * @param to_ Address of the Voucher recipient\r\n     * @param tokenId_ Id of the Voucher to transfer\r\n     * @param transferUnits_ Amount of units to transfer\r\n     */\r\n    function transferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 transferUnits_\r\n    ) public virtual override returns (uint256 newTokenId) {\r\n        newTokenId = _generateTokenId();\r\n        _transferUnitsFrom(from_, to_, tokenId_, newTokenId, transferUnits_);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer part of units of a Voucher to another Voucher.\r\n     * @param from_ Address of the Voucher sender\r\n     * @param to_ Address of the Voucher recipient\r\n     * @param tokenId_ Id of the Voucher to transfer\r\n     * @param targetTokenId_ Id of the Voucher to receive\r\n     * @param transferUnits_ Amount of units to transfer\r\n     */\r\n    function transferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_\r\n    ) public virtual override {\r\n        require(_exists(targetTokenId_), \"target token not exists\");\r\n        _transferUnitsFrom(\r\n            from_,\r\n            to_,\r\n            tokenId_,\r\n            targetTokenId_,\r\n            transferUnits_\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 transferUnits_,\r\n        bytes memory data_\r\n    ) public virtual override returns (uint256 newTokenId) {\r\n        newTokenId = transferFrom(from_, to_, tokenId_, transferUnits_);\r\n        require(\r\n            _checkOnVNFTReceived(from_, to_, newTokenId, transferUnits_, data_),\r\n            \"to non VNFTReceiver\"\r\n        );\r\n        return newTokenId;\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_,\r\n        bytes memory data_\r\n    ) public virtual override {\r\n        transferFrom(from_, to_, tokenId_, targetTokenId_, transferUnits_);\r\n        require(\r\n            _checkOnVNFTReceived(\r\n                from_,\r\n                to_,\r\n                targetTokenId_,\r\n                transferUnits_,\r\n                data_\r\n            ),\r\n            \"to non VNFTReceiver\"\r\n        );\r\n    }\r\n\r\n    function _transferUnitsFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 tokenId_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_\r\n    ) internal virtual override {\r\n        VNFTCoreV2._transferUnitsFrom(\r\n            from_,\r\n            to_,\r\n            tokenId_,\r\n            targetTokenId_,\r\n            transferUnits_\r\n        );\r\n        voucherSlotMapping[targetTokenId_] = voucherSlotMapping[tokenId_];\r\n    }\r\n\r\n    function _mint(\r\n        address minter_,\r\n        uint256 slot_,\r\n        uint256 units_\r\n    ) internal virtual returns (uint256 tokenId) {\r\n        tokenId = _generateTokenId();\r\n        voucherSlotMapping[tokenId] = slot_;\r\n        VNFTCoreV2._mintUnits(minter_, tokenId, slot_, units_);\r\n    }\r\n\r\n    function burn(uint256 tokenId_) external virtual {\r\n        require(_msgSender() == ownerOf(tokenId_), \"only owner\");\r\n        _burnVoucher(tokenId_);\r\n    }\r\n\r\n    function _burnVoucher(uint256 tokenId_) internal virtual {\r\n        delete voucherSlotMapping[tokenId_];\r\n        VNFTCoreV2._burn(tokenId_);\r\n    }\r\n\r\n    function _slotOf(uint256 tokenId_)\r\n        internal\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return voucherSlotMapping[tokenId_];\r\n    }\r\n\r\n    function owner() external view virtual returns (address) {\r\n        return _admin;\r\n    }\r\n\r\n    function voucherType() external view virtual returns (Constants.VoucherType) {}\r\n\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "src/ivo/vouchers/convertible-voucher/interface/IPriceOracleManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IPriceOracleManager {\r\n    function getPriceOfTokenId(address voucher_, uint256 tokenId_)\r\n        external\r\n        view\r\n        returns (int256 price_);\r\n\r\n    function getPriceOfMaturity(address voucher_, uint64 maturity_)\r\n        external\r\n        view\r\n        returns (int256 price_);\r\n}\r\n"
    },
    "src/ivo/vouchers/vnft-core/interface/optional/IUnderlyingContainer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IUnderlyingContainer {\r\n    function totalUnderlyingAmount() external view returns (uint256);\r\n    function underlying() external view returns (address);\r\n}"
    },
    "src/ivo/vouchers/vnft-core/interface/optional/IVNFTErc20Container.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"./IUnderlyingContainer.sol\";\r\n\r\ninterface IVNFTErc20Container is IUnderlyingContainer {\r\n    function units2UnderlyingAmount(uint256 units)\r\n        external\r\n        view\r\n        returns (uint256 underlyingAmount);\r\n\r\n    function underlyingAmount2Units(uint256 underlyingAmount)\r\n        external\r\n        view\r\n        returns (uint256 units);\r\n}\r\n"
    },
    "src/ivo/vouchers/flexible-date-vesting-voucher/interface/external/IICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IICToken {\r\n\r\n    function mint(\r\n        uint64 term, \r\n        uint256 amount,\r\n        uint64[] calldata maturities, \r\n        uint32[] calldata percentages,\r\n        string memory originalInvestor\r\n    ) \r\n        external \r\n        returns (uint256 slot, uint256 tokenId);\r\n    \r\n    function vestingPool() external view returns (address vestingPoolAddress);\r\n\r\n}"
    },
    "src/ivo/vouchers/flexible-date-vesting-voucher/interface/IVoucherSVG.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVoucherSVG {\r\n\r\n    function generateSVG(address voucher_, uint256 tokenId_) external view returns (string memory);\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}