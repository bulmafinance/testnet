{
  "language": "Solidity",
  "sources": {
    "src/helpers/ERC20TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\nimport \"./EthAddressLib.sol\";\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary ERC20TransferHelper {\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (underlying == EthAddressLib.ethAddress()) {\r\n            // Sanity checks\r\n            require(tx.origin == from || msg.sender == from, \"sender mismatch\");\r\n            require(msg.value == amount, \"value mismatch\");\r\n\r\n            return amount;\r\n        } else {\r\n            require(msg.value == 0, \"don't support msg.value\");\r\n            uint256 balanceBefore = ERC20Interface(underlying).balanceOf(\r\n                address(this)\r\n            );\r\n            (bool success, bytes memory data) = underlying.call(\r\n                abi.encodeWithSelector(\r\n                    ERC20Interface.transferFrom.selector,\r\n                    from,\r\n                    address(this),\r\n                    amount\r\n                )\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"STF\"\r\n            );\r\n\r\n            // Calculate the amount that was *actually* transferred\r\n            uint256 balanceAfter = ERC20Interface(underlying).balanceOf(\r\n                address(this)\r\n            );\r\n            require(\r\n                balanceAfter >= balanceBefore,\r\n                \"TOKEN_TRANSFER_IN_OVERFLOW\"\r\n            );\r\n            return balanceAfter - balanceBefore; // underflow already checked above, just subtract\r\n        }\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address payable to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (underlying == EthAddressLib.ethAddress()) {\r\n            (bool success, ) = to.call{value: amount}(new bytes(0));\r\n            require(success, \"STE\");\r\n        } else {\r\n            (bool success, bytes memory data) = underlying.call(\r\n                abi.encodeWithSelector(\r\n                    ERC20Interface.transfer.selector,\r\n                    to,\r\n                    amount\r\n                )\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"ST\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function getCashPrior(address underlying_) internal view returns (uint256) {\r\n        if (underlying_ == EthAddressLib.ethAddress()) {\r\n            uint256 startingBalance = sub(address(this).balance, msg.value);\r\n            return startingBalance;\r\n        } else {\r\n            ERC20Interface token = ERC20Interface(underlying_);\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n}\r\n"
    },
    "src/helpers/EthAddressLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nlibrary EthAddressLib {\r\n\r\n    /**\r\n    * @dev returns the address used within the protocol to identify ETH\r\n    * @return the address assigned to ETH\r\n     */\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}"
    },
    "src/voucher/VestingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\r\nimport \"../helpers/EthAddressLib.sol\";\r\nimport \"../helpers/ERC20TransferHelper.sol\";\r\nimport \"./interface/IVestingPool.sol\";\r\nimport \"./interface/IVNFTErc20Container.sol\";\r\nimport \"./library/VestingLibrary.sol\";\r\n\r\ninterface IERC20Optional {\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract VestingPool is IVestingPool {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable for uint64;\r\n    using VestingLibrary for VestingLibrary.Vesting;\r\n    using StringsUpgradeable for uint256;\r\n    event NewManager(address oldManager, address newManager);\r\n\r\n    address internal _underlying;\r\n    bool internal _initialized;\r\n\r\n    address public _admin;\r\n    address public pendingAdmin;\r\n    address public manager;\r\n    uint256 internal _totalAmount;\r\n\r\n    // tokenId => Vault\r\n    mapping(uint256 => VestingLibrary.Vesting) public vestingById;\r\n\r\n    // variables added in v2.1\r\n    string internal _baseImageURI;\r\n    string internal _baseExternalURI;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == _admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \"only manager\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address underlying_) public {\r\n        require(_initialized == false, \"already initialized\");\r\n        _admin = msg.sender;\r\n\r\n        if (underlying_ != EthAddressLib.ethAddress()) {\r\n            IERC20(underlying_).totalSupply();\r\n        }\r\n\r\n        _underlying = underlying_;\r\n        _initialized = true;\r\n    }\r\n\r\n    function isVestingPool() external pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function _setManager(address newManager_) public onlyAdmin {\r\n        address oldManager = manager;\r\n        manager = newManager_;\r\n        emit NewManager(oldManager, newManager_);\r\n    }\r\n\r\n    function _setBaseImageURI(string memory uri_) external onlyAdmin {\r\n        _baseImageURI = uri_;\r\n    }\r\n\r\n    function _setBaseExternalURI(string memory uri_) external onlyAdmin {\r\n        _baseExternalURI = uri_;\r\n    }\r\n\r\n    function mint(\r\n        uint8 claimType_,\r\n        address minter_,\r\n        uint256 tokenId_,\r\n        uint64 term_,\r\n        uint256 amount_,\r\n        uint64[] calldata maturities_,\r\n        uint32[] calldata percentages_,\r\n        string memory originalInvestor_\r\n    ) external virtual override onlyManager returns (uint256) {\r\n        return\r\n            _mint(\r\n                claimType_,\r\n                minter_,\r\n                tokenId_,\r\n                term_,\r\n                amount_,\r\n                maturities_,\r\n                percentages_,\r\n                originalInvestor_\r\n            );\r\n    }\r\n\r\n    struct MintLocalVar {\r\n        uint64 term;\r\n        uint256 sumPercentages;\r\n        uint256 mintPrincipal;\r\n        uint256 mintUnits;\r\n    }\r\n\r\n    function _mint(\r\n        uint8 claimType_,\r\n        address minter_,\r\n        uint256 tokenId_,\r\n        uint64 term_,\r\n        uint256 amount_,\r\n        uint64[] memory maturities_,\r\n        uint32[] memory percentages_,\r\n        string memory originalInvestor_\r\n    ) internal virtual returns (uint256) {\r\n        MintLocalVar memory vars;\r\n        require(\r\n            maturities_.length > 0 && maturities_.length == percentages_.length,\r\n            \"invalid maturities/percentages\"\r\n        );\r\n\r\n        if (claimType_ == VestingLibrary.CLAIM_TYPE_MULTI) {\r\n            vars.term = _sub(\r\n                maturities_[maturities_.length - 1],\r\n                maturities_[0]\r\n            );\r\n            require(vars.term == term_, \"term mismatch\");\r\n        }\r\n\r\n        for (uint256 i = 0; i < percentages_.length; i++) {\r\n            vars.sumPercentages = vars.sumPercentages.add(percentages_[i]);\r\n        }\r\n        require(\r\n            vars.sumPercentages == VestingLibrary.FULL_PERCENTAGE,\r\n            \"invalid percentages\"\r\n        );\r\n\r\n        ERC20TransferHelper.doTransferIn(_underlying, minter_, amount_);\r\n        VestingLibrary.Vesting storage vesting = vestingById[tokenId_];\r\n        (, vars.mintPrincipal) = vesting.mint(\r\n            claimType_,\r\n            term_,\r\n            amount_,\r\n            maturities_,\r\n            percentages_,\r\n            originalInvestor_\r\n        );\r\n\r\n        vars.mintUnits = amount2units(vars.mintPrincipal);\r\n\r\n        emit MintVesting(\r\n            claimType_,\r\n            minter_,\r\n            tokenId_,\r\n            term_,\r\n            maturities_,\r\n            percentages_,\r\n            amount_,\r\n            amount_\r\n        );\r\n\r\n        _totalAmount = _totalAmount.add(amount_);\r\n\r\n        return vars.mintUnits;\r\n    }\r\n\r\n    function recharge(\r\n        address recharger_,\r\n        address owner_,\r\n        uint256 tokenId_,\r\n        uint256 amount_\r\n    ) external virtual override onlyManager returns (uint256) {\r\n        ERC20TransferHelper.doTransferIn(_underlying, recharger_, amount_);\r\n        VestingLibrary.Vesting storage vesting = vestingById[tokenId_];\r\n        vesting.recharge(amount_);\r\n\r\n        emit RechargeVesting(recharger_, owner_, tokenId_, amount_, amount_);\r\n\r\n        _totalAmount = _totalAmount.add(amount_);\r\n        uint256 rechargeUnits = amount2units(amount_);\r\n        return rechargeUnits;\r\n    }\r\n\r\n    function claim(\r\n        address payable payee,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external virtual override onlyManager returns (uint256) {\r\n        return _claim(payee, tokenId, amount);\r\n    }\r\n\r\n    function claimableAmount(uint256 tokenId_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        VestingLibrary.Vesting memory vesting = vestingById[tokenId_];\r\n        if (!vesting.isValid) {\r\n            return 0;\r\n        }\r\n\r\n        if (\r\n            vesting.claimType == VestingLibrary.CLAIM_TYPE_LINEAR ||\r\n            vesting.claimType == VestingLibrary.CLAIM_TYPE_SINGLE\r\n        ) {\r\n            if (block.timestamp >= vesting.maturities[0]) {\r\n                // 到期或过期\r\n                return vesting.principal;\r\n            }\r\n            uint256 timeRemained = vesting.maturities[0] - block.timestamp;\r\n            // 尚未开始解锁\r\n            if (timeRemained >= vesting.term) {\r\n                return 0;\r\n            }\r\n\r\n            uint256 lockedAmount = vesting.vestingAmount.mul(timeRemained).div(\r\n                vesting.term\r\n            );\r\n            if (lockedAmount > vesting.principal) {\r\n                return 0;\r\n            }\r\n            return\r\n                vesting.principal.sub(lockedAmount, \"claimable amount error\");\r\n        } else if (vesting.claimType == VestingLibrary.CLAIM_TYPE_MULTI) {\r\n            //尚未开始解锁\r\n            if (block.timestamp < vesting.maturities[0]) {\r\n                return 0;\r\n            }\r\n\r\n            uint256 lockedPercentage;\r\n            for (uint256 i = vesting.maturities.length - 1; i >= 0; i--) {\r\n                if (vesting.maturities[i] <= block.timestamp) {\r\n                    break;\r\n                }\r\n                lockedPercentage = lockedPercentage.add(vesting.percentages[i]);\r\n            }\r\n\r\n            uint256 lockedAmount = vesting\r\n            .vestingAmount\r\n            .mul(lockedPercentage)\r\n            .div(VestingLibrary.FULL_PERCENTAGE, \"locked amount error\");\r\n            //避免先claim后再split，可能会因为精度导致locedAmount比principal多一点\r\n            if (lockedAmount > vesting.principal) {\r\n                return 0;\r\n            }\r\n            return\r\n                vesting.principal.sub(lockedAmount, \"claimable amount error\");\r\n        } else {\r\n            revert(\"unsupported claimType\");\r\n        }\r\n    }\r\n\r\n    function _claim(\r\n        address payable payee_,\r\n        uint256 tokenId_,\r\n        uint256 claimAmount_\r\n    ) internal virtual returns (uint256) {\r\n        require(claimAmount_ > 0, \"cannot claim 0\");\r\n        require(claimAmount_ <= claimableAmount(tokenId_), \"over claim\");\r\n\r\n        VestingLibrary.Vesting storage v = vestingById[tokenId_];\r\n\r\n        require(claimAmount_ <= v.principal, \"insufficient principal\");\r\n\r\n        v.claim(claimAmount_);\r\n\r\n        ERC20TransferHelper.doTransferOut(_underlying, payee_, claimAmount_);\r\n\r\n        _totalAmount = _totalAmount.sub(claimAmount_);\r\n\r\n        emit ClaimVesting(payee_, tokenId_, claimAmount_);\r\n        return amount2units(claimAmount_);\r\n    }\r\n\r\n    function transferVesting(\r\n        address from_,\r\n        uint256 tokenId_,\r\n        address to_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_\r\n    ) public virtual override onlyManager {\r\n        uint256 transferAmount = units2amount(transferUnits_);\r\n        (\r\n            uint256 transferVestingAmount,\r\n            uint256 transferPrincipal\r\n        ) = vestingById[tokenId_].transfer(\r\n            vestingById[targetTokenId_],\r\n            transferAmount\r\n        );\r\n        emit TransferVesting(\r\n            from_,\r\n            tokenId_,\r\n            to_,\r\n            targetTokenId_,\r\n            transferVestingAmount,\r\n            transferPrincipal\r\n        );\r\n    }\r\n\r\n    function splitVesting(\r\n        address owner_,\r\n        uint256 tokenId_,\r\n        uint256 newTokenId_,\r\n        uint256 splitUnits_\r\n    ) public virtual override onlyManager {\r\n        uint256 splitAmount = units2amount(splitUnits_);\r\n        (uint256 splitVestingAmount, uint256 splitPrincipal) = vestingById[\r\n            tokenId_\r\n        ]\r\n        .split(vestingById[newTokenId_], splitAmount);\r\n        emit SplitVesting(\r\n            owner_,\r\n            tokenId_,\r\n            newTokenId_,\r\n            splitVestingAmount,\r\n            splitPrincipal\r\n        );\r\n    }\r\n\r\n    function mergeVesting(\r\n        address owner_,\r\n        uint256 tokenId_,\r\n        uint256 targetTokenId_\r\n    ) public virtual override onlyManager {\r\n        (uint256 mergeVestingAmount, uint256 mergePrincipal) = vestingById[\r\n            tokenId_\r\n        ]\r\n        .merge(vestingById[targetTokenId_]);\r\n        delete vestingById[tokenId_];\r\n        emit MergeVesting(\r\n            owner_,\r\n            tokenId_,\r\n            targetTokenId_,\r\n            mergeVestingAmount,\r\n            mergePrincipal\r\n        );\r\n    }\r\n\r\n    function units2amount(uint256 units_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return units_ * 1;\r\n    }\r\n\r\n    function amount2units(uint256 amount_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return amount_ / 1;\r\n    }\r\n\r\n    function totalAmount() public view override returns (uint256) {\r\n        return _totalAmount;\r\n    }\r\n\r\n    struct VestingSnapShot {\r\n        uint256 vestingAmount_;\r\n        uint256 principal_;\r\n        uint64[] maturities_;\r\n        uint32[] percentages_;\r\n        uint64 term_;\r\n        uint8 claimType_;\r\n        uint256 claimableAmount;\r\n        bool isValid_;\r\n        string originalInvestor_;\r\n    }\r\n\r\n    function getVestingSnapshot(uint256 tokenId_)\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint8,\r\n            uint64,\r\n            uint256,\r\n            uint256,\r\n            uint64[] memory,\r\n            uint32[] memory,\r\n            uint256,\r\n            string memory,\r\n            bool\r\n        )\r\n    {\r\n        VestingSnapShot memory vars;\r\n        vars.vestingAmount_ = vestingById[tokenId_].vestingAmount;\r\n        vars.principal_ = vestingById[tokenId_].principal;\r\n        vars.maturities_ = vestingById[tokenId_].maturities;\r\n        vars.percentages_ = vestingById[tokenId_].percentages;\r\n        vars.term_ = vestingById[tokenId_].term;\r\n        vars.claimType_ = vestingById[tokenId_].claimType;\r\n        vars.claimableAmount = claimableAmount(tokenId_);\r\n        vars.isValid_ = vestingById[tokenId_].isValid;\r\n        vars.originalInvestor_ = vestingById[tokenId_].originalInvestor;\r\n        return (\r\n            vars.claimType_,\r\n            vars.term_,\r\n            vars.vestingAmount_,\r\n            vars.principal_,\r\n            vars.maturities_,\r\n            vars.percentages_,\r\n            vars.claimableAmount,\r\n            vars.originalInvestor_,\r\n            vars.isValid_\r\n        );\r\n    }\r\n\r\n    function underlying() public view override returns (address) {\r\n        return _underlying;\r\n    }\r\n\r\n    function _setPendingAdmin(address newPendingAdmin) public {\r\n        require(msg.sender == _admin, \"only admin\");\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n    }\r\n\r\n    function _acceptAdmin() public {\r\n        require(\r\n            msg.sender == pendingAdmin && msg.sender != address(0),\r\n            \"only pending admin\"\r\n        );\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = _admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        _admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, _admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n\r\n    function _add(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        uint64 c = a + b;\r\n        require(c >= a, \"add-overflow\");\r\n        return c;\r\n    }\r\n\r\n    function _sub(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b <= a, \"sub-overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    struct UnderlyingInfo {\r\n        address underlying;\r\n        string symbol;\r\n        uint8 decimals;\r\n    }\r\n\r\n    function getInfo(uint256 tokenId, address owner, string memory tokenSymbol) \r\n        external \r\n        view \r\n        override \r\n        returns (string memory) \r\n    {\r\n        string memory underlyingSymbol;\r\n        uint8 underlyingDecimals;\r\n        if (_underlying == EthAddressLib.ethAddress()) {\r\n            underlyingSymbol = \"ETH\";\r\n            underlyingDecimals = 18;\r\n        } else {\r\n            underlyingSymbol = IERC20Optional(_underlying).symbol();\r\n            underlyingDecimals = IERC20Optional(_underlying).decimals();\r\n        }\r\n\r\n        UnderlyingInfo memory underlyingInfo = UnderlyingInfo(_underlying, underlyingSymbol, underlyingDecimals);\r\n\r\n        return string(\r\n            abi.encodePacked(\r\n                'data:application/json,',\r\n                abi.encodePacked(\r\n                    '{\"name\":\"', name(tokenId, underlyingSymbol, underlyingDecimals),\r\n                    '\", \"description\":\"', description(tokenId, underlyingSymbol),\r\n                    '\",\"image\": \"', _baseImageURI, tokenSymbol, '/', tokenId.toString(),\r\n                    '.png\",\"external_url\":\"', _baseExternalURI, tokenSymbol, '/', tokenId.toString(),\r\n                    '\", \"properties\": ', properties(tokenId, owner, underlyingInfo),\r\n                    '}'\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function name(uint256 tokenId, string memory underlyingSymbol, uint8 underlyingDecimals) \r\n        internal \r\n        view  \r\n        returns (bytes memory) \r\n    {\r\n        uint8 claimType = vestingById[tokenId].claimType;\r\n        uint256 principal = vestingById[tokenId].principal;\r\n\r\n        bytes memory typeName;\r\n        if (claimType == 0) {\r\n            typeName = 'Linear';\r\n        } else if (claimType == 1) {\r\n            typeName = 'OneTime';\r\n        } else if (claimType == 2) {\r\n            typeName = abi.encodePacked(vestingById[tokenId].maturities.length.toString(), ' Stages');\r\n        } else {\r\n            revert(\"unsupported claimType\");\r\n        }\r\n\r\n        return \r\n            abi.encodePacked(\r\n                underlyingSymbol, ' Allocation Voucher #', tokenId.toString(), ' - ', \r\n                trim(uint2decimal(principal, underlyingDecimals), underlyingDecimals - 2),\r\n                ' - ', typeName\r\n            );\r\n    }\r\n\r\n    function description(uint256 tokenId, string memory underlyingSymbol) \r\n        internal \r\n        pure \r\n        returns (bytes memory) \r\n    {\r\n        return \r\n            abi.encodePacked(\r\n                \"Voucher #\", tokenId.toString(), \" of \", underlyingSymbol, \r\n                \" allocation. Voucher is used to represent the lock-up allocations of a certain project, which is currently being used to trade in the OTC Market. Now, everyone can trade \",\r\n                underlyingSymbol, \"'s allocations on Opensea or Solv Vouchers by trading the Voucher onchain!\"\r\n            );\r\n    }\r\n\r\n    function properties(uint256 tokenId, address owner, UnderlyingInfo memory underlyingInfo) \r\n        internal \r\n        view \r\n        returns (bytes memory) \r\n    {\r\n        bytes memory data = abi.encodePacked(\r\n            '{\"owner\":\"', addressToString(owner),\r\n            '\",\"underlying\":\"', addressToString(underlyingInfo.underlying),\r\n            '\",\"underlyingSymbol\":\"', underlyingInfo.symbol,\r\n            '\",\"vestingAmount\":\"', uint2decimal(vestingById[tokenId].vestingAmount, underlyingInfo.decimals),\r\n            '\",\"principal\":\"', uint2decimal(vestingById[tokenId].principal, underlyingInfo.decimals),\r\n            '\",\"claimType\":\"', uint2claimType(vestingById[tokenId].claimType),\r\n            '\",\"claimableAmount\":\"', uint2decimal(claimableAmount(tokenId), underlyingInfo.decimals),\r\n            '\",\"percentages\":', percentArray2str(vestingById[tokenId].percentages),\r\n            ',\"maturities\":', uintArray2str(vestingById[tokenId].maturities)\r\n        );\r\n\r\n        if (vestingById[tokenId].term > 0) {\r\n            data = abi.encodePacked(data, ',\"term\":\"', second2day(vestingById[tokenId].term), ' days\"');\r\n        }\r\n\r\n        bytes memory originalInvestor = bytes(vestingById[tokenId].originalInvestor);\r\n        if (originalInvestor.length > 0) {\r\n            data = abi.encodePacked(data, ',\"originalInvestor\":\"', originalInvestor, '\"');\r\n        }\r\n\r\n        return abi.encodePacked(data, '}');\r\n    }\r\n\r\n    function uintArray2str(uint64[] storage array) \r\n        private \r\n        view \r\n        returns (bytes memory) \r\n    {\r\n        bytes memory pack = abi.encodePacked('[');\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (i == array.length - 1) {\r\n                pack = abi.encodePacked(pack, uint256(array[i]).toString());\r\n            } else {\r\n                pack = abi.encodePacked(pack, uint256(array[i]).toString(), ',');\r\n            }\r\n        }\r\n        return abi.encodePacked(pack, ']');\r\n    }\r\n\r\n    function percentArray2str(uint32[] storage array) \r\n        private \r\n        view \r\n        returns (string memory) \r\n    {\r\n        bytes memory pack = abi.encodePacked('[');\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            bytes memory percent = abi.encodePacked('\"', uint2decimal(array[i], 2), '%\"');\r\n\r\n            if (i == array.length - 1) {\r\n                pack = abi.encodePacked(pack, percent);\r\n            } else {\r\n                pack = abi.encodePacked(pack, percent, ',');\r\n            }\r\n        }\r\n        pack = abi.encodePacked(pack, ']');\r\n        return string(pack);\r\n    }\r\n\r\n    function uint2claimType(uint8 claimType) \r\n        private\r\n        pure \r\n        returns (string memory) \r\n    {\r\n        return claimType == 0 ? 'Linear' : claimType == 1 ? 'OneTime' : claimType == 2 ? 'Staged' : 'unknown';\r\n    }\r\n\r\n    function uint2decimal(uint256 number, uint8 decimals) \r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        uint256 base = 10 ** decimals;\r\n        string memory round = number.div(base).toString();\r\n        string memory fraction = number.mod(base).toString();\r\n        uint256 fractionLength = bytes(fraction).length;\r\n\r\n        bytes memory fullStr = abi.encodePacked(round, '.');\r\n        if (fractionLength < decimals) {\r\n            for (uint8 i = 0; i < decimals - fractionLength; i++) {\r\n                fullStr = abi.encodePacked(fullStr, '0');\r\n            }\r\n        }\r\n\r\n        return abi.encodePacked(fullStr, fraction);\r\n    }\r\n\r\n    function second2day(uint256 second)\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        return uint2decimal(second.div(864), 2);\r\n    }\r\n\r\n    function trim(bytes memory oriString, uint256 cutLength) \r\n        private \r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory newString = new bytes(oriString.length - cutLength);\r\n        uint256 index = newString.length;\r\n        while (index-- > 0) {\r\n            newString[index] = oriString[index];\r\n        }\r\n        return newString;\r\n    }\r\n\r\n    function addressToString(address _addr) \r\n        private \r\n        pure \r\n        returns (string memory) \r\n    {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\r\n            str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "src/voucher/interface/IVestingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVestingPool {\r\n   event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n    event MintVesting(\r\n        uint8 indexed claimType,\r\n        address indexed minter,\r\n        uint256 indexed tokenId,\r\n        uint64 term,\r\n        uint64[] maturities,\r\n        uint32[] percentages,\r\n        uint256 vestingAmount,\r\n        uint256 principal\r\n    );\r\n    event ClaimVesting(\r\n        address indexed payee,\r\n        uint256 indexed tokenId,\r\n        uint256 claimAmount\r\n    );\r\n    event RechargeVesting(\r\n        address indexed recharger,\r\n        address indexed owner,\r\n        uint256 indexed tokenId,\r\n        uint256 rechargeVestingAmount,\r\n        uint256 rechargePrincipal\r\n    );\r\n    event TransferVesting(\r\n        address indexed from,\r\n        uint256 indexed tokenId,\r\n        address indexed to,\r\n        uint256 targetTokenId,\r\n        uint256 transferVestingAmount,\r\n        uint256 transferPrincipal\r\n    );\r\n    event SplitVesting(\r\n        address indexed owner,\r\n        uint256 indexed tokenId,\r\n        uint256 newTokenId,\r\n        uint256 splitVestingAmount,\r\n        uint256 splitPricipal\r\n    );\r\n    event MergeVesting(\r\n        address indexed owner,\r\n        uint256 indexed tokenId,\r\n        uint256 indexed targetTokenId,\r\n        uint256 mergeVestingAmount,\r\n        uint256 mergePrincipal\r\n    );\r\n\r\n    function isVestingPool() external pure returns (bool);\r\n\r\n    function mint(\r\n        uint8 claimType_,\r\n        address minter_,\r\n        uint256 tokenId_,\r\n        uint64 term_,\r\n        uint256 amount_,\r\n        uint64[] calldata maturities_,\r\n        uint32[] calldata percentages_,\r\n        string memory originalInvestor_\r\n    ) external returns (uint256 mintUnits);\r\n\r\n    function claim(address payable payee, uint256 tokenId,\r\n        uint256 amount) external returns(uint256 claimUnit);\r\n\r\n    function claimableAmount(uint256 tokenId_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function recharge(address recharger_, address owner_, uint256 tokenId_, uint256 amount_) \r\n        external \r\n        returns (uint256);\r\n\r\n    function transferVesting(\r\n        address from_,\r\n        uint256 tokenId_,\r\n        address to_,\r\n        uint256 targetTokenId_,\r\n        uint256 transferUnits_\r\n    ) external;\r\n\r\n    function splitVesting(address owner_, uint256 tokenId_, uint256 newTokenId_,\r\n        uint256 splitUnits_) external;\r\n\r\n    function mergeVesting(address owner_, uint256 tokenId_,\r\n        uint256 targetTokenId_) external;\r\n\r\n    function units2amount(uint256 units_) external view returns (uint256);\r\n    function amount2units(uint256 units_) external view returns (uint256);\r\n    function totalAmount() external view returns(uint256);\r\n\r\n    function getVestingSnapshot(uint256 tokenId_)\r\n    external\r\n    view\r\n    returns (\r\n        uint8 claimType_,\r\n        uint64 term_,\r\n        uint256 vestingAmount_,\r\n        uint256 principal_,\r\n        uint64[] memory maturities_,\r\n        uint32[] memory percentages_,\r\n        uint256 availableWithdrawAmount_,\r\n        string memory originalInvestor_,\r\n        bool isValid_\r\n    );\r\n\r\n    function getInfo(uint256 tokenId, address owner, string memory tokenSymbol) external view returns (string memory);\r\n\r\n    function underlying() external view returns (address) ;\r\n}\r\n"
    },
    "src/voucher/interface/IVNFTErc20Container.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"../../vnft-core/interface/IVNFT.sol\";\r\nimport \"./IUnderlyingContainer.sol\";\r\n\r\ninterface IVNFTErc20Container is IVNFT, IUnderlyingContainer {\r\n    function getUnderlyingAmount(uint256 units) external view returns (uint256 underlyingAmount);\r\n    function getUnits(uint256 underlyingAmount) external view returns (uint256 units);\r\n}"
    },
    "src/voucher/library/VestingLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\nlibrary VestingLibrary {\r\n    using SafeMath for uint256;\r\n\r\n    uint32 constant internal FULL_PERCENTAGE = 10000;  // 释放比例基数，精确到小数点后两位\r\n    uint8 constant internal CLAIM_TYPE_LINEAR = 0;\r\n    uint8 constant internal CLAIM_TYPE_SINGLE = 1;\r\n    uint8 constant internal CLAIM_TYPE_MULTI = 2;\r\n\r\n    struct Vesting {\r\n        uint8 claimType; //0: 线性释放, 1: 单点释放, 2: 多点释放\r\n        uint64 term; // 0 : Non-fixed term , 1 - N : fixed term in seconds\r\n        uint64[] maturities; //到期时间（秒）\r\n        uint32[] percentages;  //到期释放比例\r\n        bool isValid; //是否有效\r\n        uint256 vestingAmount;\r\n        uint256 principal;\r\n        string originalInvestor;\r\n    }\r\n\r\n    function mint(\r\n        Vesting storage self,\r\n        uint8 claimType,\r\n        uint64 term,\r\n        uint256 amount,\r\n        uint64[] memory maturities,\r\n        uint32[] memory percentages,\r\n        string memory originalInvestor\r\n    ) internal returns (uint256, uint256) {\r\n        require(! self.isValid, \"vesting already exists\");\r\n        self.term = term;\r\n        self.maturities = maturities;\r\n        self.percentages = percentages;\r\n        self.claimType = claimType;\r\n        self.vestingAmount = amount;\r\n        self.principal = amount;\r\n        self.originalInvestor = originalInvestor;\r\n        self.isValid = true;\r\n        return (self.vestingAmount, self.principal);\r\n    }\r\n\r\n    function claim(Vesting storage self, uint256 amount) internal {\r\n        require(self.isValid, \"vesting not exists\");\r\n        self.principal = self.principal.sub(amount, \"insufficient principal\");\r\n    }\r\n\r\n    function recharge(Vesting storage self, uint256 amount) internal returns (uint256, uint256) {\r\n        require(self.isValid, \"vesting not exists\");\r\n        self.principal = self.principal.add(amount);\r\n        self.vestingAmount = self.vestingAmount.add(amount);\r\n        return (self.vestingAmount, self.principal);\r\n    }\r\n\r\n    function merge(Vesting storage self, Vesting storage target) internal returns (uint256 mergeVestingAmount, uint256 mergePrincipal) {\r\n        require(self.isValid && target.isValid, \"vesting not exists\");\r\n        mergeVestingAmount = self.vestingAmount;\r\n        mergePrincipal = self.principal;\r\n        require(mergePrincipal <= mergeVestingAmount, \"balance error\");\r\n        self.vestingAmount = 0;\r\n        self.principal = 0;\r\n        target.vestingAmount = target.vestingAmount.add(mergeVestingAmount);\r\n        target.principal = target.principal.add(mergePrincipal);\r\n        self.isValid = false;\r\n        return (mergeVestingAmount, mergePrincipal);\r\n    }\r\n\r\n    function split(Vesting storage source, Vesting storage create, uint256 amount) internal returns (uint256 splitVestingAmount, uint256 splitPrincipal){\r\n        require(source.isValid, \"vesting not exists\");\r\n        require(source.principal <= source.vestingAmount, \"balance error\");\r\n        splitVestingAmount = source.vestingAmount.mul(amount).div(source.principal);\r\n        source.vestingAmount = source.vestingAmount.sub(splitVestingAmount, \"split excess vestingAmount\");\r\n        source.principal = source.principal.sub(amount, \"split excess principal\");\r\n        mint(create, source.claimType, source.term, 0, source.maturities, source.percentages, source.originalInvestor);\r\n        create.vestingAmount = splitVestingAmount;\r\n        create.principal = amount;\r\n        return (splitVestingAmount, amount);\r\n    }\r\n\r\n    function transfer(Vesting storage source, Vesting storage target, uint256 amount ) internal returns (uint256 transferVestingAmount, uint256 transferPrincipal){\r\n        require(source.isValid, \"vesting not exists\");\r\n        transferPrincipal = amount;\r\n        transferVestingAmount = source.vestingAmount.mul(transferPrincipal).div(source.principal);\r\n        source.principal = source.principal.sub(transferPrincipal, \"transfer excess principal\");\r\n        source.vestingAmount = source.vestingAmount.sub(transferVestingAmount, \"transfer excess vestingAmount\");\r\n        if (! target.isValid) {\r\n            mint(target, source.claimType, source.term, 0, source.maturities, source.percentages, \"\");\r\n        }\r\n        target.vestingAmount = target.vestingAmount.add(transferVestingAmount);\r\n        target.principal = target.principal.add(transferPrincipal);\r\n        return (transferVestingAmount, transferPrincipal);\r\n    }\r\n}"
    },
    "src/vnft-core/interface/IVNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVNFT /* is IERC721 */{\r\n    event PartialTransfer(address indexed from, address indexed to, uint256 indexed tokenId, uint256 targetTokenId,\r\n        uint256 transferUnits);\r\n    event Split(address indexed owner, uint256 indexed tokenId, uint256 newTokenId, uint256 splitUnits);\r\n    event Merge(address indexed owner, uint256 indexed tokenId, uint256 indexed targetTokenId, uint256 mergeUnits);\r\n    event ApprovalUnits(address indexed owner, address indexed approved, uint256 indexed tokenId, uint256 approvalUnits);\r\n\r\n    function slotOf(uint256 tokenId)  external view returns(uint256 slot);\r\n\r\n    function balanceOfSlot(uint256 slot) external view returns (uint256 balance);\r\n    function tokenOfSlotByIndex(uint256 slot, uint256 index) external view returns (uint256 tokenId);\r\n    function unitsInToken(uint256 tokenId) external view returns (uint256 units);\r\n\r\n    function approve(address to, uint256 tokenId, uint256 units) external;\r\n    function allowance(uint256 tokenId, address spender) external view returns (uint256 allowed);\r\n\r\n    function split(uint256 tokenId, uint256[] calldata units) external returns (uint256[] memory newTokenIds);\r\n    function merge(uint256[] calldata tokenIds, uint256 targetTokenId) external;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units) external returns (uint256 newTokenId);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (uint256 newTokenId);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units) external;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units, bytes calldata data) external;\r\n}\r\n\r\ninterface IVNFTReceiver {\r\n    function onVNFTReceived(address operator, address from, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (bytes4);\r\n}"
    },
    "src/voucher/interface/IUnderlyingContainer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IUnderlyingContainer {\r\n    function totalUnderlyingAmount() external view returns (uint256);\r\n    function underlying() external view returns (address);\r\n}"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "src/vnft-core/library/AssetLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n//@title 资产相关结构及逻辑库\r\nlibrary AssetLibrary {\r\n    using SafeMath for uint256;\r\n\r\n    struct Asset {\r\n        uint256 slot; //标识资产的分类\r\n        uint256 units; //资产份数\r\n        bool isValid; //是否有效\r\n    }\r\n\r\n    //@notice 增加Vault的份额\r\n    //@dev\r\n    //@param self 需要增加份额的Vault的引用\r\n    //@param slot\r\n    function mint(Asset storage self, uint256 slot, uint256 units) internal {\r\n        if (! self.isValid) {\r\n            self.slot = slot;\r\n            self.isValid = true;\r\n        } else {\r\n            require(self.slot == slot, \"slot mismatch\");\r\n        }\r\n        self.units = self.units.add(units);\r\n    }\r\n\r\n    function merge(Asset storage self, Asset storage target) internal returns (uint256){\r\n        require(self.isValid && target.isValid, \"asset not exists\");\r\n        require(self.slot == target.slot, \"slot mismatch\");\r\n\r\n        uint256 mergeUnits = self.units;\r\n        self.units = self.units.sub(mergeUnits, \"merge excess units\");\r\n        target.units = target.units.add(mergeUnits);\r\n        self.isValid = false;\r\n\r\n        return (mergeUnits);\r\n    }\r\n\r\n    function transfer(Asset storage self, Asset storage target, uint256 units) internal {\r\n        require(self.isValid, \"asset not exists\");\r\n        self.units = self.units.sub(units, \"transfer excess units\");\r\n        if (target.isValid) {\r\n            require(self.slot == target.slot, \"slot mismatch\");\r\n        } else {\r\n            target.slot = self.slot;\r\n            target.isValid = true;\r\n        }\r\n\r\n        target.units = target.units.add(units);\r\n    }\r\n\r\n    function burn(Asset storage self, uint256 units) internal {\r\n        self.units = self.units.sub(units, \"burn excess units\");\r\n\r\n    }\r\n}"
    },
    "src/vnft-core/VNFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721BurnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"./interface/IVNFT.sol\";\r\nimport \"./library/AssetLibrary.sol\";\r\n\r\nabstract contract VNFTCore is IVNFT, ERC721Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AssetLibrary for AssetLibrary.Asset;\r\n    using AddressUpgradeable for address;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n\r\n    event Mint(address indexed minter, uint256 indexed tokenId, uint256 indexed slot, uint256 units);\r\n    event Burn(address indexed owner, uint256 indexed tokenId, uint256 units);\r\n\r\n    struct ApproveUnits {\r\n        bool isValid;\r\n        mapping(address => uint256) approvals;\r\n    }\r\n\r\n    bytes4 private constant _VNFT_RECEIVED = 0xb382cdcd;\r\n\r\n    //@dev The mapping of tokenId\r\n    mapping(uint256 => AssetLibrary.Asset) public assets;\r\n\r\n    //owner => tokenId => operator => units\r\n    mapping (address => mapping(uint256 => ApproveUnits)) private _tokenApprovalUnits;\r\n\r\n    //slot => tokenIds\r\n    mapping (uint256 => EnumerableSetUpgradeable.UintSet) private _slotTokens;\r\n\r\n    string private _contractURI;\r\n\r\n    function _initialize(string memory name_, string memory symbol_, string memory baseURI_,\r\n        string memory contractURI_)  internal {\r\n        ERC721Upgradeable.__ERC721_init(name_, symbol_);\r\n        ERC721Upgradeable._setBaseURI(baseURI_);\r\n        _contractURI = contractURI_;\r\n    }\r\n\r\n    function _setContractURI(string memory uri_) internal {\r\n        _contractURI = uri_;\r\n    }\r\n\r\n    function contractURI() public view returns (string memory) {\r\n        return _contractURI;\r\n    }\r\n\r\n    function _safeTransferUnitsFrom(address from_, address to_, uint256 tokenId_,\r\n        uint256 targetTokenId_, uint256 transferUnits_, bytes memory data_) internal virtual {\r\n        _transferUnitsFrom(from_, to_, tokenId_, targetTokenId_, transferUnits_);\r\n        require(_checkOnVNFTReceived(from_, to_, targetTokenId_, transferUnits_, data_),\r\n            \"to non VNFTReceiver implementer\");\r\n    }\r\n\r\n    function _transferUnitsFrom(address from_, address to_, uint256 tokenId_,\r\n        uint256 targetTokenId_, uint256 transferUnits_) internal virtual {\r\n        require(from_ == ownerOf(tokenId_), \"source token owner mismatch\");\r\n\r\n        //approve all后可不需要approve units\r\n        if (_msgSender() != from_ && ! isApprovedForAll(from_, _msgSender())) {\r\n            _tokenApprovalUnits[from_][tokenId_].approvals[_msgSender()] =\r\n                _tokenApprovalUnits[from_][tokenId_].approvals[_msgSender()].sub(transferUnits_, \"transfer units exceeds allowance\");\r\n        }\r\n\r\n        require(to_ != address(0), \"transfer to the zero address\");\r\n\r\n        if (! _exists(targetTokenId_)) {\r\n            ERC721Upgradeable._mint(to_, targetTokenId_);\r\n        } else {\r\n            require(ownerOf(targetTokenId_) == to_, \"target token owner mismatch\");\r\n        }\r\n\r\n        assets[tokenId_].transfer(assets[targetTokenId_], transferUnits_);\r\n\r\n        emit PartialTransfer(from_, to_, tokenId_, targetTokenId_, transferUnits_);\r\n    }\r\n\r\n    function _merge(uint256 tokenId_, uint256 targetTokenId_) internal  virtual {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"VNFT: not owner nor approved\");\r\n        require(_exists(targetTokenId_), \"target token not exists\");\r\n        require(tokenId_ != targetTokenId_, \"self merge not allowed\");\r\n\r\n        address owner = ownerOf(tokenId_);\r\n        require(owner == ownerOf(targetTokenId_), \"not same owner\");\r\n\r\n        uint256 mergeUnits = assets[tokenId_].merge(assets[targetTokenId_]);\r\n        _burn(tokenId_);\r\n\r\n        emit Merge(owner, tokenId_, targetTokenId_, mergeUnits);\r\n    }\r\n\r\n    function _splitUnits(uint256 tokenId_, uint256 newTokenId_, uint256 splitUnits_) internal  virtual {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \"VNFT: not owner nor approved\");\r\n        require(! _exists(newTokenId_), \"new token already exists\");\r\n\r\n        assets[tokenId_].units = assets[tokenId_].units.sub(splitUnits_);\r\n\r\n        address owner = ownerOf(tokenId_);\r\n        _mintUnits(owner, newTokenId_, assets[tokenId_].slot, splitUnits_);\r\n\r\n        emit Split(owner, tokenId_, newTokenId_, splitUnits_);\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId, uint256 units) public virtual override {\r\n        _approveUnits(_msgSender(), to, tokenId, units);\r\n    }\r\n\r\n    function _mintUnits(address minter_, uint256 tokenId_, uint256 slot_, uint256 units_) internal virtual {\r\n        if (! _exists(tokenId_)) {\r\n            ERC721Upgradeable._mint(minter_, tokenId_);\r\n        }\r\n\r\n        assets[tokenId_].mint(slot_, units_);\r\n        if (! _slotTokens[slot_].contains(tokenId_)) {\r\n            _slotTokens[slot_].add(tokenId_);\r\n        }\r\n\r\n        emit Mint(minter_, tokenId_, slot_, units_);\r\n    }\r\n\r\n    function _exists(uint256 tokenId_) internal view virtual override returns (bool) {\r\n        return ERC721Upgradeable._exists(tokenId_);\r\n    }\r\n\r\n    function _burn(uint256 tokenId_) internal virtual override {\r\n        uint256 units = assets[tokenId_].units;\r\n        address owner = ownerOf(tokenId_);\r\n        uint256 slot = assets[tokenId_].slot;\r\n        if ( _slotTokens[slot].contains(tokenId_)) {\r\n            _slotTokens[slot].remove(tokenId_);\r\n        }\r\n        delete assets[tokenId_];\r\n        delete _tokenApprovalUnits[owner][tokenId_];\r\n        ERC721Upgradeable._burn(tokenId_);\r\n        emit Burn(owner, tokenId_, units);\r\n    }\r\n\r\n    function _burnUnits(uint256 tokenId_, uint256 burnUnits_) internal virtual returns (uint256 balance) {\r\n        address owner = ownerOf(tokenId_);\r\n        assets[tokenId_].burn(burnUnits_);\r\n        \r\n        emit Burn(owner, tokenId_, burnUnits_);\r\n\r\n        return assets[tokenId_].units;\r\n    }\r\n\r\n    function _approveUnits(address owner, address to, uint256 tokenId, uint256 units) internal virtual {\r\n        require(owner == ownerOf(tokenId), \"VNFT: only owner\");\r\n        _tokenApprovalUnits[owner][tokenId].isValid = true;\r\n        _tokenApprovalUnits[owner][tokenId].approvals[to] = units;\r\n        emit ApprovalUnits(owner, to, tokenId, units);\r\n    }\r\n\r\n    function allowance(uint256 tokenId, address spender) public view virtual override returns (uint256) {\r\n        address owner = ownerOf(tokenId);\r\n        return _tokenApprovalUnits[owner][tokenId].approvals[spender];\r\n    }\r\n\r\n    function unitsInToken(uint256 tokenId_) public view virtual override  returns (uint256) {\r\n        return assets[tokenId_].units;\r\n    }\r\n\r\n   function balanceOfSlot(uint256 slot) public view override returns (uint256) {\r\n       return _slotTokens[slot].length();\r\n   }\r\n    function tokenOfSlotByIndex(uint256 slot, uint256 index) public view override returns (uint256) {\r\n        return _slotTokens[slot].at(index);\r\n    }\r\n\r\n    function slotOf(uint256 tokenId_) override public view returns(uint256) {\r\n        return assets[tokenId_].slot;\r\n    }\r\n\r\n    function isValid(uint256 tokenId_) public view returns (bool) {\r\n        return assets[tokenId_].isValid;\r\n    }\r\n\r\n    function _checkOnVNFTReceived(address from_, address to_, uint256 tokenId_, uint256 units_,\r\n        bytes memory _data) internal returns (bool)\r\n    {\r\n        if (!to_.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to_.functionCall(abi.encodeWithSelector(\r\n                IVNFTReceiver(to_).onVNFTReceived.selector,\r\n                _msgSender(),\r\n                from_,\r\n                tokenId_,\r\n                units_,\r\n                _data\r\n            ), \"non VNFTReceiver implementer\");\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _VNFT_RECEIVED);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./ERC721Upgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721Burnable_init_unchained();\n    }\n\n    function __ERC721Burnable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721MetadataUpgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"../../introspection/ERC165Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/EnumerableSetUpgradeable.sol\";\nimport \"../../utils/EnumerableMapUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable, IERC721EnumerableUpgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\n    using StringsUpgradeable for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSetUpgradeable.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMapUpgradeable.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721Upgradeable.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721Upgradeable.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721ReceiverUpgradeable(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n    uint256[41] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/EnumerableMapUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMapUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/voucher/interface/IICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IICToken {\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    function mint(uint64 term_, uint256 amount_, uint64[] calldata maturities_, uint32[] calldata percentages_,\r\n        string memory originalInvestor_) external returns (uint256, uint256);\r\n\r\n    function claim(uint256 tokenId, uint256 amount)  external ;\r\n    function claimAll(uint256 tokenId)  external ;\r\n    function claimableAmount(uint256 tokenId_) external view returns(uint256);\r\n\r\n    function recharge(uint256 tokenId_, uint256 amount_) external;\r\n}"
    },
    "src/solver/interface/ISolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface ISolver {\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    function isSolver() external returns (bool);\r\n\r\n    function depositAllowed(\r\n        address product,\r\n        address depositor,\r\n        uint64 term,\r\n        uint256 depositAmount,\r\n        uint64[] calldata maturities\r\n    ) external returns (uint256);\r\n\r\n    function depositVerify(\r\n        address product,\r\n        address depositor,\r\n        uint256 depositAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64[] calldata maturities\r\n    ) external returns (uint256);\r\n\r\n    function withdrawAllowed(\r\n        address product,\r\n        address payee,\r\n        uint256 withdrawAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64 maturity\r\n    ) external returns (uint256);\r\n\r\n    function withdrawVerify(\r\n        address product,\r\n        address payee,\r\n        uint256 withdrawAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64 maturity\r\n    ) external returns (uint256);\r\n\r\n    function transferFromAllowed(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function transferFromVerify(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function mergeAllowed(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function mergeVerify(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function splitAllowed(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 newTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function splitVerify(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 newTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function needConvertUnsafeTransfer(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external view returns (bool);\r\n\r\n    function needRejectUnsafeTransfer(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external view returns (bool);\r\n\r\n    function publishFixedPriceAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 min,\r\n        uint256 max,\r\n        uint256 startTime,\r\n        bool useAllowList,\r\n        uint256 price\r\n    ) external returns (uint256);\r\n\r\n    function publishDecliningPriceAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 min,\r\n        uint256 max,\r\n        uint256 startTime,\r\n        bool useAllowList,\r\n        uint256 highest,\r\n        uint256 lowest,\r\n        uint256 duration,\r\n        uint256 interval\r\n    ) external returns (uint256);\r\n\r\n    function publishVerify(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 saleId,\r\n        uint256 units\r\n    ) external;\r\n\r\n    function buyAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address buyer,\r\n        address currency,\r\n        uint256 buyAmount,\r\n        uint256 buyUnits,\r\n        uint256 price\r\n    ) external returns (uint256);\r\n\r\n    function buyVerify(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address buyer,\r\n        address seller,\r\n        uint256 amount,\r\n        uint256 units,\r\n        uint256 price,\r\n        uint256 fee\r\n    ) external;\r\n\r\n    function removeAllow(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address seller\r\n    ) external returns (uint256);\r\n}\r\n"
    },
    "src/market/SolvICMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"../helpers/VNFTTransferHelper.sol\";\r\nimport \"../helpers/ERC20TransferHelper.sol\";\r\nimport \"./interface/external/IVNFT.sol\";\r\nimport \"./interface/external/ISolver.sol\";\r\nimport \"./interface/external/IUnderlyingContainer.sol\";\r\nimport \"./interface/ISolvICMarket.sol\";\r\nimport \"./PriceManager.sol\";\r\nimport \"./SafeMathUpgradeable128.sol\";\r\n\r\ncontract SolvICMarket is ISolvICMarket, PriceManager {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable128 for uint128;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n    event NewSolver(ISolver oldSolver, ISolver newSolver);\r\n\r\n    event AddMarket(\r\n        address indexed icToken,\r\n        uint64 precision,\r\n        uint8 feePayType,\r\n        uint8 feeType,\r\n        uint128 feeAmount,\r\n        uint16 feeRate\r\n    );\r\n\r\n    event RemoveMarket(address indexed icToken);\r\n\r\n    event SetCurrency(address indexed currency, bool enable);\r\n\r\n    event WithdrawFee(address icToken, uint256 reduceAmount);\r\n\r\n    struct Sale {\r\n        uint24 saleId;\r\n        uint24 tokenId;\r\n        uint32 startTime;\r\n        address seller;\r\n        PriceManager.PriceType priceType;\r\n        uint128 total; //sale units\r\n        uint128 units; //current units\r\n        uint128 min; //min units\r\n        uint128 max; //max units\r\n        address icToken; //sale asset\r\n        address currency; //pay currency\r\n        bool useAllowList;\r\n        bool isValid;\r\n    }\r\n\r\n    struct Market {\r\n        bool isValid;\r\n        uint64 precision;\r\n        FeeType feeType;\r\n        FeePayType feePayType;\r\n        uint128 feeAmount;\r\n        uint16 feeRate;\r\n    }\r\n\r\n    enum FeeType {\r\n        BY_AMOUNT,\r\n        FIXED\r\n    }\r\n\r\n    enum FeePayType {\r\n        SELLER_PAY,\r\n        BUYER_PAY\r\n    }\r\n\r\n    //saleId => struct Sale\r\n    mapping(uint24 => Sale) public sales;\r\n\r\n    //icToken => Market\r\n    mapping(address => Market) public markets;\r\n\r\n    mapping(address => bool) public currencies;\r\n\r\n    //icToken => saleId\r\n    mapping(address => EnumerableSetUpgradeable.UintSet) internal _icTokenSales;\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet)\r\n        internal _allowAddresses;\r\n\r\n    ISolver public solver;\r\n    uint24 public nextSaleId;\r\n    address payable public pendingAdmin;\r\n    uint24 public nextTradeId;\r\n    address payable public _admin;\r\n    bool public initialized;\r\n    uint16 internal constant PERCENTAGE_BASE = 10000;\r\n\r\n    // managers with authorities to set allow addresses of a voucher market\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet)\r\n        internal allowAddressManagers;\r\n\r\n    // records of user purchased units from an order\r\n    mapping(uint24 => mapping(address => uint128)) internal saleRecords;\r\n\r\n    uint16 public repoFeeRate;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == _admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowAddressManager(address icToken_) {\r\n        require(\r\n            msg.sender == _admin ||\r\n                allowAddressManagers[icToken_].contains(msg.sender),\r\n            \"only manager\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function initialize(ISolver solver_) public {\r\n        require(initialized == false, \"already initialized\");\r\n        _admin = msg.sender;\r\n        nextSaleId = 1;\r\n        nextTradeId = 1;\r\n        _setSolver(solver_);\r\n        initialized = true;\r\n    }\r\n\r\n    function publishFixedPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 price_\r\n    ) external virtual override returns (uint24 saleId) {\r\n        address seller = msg.sender;\r\n\r\n        uint256 err = solver.publishFixedPriceAllowed(\r\n            icToken_,\r\n            tokenId_,\r\n            seller,\r\n            currency_,\r\n            min_,\r\n            max_,\r\n            startTime_,\r\n            useAllowList_,\r\n            price_\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        PriceManager.PriceType priceType = PriceManager.PriceType.FIXED;\r\n        saleId = _publish(\r\n            seller,\r\n            icToken_,\r\n            tokenId_,\r\n            currency_,\r\n            priceType,\r\n            min_,\r\n            max_,\r\n            startTime_,\r\n            useAllowList_\r\n        );\r\n        PriceManager.setFixedPrice(saleId, price_);\r\n\r\n        emit FixedPriceSet(\r\n            icToken_,\r\n            saleId,\r\n            tokenId_,\r\n            uint8(priceType),\r\n            price_\r\n        );\r\n    }\r\n\r\n    struct PublishDecliningPriceLocalVars {\r\n        address icToken;\r\n        uint24 tokenId;\r\n        address currency;\r\n        uint128 min;\r\n        uint128 max;\r\n        uint32 startTime;\r\n        bool useAllowList;\r\n        uint128 highest;\r\n        uint128 lowest;\r\n        uint32 duration;\r\n        uint32 interval;\r\n        address seller;\r\n    }\r\n\r\n    function publishDecliningPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) external virtual override returns (uint24 saleId) {\r\n        PublishDecliningPriceLocalVars memory vars;\r\n        vars.seller = msg.sender;\r\n        vars.icToken = icToken_;\r\n        vars.tokenId = tokenId_;\r\n        vars.currency = currency_;\r\n        vars.min = min_;\r\n        vars.max = max_;\r\n        vars.startTime = startTime_;\r\n        vars.useAllowList = useAllowList_;\r\n        vars.highest = highest_;\r\n        vars.lowest = lowest_;\r\n        vars.duration = duration_;\r\n        vars.interval = interval_;\r\n\r\n        require(vars.interval > 0, \"interval cannot be 0\");\r\n        require(vars.lowest <= vars.highest, \"lowest > highest\");\r\n        require(vars.duration > 0, \"duration cannot be 0\");\r\n\r\n        uint256 err = solver.publishDecliningPriceAllowed(\r\n            vars.icToken,\r\n            vars.tokenId,\r\n            vars.seller,\r\n            vars.currency,\r\n            vars.min,\r\n            vars.max,\r\n            vars.startTime,\r\n            vars.useAllowList,\r\n            vars.highest,\r\n            vars.lowest,\r\n            vars.duration,\r\n            vars.interval\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        PriceManager.PriceType priceType = PriceManager\r\n            .PriceType\r\n            .DECLIINING_BY_TIME;\r\n        saleId = _publish(\r\n            vars.seller,\r\n            vars.icToken,\r\n            vars.tokenId,\r\n            vars.currency,\r\n            priceType,\r\n            vars.min,\r\n            vars.max,\r\n            vars.startTime,\r\n            vars.useAllowList\r\n        );\r\n\r\n        PriceManager.setDecliningPrice(\r\n            saleId,\r\n            vars.startTime,\r\n            vars.highest,\r\n            vars.lowest,\r\n            vars.duration,\r\n            vars.interval\r\n        );\r\n\r\n        emit DecliningPriceSet(\r\n            vars.icToken,\r\n            saleId,\r\n            vars.tokenId,\r\n            vars.highest,\r\n            vars.lowest,\r\n            vars.duration,\r\n            vars.interval\r\n        );\r\n    }\r\n\r\n    function _publish(\r\n        address seller_,\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        PriceManager.PriceType priceType_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_\r\n    ) internal returns (uint24 saleId) {\r\n        require(markets[icToken_].isValid, \"unsupported icToken\");\r\n        require(\r\n            currencies[currency_] ||\r\n                currency_ == IUnderlyingContainer(icToken_).underlying(),\r\n            \"unsupported currency\"\r\n        );\r\n        if (max_ > 0) {\r\n            require(min_ <= max_, \"min > max\");\r\n        }\r\n\r\n        IVNFT vnft = IVNFT(icToken_);\r\n\r\n        VNFTTransferHelper.doTransferIn(icToken_, seller_, tokenId_);\r\n\r\n        saleId = _generateNextSaleId();\r\n        uint256 units = vnft.unitsInToken(tokenId_);\r\n        require(units <= uint128(-1), \"exceeds uint128 max\");\r\n        sales[saleId] = Sale({\r\n            saleId: saleId,\r\n            seller: msg.sender,\r\n            tokenId: tokenId_,\r\n            total: uint128(units),\r\n            units: uint128(units),\r\n            startTime: startTime_,\r\n            min: min_,\r\n            max: max_,\r\n            icToken: icToken_,\r\n            currency: currency_,\r\n            priceType: priceType_,\r\n            useAllowList: useAllowList_,\r\n            isValid: true\r\n        });\r\n        Sale storage sale = sales[saleId];\r\n        _icTokenSales[icToken_].add(saleId);\r\n        emit Publish(\r\n            sale.icToken,\r\n            sale.seller,\r\n            sale.tokenId,\r\n            saleId,\r\n            uint8(sale.priceType),\r\n            sale.units,\r\n            sale.startTime,\r\n            sale.currency,\r\n            sale.min,\r\n            sale.max,\r\n            sale.useAllowList\r\n        );\r\n        solver.publishVerify(\r\n            sale.icToken,\r\n            sale.tokenId,\r\n            sale.seller,\r\n            sale.currency,\r\n            sale.saleId,\r\n            sale.units\r\n        );\r\n\r\n        return saleId;\r\n    }\r\n\r\n    function buyByAmount(uint24 saleId_, uint256 amount_)\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        returns (uint128 units_)\r\n    {\r\n        Sale storage sale = sales[saleId_];\r\n        address buyer = msg.sender;\r\n        uint128 fee = _getFee(sale.icToken, sale.currency, amount_);\r\n        uint128 price = PriceManager.price(sale.priceType, sale.saleId);\r\n        uint256 units256;\r\n        if (markets[sale.icToken].feePayType == FeePayType.BUYER_PAY) {\r\n            units256 = amount_\r\n                .sub(fee, \"fee exceeds amount\")\r\n                .mul(uint256(markets[sale.icToken].precision))\r\n                .div(uint256(price));\r\n        } else {\r\n            units256 = amount_\r\n                .mul(uint256(markets[sale.icToken].precision))\r\n                .div(uint256(price));\r\n        }\r\n        require(units256 <= uint128(-1), \"exceeds uint128 max\");\r\n        units_ = uint128(units256);\r\n\r\n        uint256 err = solver.buyAllowed(\r\n            sale.icToken,\r\n            sale.tokenId,\r\n            saleId_,\r\n            buyer,\r\n            sale.currency,\r\n            amount_,\r\n            units_,\r\n            price\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        _buy(buyer, sale, amount_, units_, price, fee);\r\n        return units_;\r\n    }\r\n\r\n    function buyByUnits(uint24 saleId_, uint128 units_)\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        returns (uint256 amount_, uint128 fee_)\r\n    {\r\n        Sale storage sale = sales[saleId_];\r\n        address buyer = msg.sender;\r\n        uint128 price = PriceManager.price(sale.priceType, sale.saleId);\r\n\r\n        amount_ = uint256(units_).mul(uint256(price)).div(\r\n            uint256(markets[sale.icToken].precision)\r\n        );\r\n\r\n        if (\r\n            sale.currency == EthAddressLib.ethAddress() &&\r\n            sale.priceType == PriceType.DECLIINING_BY_TIME &&\r\n            amount_ != msg.value\r\n        ) {\r\n            amount_ = msg.value;\r\n            uint128 fee = _getFee(sale.icToken, sale.currency, amount_);\r\n            uint256 units256;\r\n            if (markets[sale.icToken].feePayType == FeePayType.BUYER_PAY) {\r\n                units256 = amount_\r\n                    .sub(fee, \"fee exceeds amount\")\r\n                    .mul(uint256(markets[sale.icToken].precision))\r\n                    .div(uint256(price));\r\n            } else {\r\n                units256 = amount_\r\n                    .mul(uint256(markets[sale.icToken].precision))\r\n                    .div(uint256(price));\r\n            }\r\n            require(units256 <= uint128(-1), \"exceeds uint128 max\");\r\n            units_ = uint128(units256);\r\n        }\r\n\r\n        fee_ = _getFee(sale.icToken, sale.currency, amount_);\r\n\r\n        uint256 err = solver.buyAllowed(\r\n            sale.icToken,\r\n            sale.tokenId,\r\n            saleId_,\r\n            buyer,\r\n            sale.currency,\r\n            amount_,\r\n            units_,\r\n            price\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        _buy(buyer, sale, amount_, units_, price, fee_);\r\n        return (amount_, fee_);\r\n    }\r\n\r\n    struct BuyLocalVar {\r\n        uint256 transferInAmount;\r\n        uint256 transferOutAmount;\r\n        FeePayType feePayType;\r\n    }\r\n\r\n    function _buy(\r\n        address buyer_,\r\n        Sale storage sale_,\r\n        uint256 amount_,\r\n        uint128 units_,\r\n        uint128 price_,\r\n        uint128 fee_\r\n    ) internal {\r\n        require(sale_.isValid, \"invalid saleId\");\r\n        require(block.timestamp >= sale_.startTime, \"not yet on sale\");\r\n        if (sale_.units >= sale_.min) {\r\n            require(units_ >= sale_.min, \"min units not met\");\r\n        }\r\n        if (sale_.max > 0) {\r\n            uint128 purchased = saleRecords[sale_.saleId][buyer_].add(units_);\r\n            require(purchased <= sale_.max, \"exceeds purchase limit\");\r\n            saleRecords[sale_.saleId][buyer_] = purchased;\r\n        }\r\n\r\n        if (sale_.useAllowList) {\r\n            require(\r\n                _allowAddresses[sale_.icToken].contains(buyer_),\r\n                \"not in allow list\"\r\n            );\r\n        }\r\n\r\n        sale_.units = sale_.units.sub(units_, \"insufficient units for sale\");\r\n        BuyLocalVar memory vars;\r\n        vars.feePayType = markets[sale_.icToken].feePayType;\r\n\r\n        if (vars.feePayType == FeePayType.BUYER_PAY) {\r\n            vars.transferInAmount = amount_.add(fee_);\r\n            vars.transferOutAmount = amount_;\r\n        } else if (vars.feePayType == FeePayType.SELLER_PAY) {\r\n            vars.transferInAmount = amount_;\r\n            vars.transferOutAmount = amount_.sub(fee_, \"fee exceeds amount\");\r\n        } else {\r\n            revert(\"unsupported feePayType\");\r\n        }\r\n\r\n        ERC20TransferHelper.doTransferIn(\r\n            sale_.currency,\r\n            buyer_,\r\n            vars.transferInAmount\r\n        );\r\n        if (units_ == IVNFT(sale_.icToken).unitsInToken(sale_.tokenId)) {\r\n            VNFTTransferHelper.doTransferOut(\r\n                sale_.icToken,\r\n                buyer_,\r\n                sale_.tokenId\r\n            );\r\n        } else {\r\n            VNFTTransferHelper.doTransferOut(\r\n                sale_.icToken,\r\n                buyer_,\r\n                sale_.tokenId,\r\n                units_\r\n            );\r\n        }\r\n\r\n        ERC20TransferHelper.doTransferOut(\r\n            sale_.currency,\r\n            payable(sale_.seller),\r\n            vars.transferOutAmount\r\n        );\r\n\r\n        emit Traded(\r\n            buyer_,\r\n            sale_.saleId,\r\n            sale_.icToken,\r\n            sale_.tokenId,\r\n            _generateNextTradeId(),\r\n            uint32(block.timestamp),\r\n            sale_.currency,\r\n            uint8(sale_.priceType),\r\n            price_,\r\n            units_,\r\n            amount_,\r\n            uint8(vars.feePayType),\r\n            fee_\r\n        );\r\n\r\n        solver.buyVerify(\r\n            sale_.icToken,\r\n            sale_.tokenId,\r\n            sale_.saleId,\r\n            buyer_,\r\n            sale_.seller,\r\n            amount_,\r\n            units_,\r\n            price_,\r\n            fee_\r\n        );\r\n\r\n        if (sale_.units == 0) {\r\n            emit Remove(\r\n                sale_.icToken,\r\n                sale_.seller,\r\n                sale_.saleId,\r\n                sale_.total,\r\n                sale_.total - sale_.units\r\n            );\r\n            delete sales[sale_.saleId];\r\n        }\r\n    }\r\n\r\n    function purchasedUnits(uint24 saleId_, address buyer_)\r\n        external\r\n        view\r\n        returns (uint128)\r\n    {\r\n        return saleRecords[saleId_][buyer_];\r\n    }\r\n\r\n    function remove(uint24 saleId_) public virtual override {\r\n        Sale memory sale = sales[saleId_];\r\n        require(sale.isValid, \"invalid sale\");\r\n        require(sale.seller == msg.sender, \"only seller\");\r\n\r\n        uint256 err = solver.removeAllow(\r\n            sale.icToken,\r\n            sale.tokenId,\r\n            sale.saleId,\r\n            sale.seller\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        VNFTTransferHelper.doTransferOut(\r\n            sale.icToken,\r\n            sale.seller,\r\n            sale.tokenId\r\n        );\r\n\r\n        delete sales[saleId_];\r\n        emit Remove(\r\n            sale.icToken,\r\n            sale.seller,\r\n            sale.saleId,\r\n            sale.total,\r\n            sale.total - sale.units\r\n        );\r\n    }\r\n\r\n    function _getFee(\r\n        address icToken_,\r\n        address currency_,\r\n        uint256 amount\r\n    ) internal view returns (uint128) {\r\n        if (currency_ == IUnderlyingContainer(icToken_).underlying()) {\r\n            uint256 fee = amount.mul(uint256(repoFeeRate)).div(PERCENTAGE_BASE);\r\n            require(fee <= uint128(-1), \"Fee: exceeds uint128 max\");\r\n            return uint128(fee);\r\n        }\r\n\r\n        Market storage market = markets[icToken_];\r\n        if (market.feeType == FeeType.FIXED) {\r\n            return market.feeAmount;\r\n        } else if (market.feeType == FeeType.BY_AMOUNT) {\r\n            uint256 fee = amount.mul(uint256(market.feeRate)).div(\r\n                uint256(PERCENTAGE_BASE)\r\n            );\r\n            require(fee <= uint128(-1), \"Fee: exceeds uint128 max\");\r\n            return uint128(fee);\r\n        } else {\r\n            revert(\"unsupported feeType\");\r\n        }\r\n    }\r\n\r\n    function getPrice(uint24 saleId_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint128)\r\n    {\r\n        return PriceManager.price(sales[saleId_].priceType, saleId_);\r\n    }\r\n\r\n    function totalSalesOfICToken(address icToken_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _icTokenSales[icToken_].length();\r\n    }\r\n\r\n    function saleIdOfICTokenByIndex(address icToken_, uint256 index_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _icTokenSales[icToken_].at(index_);\r\n    }\r\n\r\n    function _generateNextSaleId() internal returns (uint24) {\r\n        return nextSaleId++;\r\n    }\r\n\r\n    function _generateNextTradeId() internal returns (uint24) {\r\n        return nextTradeId++;\r\n    }\r\n\r\n    function _addMarket(\r\n        address icToken_,\r\n        uint64 precision_,\r\n        uint8 feePayType_,\r\n        uint8 feeType_,\r\n        uint128 feeAmount_,\r\n        uint16 feeRate_\r\n    ) public onlyAdmin {\r\n        markets[icToken_].isValid = true;\r\n        markets[icToken_].precision = precision_;\r\n        markets[icToken_].feePayType = FeePayType(feePayType_);\r\n        markets[icToken_].feeType = FeeType(feeType_);\r\n        markets[icToken_].feeAmount = feeAmount_;\r\n        markets[icToken_].feeRate = feeRate_;\r\n\r\n        emit AddMarket(\r\n            icToken_,\r\n            precision_,\r\n            feePayType_,\r\n            feeType_,\r\n            feeAmount_,\r\n            feeRate_\r\n        );\r\n    }\r\n\r\n    function _removeMarket(address icToken_) public onlyAdmin {\r\n        delete markets[icToken_];\r\n        emit RemoveMarket(icToken_);\r\n    }\r\n\r\n    function _setCurrency(address currency_, bool enable_) public onlyAdmin {\r\n        currencies[currency_] = enable_;\r\n        emit SetCurrency(currency_, enable_);\r\n    }\r\n\r\n    function _setRepoFeeRate(uint16 newRepoFeeRate_) external onlyAdmin {\r\n        repoFeeRate = newRepoFeeRate_;\r\n    }\r\n\r\n    function _withdrawFee(address icToken_, uint256 reduceAmount_)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            ERC20TransferHelper.getCashPrior(icToken_) >= reduceAmount_,\r\n            \"insufficient cash\"\r\n        );\r\n        ERC20TransferHelper.doTransferOut(icToken_, _admin, reduceAmount_);\r\n        emit WithdrawFee(icToken_, reduceAmount_);\r\n    }\r\n\r\n    function _addAllowAddress(\r\n        address icToken_,\r\n        address[] calldata addresses_,\r\n        bool resetExisting_\r\n    ) external onlyAllowAddressManager(icToken_) {\r\n        require(markets[icToken_].isValid, \"unsupported icToken\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _allowAddresses[\r\n            icToken_\r\n        ];\r\n\r\n        if (resetExisting_) {\r\n            while (set.length() != 0) {\r\n                set.remove(set.at(0));\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            set.add(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function _removeAllowAddress(\r\n        address icToken_,\r\n        address[] calldata addresses_\r\n    ) external onlyAllowAddressManager(icToken_) {\r\n        require(markets[icToken_].isValid, \"unsupported icToken\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _allowAddresses[\r\n            icToken_\r\n        ];\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            set.remove(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function isBuyerAllowed(address icToken_, address buyer_)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _allowAddresses[icToken_].contains(buyer_);\r\n    }\r\n\r\n    function setAllowAddressManager(\r\n        address icToken_,\r\n        address[] calldata managers_,\r\n        bool resetExisting_\r\n    ) external onlyAdmin {\r\n        require(markets[icToken_].isValid, \"unsupported icToken\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = allowAddressManagers[\r\n            icToken_\r\n        ];\r\n        if (resetExisting_) {\r\n            while (set.length() != 0) {\r\n                set.remove(set.at(0));\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < managers_.length; i++) {\r\n            set.add(managers_[i]);\r\n        }\r\n    }\r\n\r\n    function allowAddressManager(address icToken_, uint256 index_)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return allowAddressManagers[icToken_].at(index_);\r\n    }\r\n\r\n    function _setSolver(ISolver newSolver_) public virtual onlyAdmin {\r\n        ISolver oldSolver = solver;\r\n        require(newSolver_.isSolver(), \"invalid solver\");\r\n        solver = newSolver_;\r\n\r\n        emit NewSolver(oldSolver, newSolver_);\r\n    }\r\n\r\n    function _setPendingAdmin(address payable newPendingAdmin) public {\r\n        require(msg.sender == _admin, \"only admin\");\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n    }\r\n\r\n    function _acceptAdmin() public {\r\n        require(\r\n            msg.sender == pendingAdmin && msg.sender != address(0),\r\n            \"only pending admin\"\r\n        );\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = _admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        _admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, _admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n}\r\n"
    },
    "src/helpers/VNFTTransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ERC721Interface {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ninterface VNFTInterface {\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external returns (uint256 newTokenId);\r\n}\r\n\r\nlibrary VNFTTransferHelper {\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 tokenId\r\n    ) internal {\r\n        ERC721Interface token = ERC721Interface(underlying);\r\n        token.transferFrom(from, address(this), tokenId);\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        ERC721Interface token = ERC721Interface(underlying);\r\n        token.transferFrom(address(this), to, tokenId);\r\n    }\r\n\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) internal {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        token.safeTransferFrom(from, address(this), tokenId, units, \"\");\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) internal {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        token.safeTransferFrom(address(this), to, tokenId, units, \"\");\r\n    }\r\n}\r\n"
    },
    "src/market/interface/external/IVNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IVNFT /* is IERC721 */{\r\n    event TransferUnits(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 transferUnits);\r\n    event Split(address owner, uint256 tokenId, uint256 newTokenId, uint256 splitUnits);\r\n    event Merge(address owner, uint256 tokenId, uint256 targetTokenId, uint256 mergeUnits);\r\n    event ApprovalUnits(address indexed owner, address indexed approved, uint256 indexed tokenId, uint256 approvalUnits);\r\n\r\n    function slotOf(uint256 tokenId)  external view returns(uint256 slot);\r\n\r\n    function balanceOfSlot(uint256 slot) external view returns (uint256 balance);\r\n    function tokenOfSlotByIndex(uint256 slot, uint256 index) external view returns (uint256 tokenId);\r\n    function unitsInToken(uint256 tokenId) external view returns (uint256 units);\r\n\r\n    function approve(address to, uint256 tokenId, uint256 units) external;\r\n    function allowance(uint256 tokenId, address spender) external view returns (uint256 allowed);\r\n\r\n    function split(uint256 tokenId, uint256[] calldata units) external returns (uint256[] memory newTokenIds);\r\n    function merge(uint256[] calldata tokenIds, uint256 targetTokenId) external;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units) external returns (uint256 newTokenId);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (uint256 newTokenId);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units) external;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units, bytes calldata data) external;\r\n}\r\n\r\ninterface IVNFTReceiver {\r\n    function onVNFTReceived(address operator, address from, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (bytes4);\r\n}"
    },
    "src/market/interface/external/ISolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ISolver {\r\n    \r\n    function isSolver() external returns (bool);\r\n\r\n    function depositAllowed(\r\n        address product,\r\n        address depositor,\r\n        uint64 term,\r\n        uint256 depositAmount,\r\n        uint64[] calldata maturities\r\n    ) external returns (uint256);\r\n\r\n    function depositVerify(\r\n        address product,\r\n        address depositor,\r\n        uint256 depositAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64[] calldata maturities\r\n    ) external returns (uint256);\r\n\r\n    function withdrawAllowed(\r\n        address product,\r\n        address payee,\r\n        uint256 withdrawAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64 maturity\r\n    ) external returns (uint256);\r\n\r\n    function withdrawVerify(\r\n        address product,\r\n        address payee,\r\n        uint256 withdrawAmount,\r\n        uint256 tokenId,\r\n        uint64 term,\r\n        uint64 maturity\r\n    ) external returns (uint256);\r\n\r\n    function transferFromAllowed(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function transferFromVerify(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function mergeAllowed(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function mergeVerify(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function splitAllowed(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 newTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function splitVerify(\r\n        address product,\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 newTokenId,\r\n        uint256 amount\r\n    ) external returns (uint256);\r\n\r\n    function needConvertUnsafeTransfer(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external view returns (bool);\r\n\r\n    function needRejectUnsafeTransfer(\r\n        address product,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external view returns (bool);\r\n\r\n    function publishFixedPriceAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 min,\r\n        uint256 max,\r\n        uint256 startTime,\r\n        bool useAllowList,\r\n        uint256 price\r\n    ) external returns (uint256);\r\n\r\n    function publishDecliningPriceAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 min,\r\n        uint256 max,\r\n        uint256 startTime,\r\n        bool useAllowList,\r\n        uint256 highest,\r\n        uint256 lowest,\r\n        uint256 duration,\r\n        uint256 interval\r\n    ) external returns (uint256);\r\n\r\n    function publishVerify(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        address seller,\r\n        address currency,\r\n        uint256 saleId,\r\n        uint256 units\r\n    ) external;\r\n\r\n    function buyAllowed(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address buyer,\r\n        address currency,\r\n        uint256 buyAmount,\r\n        uint256 buyUnits,\r\n        uint256 price\r\n    ) external returns (uint256);\r\n\r\n    function buyVerify(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address buyer,\r\n        address seller,\r\n        uint256 amount,\r\n        uint256 units,\r\n        uint256 price,\r\n        uint256 fee\r\n    ) external;\r\n\r\n    function removeAllow(\r\n        address icToken,\r\n        uint256 tokenId,\r\n        uint256 saleId,\r\n        address seller\r\n    ) external returns (uint256);\r\n}\r\n"
    },
    "src/market/interface/external/IUnderlyingContainer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IUnderlyingContainer {\r\n    function underlying() external view returns (address);\r\n}"
    },
    "src/market/interface/ISolvICMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ISolvICMarket {\r\n    event Publish(\r\n        address indexed icToken,\r\n        address indexed seller,\r\n        uint24 indexed tokenId,\r\n        uint24 saleId,\r\n        uint8 priceType,\r\n        uint128 units,\r\n        uint128 startTime,\r\n        address currency,\r\n        uint128 min,\r\n        uint128 max,\r\n        bool useAllowList\r\n    );\r\n\r\n    event Remove(\r\n        address indexed icToken,\r\n        address indexed seller,\r\n        uint24 indexed saleId,\r\n        uint128 total,\r\n        uint128 saled\r\n    );\r\n\r\n    event FixedPriceSet(\r\n        address indexed icToken,\r\n        uint24 indexed saleId,\r\n        uint24 indexed tokenId,\r\n        uint8 priceType,\r\n        uint128 lastPrice\r\n    );\r\n\r\n    event DecliningPriceSet(\r\n        address indexed icToken,\r\n        uint24 indexed saleId,\r\n        uint24 indexed tokenId,\r\n        uint128 highest,\r\n        uint128 lowest,\r\n        uint32 duration,\r\n        uint32 interval\r\n    );\r\n\r\n    event Traded(\r\n        address indexed buyer,\r\n        uint24 indexed saleId,\r\n        address indexed icToken,\r\n        uint24 tokenId,\r\n        uint24 tradeId,\r\n        uint32 tradeTime,\r\n        address currency,\r\n        uint8 priceType,\r\n        uint128 price,\r\n        uint128 tradedUnits,\r\n        uint256 tradedAmount,\r\n        uint8 feePayType,\r\n        uint128 fee\r\n    );\r\n\r\n    function publishFixedPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 price_\r\n    ) external returns (uint24 saleId);\r\n\r\n    function publishDecliningPrice(\r\n        address icToken_,\r\n        uint24 tokenId_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        bool useAllowList_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) external returns (uint24 saleId);\r\n\r\n    function buyByAmount(uint24 saleId_, uint256 amount_)\r\n        external\r\n        payable\r\n        returns (uint128 units_);\r\n\r\n    function buyByUnits(uint24 saleId_, uint128 units_)\r\n        external\r\n        payable\r\n        returns (uint256 amount_, uint128 fee_);\r\n\r\n    function remove(uint24 saleId_) external;\r\n\r\n    function totalSalesOfICToken(address icToken_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function saleIdOfICTokenByIndex(address icToken_, uint256 index_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function getPrice(uint24 saleId_) external view returns (uint128);\r\n}\r\n"
    },
    "src/market/PriceManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ncontract PriceManager {\r\n    enum PriceType {FIXED, DECLIINING_BY_TIME}\r\n\r\n    struct DecliningPrice {\r\n        uint128 highest; //起始价格\r\n        uint128 lowest; //最终价格\r\n        uint32 startTime;\r\n        uint32 duration; //持续时间\r\n        uint32 interval; //降价周期\r\n    }\r\n\r\n    //saleId => DecliningPrice\r\n    mapping(uint24 => DecliningPrice) internal decliningPrices;\r\n    mapping(uint24 => uint128) internal fixedPrices;\r\n\r\n    function price(PriceType priceType_, uint24 saleId_)\r\n        internal\r\n        view\r\n        returns (uint128)\r\n    {\r\n        if (priceType_ == PriceType.FIXED) {\r\n            return fixedPrices[saleId_];\r\n        }\r\n\r\n        if (priceType_ == PriceType.DECLIINING_BY_TIME) {\r\n            DecliningPrice storage price_ = decliningPrices[saleId_];\r\n            if (block.timestamp >= price_.startTime + price_.duration) {\r\n                return price_.lowest;\r\n            }\r\n            if (block.timestamp <= price_.startTime) {\r\n                return price_.highest;\r\n            }\r\n\r\n            uint256 lastPrice =\r\n                price_.highest -\r\n                    ((block.timestamp - price_.startTime) / price_.interval) *\r\n                    (((price_.highest - price_.lowest) / price_.duration) *\r\n                        price_.interval);\r\n            uint256 price256 = lastPrice < price_.lowest ? price_.lowest : lastPrice;\r\n            require(price256 <= uint128(-1), \"price: exceeds uint128 max\");\r\n\r\n            return uint128(price256);\r\n        }\r\n\r\n        revert(\"unsupported priceType\");\r\n    }\r\n\r\n    function setFixedPrice(uint24 saleId_, uint128 price_) internal {\r\n        fixedPrices[saleId_] = price_;\r\n    }\r\n\r\n    function setDecliningPrice(\r\n        uint24 saleId_,\r\n        uint32 startTime_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) internal {\r\n        decliningPrices[saleId_].startTime = startTime_;\r\n        decliningPrices[saleId_].highest = highest_;\r\n        decliningPrices[saleId_].lowest = lowest_;\r\n        decliningPrices[saleId_].duration = duration_;\r\n        decliningPrices[saleId_].interval = interval_;\r\n    }\r\n}\r\n"
    },
    "src/market/SafeMathUpgradeable128.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable128 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        uint128 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint128 a, uint128 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        if (a == 0) return 0;\r\n        uint128 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "src/proxy/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./AdminUpgradeabilityProxy.sol\";\r\n\r\n/**\r\n * @title ProxyAdmin\r\n * @dev This contract is the admin of a proxy, and is in charge\r\n * of upgrading it as well as transferring it to another admin.\r\n */\r\ncontract ProxyAdmin is Ownable {\r\n  \r\n  /**\r\n   * @dev Constructor.\r\n   */\r\n  constructor(address admin) {\r\n    // We need this for our hardhat tooling\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the current implementation of a proxy.\r\n   * This is needed because only the proxy admin can query it.\r\n   * @return The address of the current implementation of the proxy.\r\n   */\r\n  function getProxyImplementation(AdminUpgradeabilityProxy proxy) public view returns (address) {\r\n    // We need to manually run the static call since the getter cannot be flagged as view\r\n    // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\r\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\r\n    require(success);\r\n    return abi.decode(returndata, (address));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the admin of a proxy. Only the admin can query it.\r\n   * @return The address of the current admin of the proxy.\r\n   */\r\n  function getProxyAdmin(AdminUpgradeabilityProxy proxy) public view returns (address) {\r\n    // We need to manually run the static call since the getter cannot be flagged as view\r\n    // bytes4(keccak256(\"admin()\")) == 0xf851a440\r\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\r\n    require(success);\r\n    return abi.decode(returndata, (address));\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of a proxy.\r\n   * @param proxy Proxy to change admin.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeProxyAdmin(AdminUpgradeabilityProxy proxy, address newAdmin) public onlyOwner {\r\n    proxy.changeAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades a proxy to the newest implementation of a contract.\r\n   * @param proxy Proxy to be upgraded.\r\n   * @param implementation the address of the Implementation.\r\n   */\r\n  function upgrade(AdminUpgradeabilityProxy proxy, address implementation) public onlyOwner {\r\n    proxy.upgradeTo(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades a proxy to the newest implementation of a contract and forwards a function call to it.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param proxy Proxy to be upgraded.\r\n   * @param implementation Address of the Implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeAndCall(AdminUpgradeabilityProxy proxy, address implementation, bytes memory data) payable public onlyOwner {\r\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\r\n  }\r\n}\r\n"
    },
    "src/proxy/AdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"./UpgradeabilityProxy.sol\";\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _initAdmin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _initAdmin, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_initAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal override virtual {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n"
    },
    "src/proxy/UpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport './Proxy.sol';\r\nimport '@openzeppelin/contracts/utils/Address.sol';\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() internal override view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n"
    },
    "src/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  receive () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal virtual view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}