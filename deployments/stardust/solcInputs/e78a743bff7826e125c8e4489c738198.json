{
  "language": "Solidity",
  "sources": {
    "src/ivo/markets/convertible-offering-market/InitialConvertibleOfferingMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../offering-market-core/OfferingMarketCore.sol\";\r\n\r\ninterface IConvertibleVoucher {\r\n    function mint(\r\n        address issuer_,\r\n        address fundCurrency_,\r\n        uint128 lowestPrice_,\r\n        uint128 highestPrice_,\r\n        uint64 effectiveTime_,\r\n        uint64 maturity_,\r\n        uint256 tokenInAmount_ // 最大偿付token数量 (at lowestPrice)\r\n    ) external returns (uint256 slot, uint256 tokenId);\r\n}\r\n\r\ninterface IConvertiblePool {\r\n    function validateSlotParams(\r\n        address issuer_,\r\n        address fundCurrency_,\r\n        uint128 lowestPrice_,\r\n        uint128 highestPrice_,\r\n        uint64 effectiveTime_,\r\n        uint64 maturity_,\r\n        uint8 collateralType_\r\n    ) external view;\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract InitialConvertibleOfferingMarket is OfferingMarketCore {\r\n    using SafeMathUpgradeable128 for uint128;\r\n\r\n    struct MintParameter {\r\n        uint128 lowestPrice;\r\n        uint128 highestPrice;\r\n        uint128 tokenInAmount;\r\n        uint64 effectiveTime;\r\n        uint64 maturity;\r\n    }\r\n\r\n    //key: offeringId\r\n    mapping(uint24 => MintParameter) internal _mintParameters;\r\n\r\n    function mintParameters(uint24 offeringId_)\r\n        external\r\n        view\r\n        returns (MintParameter memory)\r\n    {\r\n        return _mintParameters[offeringId_];\r\n    }\r\n\r\n    function offer(\r\n        address voucher_,\r\n        address currency_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        uint32 endTime_,\r\n        bool useAllowList_,\r\n        PriceManager.PriceType priceType_,\r\n        bytes calldata priceData_,\r\n        MintParameter calldata mintParameter_\r\n    ) external returns (uint24 offeringId) {\r\n        Market memory market = markets[voucher_];\r\n\r\n        IConvertiblePool(market.voucherPool).validateSlotParams(\r\n            msg.sender,\r\n            currency_,\r\n            mintParameter_.lowestPrice,\r\n            mintParameter_.highestPrice,\r\n            mintParameter_.effectiveTime,\r\n            mintParameter_.maturity,\r\n            0 //ERC20\r\n        );\r\n\r\n        uint128 units = mintParameter_.tokenInAmount.mul(\r\n            mintParameter_.lowestPrice\r\n        );\r\n\r\n        ERC20TransferHelper.doTransferIn(\r\n            market.asset,\r\n            msg.sender,\r\n            mintParameter_.tokenInAmount\r\n        );\r\n\r\n        offeringId = OfferingMarketCore._offer(\r\n            voucher_,\r\n            currency_,\r\n            units,\r\n            min_,\r\n            max_,\r\n            startTime_,\r\n            endTime_,\r\n            useAllowList_,\r\n            priceType_,\r\n            priceData_\r\n        );\r\n        _mintParameters[offeringId] = mintParameter_;\r\n    }\r\n\r\n    function _mintVoucher(uint24 offeringId_, uint128 units_)\r\n        internal\r\n        virtual\r\n        override\r\n        returns (uint256 voucherId)\r\n    {\r\n        Offering memory offering = offerings[offeringId_];\r\n        MintParameter memory parameter = _mintParameters[offeringId_];\r\n        uint128 tokenInAmount = units_.div(parameter.lowestPrice);\r\n        IERC20(markets[offering.voucher].asset).approve(\r\n            markets[offering.voucher].voucherPool,\r\n            tokenInAmount\r\n        );\r\n        (, voucherId) = IConvertibleVoucher(offering.voucher).mint(\r\n            offering.issuer,\r\n            offering.currency,\r\n            parameter.lowestPrice,\r\n            parameter.highestPrice,\r\n            parameter.effectiveTime,\r\n            parameter.maturity,\r\n            tokenInAmount\r\n        );\r\n    }\r\n\r\n    function _refund(uint24 offeringId_, uint128 units_)\r\n        internal\r\n        virtual\r\n        override\r\n    {\r\n        Offering memory offering = offerings[offeringId_];\r\n        address asset = markets[offering.voucher].asset;\r\n        uint256 balance = IERC20(asset).balanceOf(address(this));\r\n        uint256 refundAmount = units_.div(\r\n            _mintParameters[offeringId_].lowestPrice\r\n        );\r\n        if (refundAmount > balance) {\r\n            refundAmount = balance;\r\n        }\r\n\r\n        ERC20TransferHelper.doTransferOut(\r\n            markets[offering.voucher].asset,\r\n            payable(offering.issuer),\r\n            refundAmount\r\n        );\r\n    }\r\n\r\n    function isSupportVoucherType(Constants.VoucherType voucherType_)\r\n        public\r\n        pure\r\n        override\r\n        returns (bool)\r\n    {\r\n        return (voucherType_ == Constants.VoucherType.BOUNDING);\r\n    }\r\n}\r\n"
    },
    "src/ivo/markets/offering-market-core/OfferingMarketCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../../commons/solidity-utils/misc/Constants.sol\";\r\nimport \"../../commons/solidity-utils/access/AdminControl.sol\";\r\nimport \"../../commons/solidity-utils/openzeppelin/math/SafeMathUpgradeable.sol\";\r\nimport \"../../commons/solidity-utils/openzeppelin/utils/EnumerableSetUpgradeable.sol\";\r\nimport \"../../commons/solidity-utils/math/SafeMathUpgradeable128.sol\";\r\nimport \"../../commons/solidity-utils/helpers/VNFTTransferHelper.sol\";\r\nimport \"../../commons/solidity-utils/helpers/ERC20TransferHelper.sol\";\r\nimport \"../../commons/solidity-utils/openzeppelin/utils/ReentrancyGuardUpgradeable.sol\";\r\nimport \"../../commons/solver/interface/IIVOSolver.sol\";\r\nimport \"./PriceManager.sol\";\r\n\r\nabstract contract OfferingMarketCore is\r\n    PriceManager,\r\n    AdminControl,\r\n    ReentrancyGuardUpgradeable\r\n{\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable128 for uint128;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    event AddMarket(\r\n        address indexed voucher,\r\n        Constants.VoucherType voucherType,\r\n        address asset,\r\n        uint8 decimals,\r\n        uint16 feeRate,\r\n        bool onlyManangerOffer\r\n    );\r\n\r\n    event RemoveMarket(address indexed voucher);\r\n\r\n    event Offer(\r\n        address indexed voucher,\r\n        address indexed issuer,\r\n        Offering offering\r\n    );\r\n\r\n    event Remove(\r\n        address indexed issuer,\r\n        uint24 indexed offeringId,\r\n        address voucher,\r\n        uint128 total,\r\n        uint128 sold\r\n    );\r\n\r\n    event FixedPriceSet(\r\n        address indexed voucher,\r\n        uint24 indexed offeringId,\r\n        uint8 priceType,\r\n        uint128 lastPrice\r\n    );\r\n\r\n    event DecliningPriceSet(\r\n        address indexed voucher,\r\n        uint24 indexed offeringId,\r\n        uint128 highest,\r\n        uint128 lowest,\r\n        uint32 duration,\r\n        uint32 interval\r\n    );\r\n\r\n    event Traded(\r\n        address indexed buyer,\r\n        uint24 indexed offeringId,\r\n        address indexed voucher,\r\n        uint256 voucherId,\r\n        uint24 tradeId,\r\n        uint32 tradeTime,\r\n        address currency,\r\n        uint8 priceType,\r\n        uint128 price,\r\n        uint128 tradedUnits,\r\n        uint256 tradedAmount,\r\n        uint128 fee\r\n    );\r\n\r\n    event SetCurrency(address indexed currency, bool enable);\r\n\r\n    event WithdrawFee(address voucher, uint256 reduceAmount);\r\n\r\n    event NewSolver(IIVOSolver oldSolver, IIVOSolver newSolver);\r\n\r\n    struct Market {\r\n        Constants.VoucherType voucherType;\r\n        address voucherPool;\r\n        address asset;\r\n        uint8 decimals;\r\n        uint16 feeRate;\r\n        bool onlyManangerOffer;\r\n        bool isValid;\r\n    }\r\n\r\n    struct Offering {\r\n        uint24 offeringId;\r\n        uint32 startTime;\r\n        uint32 endTime;\r\n        PriceManager.PriceType priceType;\r\n        uint128 totalUnits;\r\n        uint128 units;\r\n        uint128 min;\r\n        uint128 max;\r\n        address voucher;\r\n        address currency;\r\n        address issuer;\r\n        bool useAllowList;\r\n        bool isValid;\r\n    }\r\n\r\n    //key: offeringId\r\n    mapping(uint24 => Offering) public offerings;\r\n\r\n    //key: voucher\r\n    mapping(address => Market) public markets;\r\n\r\n    EnumerableSetUpgradeable.AddressSet internal _currencies;\r\n    EnumerableSetUpgradeable.AddressSet internal _vouchers;\r\n\r\n    //voucher => offeringId\r\n    mapping(address => EnumerableSetUpgradeable.UintSet)\r\n        internal _voucherOfferings;\r\n\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet)\r\n        internal _allowAddresses;\r\n\r\n    // managers with authorities to set allow addresses of a voucher market and offer offering\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet)\r\n        internal _voucherManagers;\r\n\r\n    // records of user purchased units from an order\r\n    mapping(uint24 => mapping(address => uint128)) internal _tradeRecords;\r\n\r\n    IIVOSolver public solver;\r\n    uint24 public nextOfferingId;\r\n    uint24 public nextTradeId;\r\n\r\n    modifier onlyVoucherManager(address voucher_) {\r\n        require(\r\n            msg.sender == _admin ||\r\n                _voucherManagers[voucher_].contains(msg.sender),\r\n            \"only manager\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function _mintVoucher(uint24 oferingId, uint128 units)\r\n        internal\r\n        virtual\r\n        returns (uint256 voucherId);\r\n\r\n    function _refund(uint24 offeringId, uint128 units) internal virtual;\r\n\r\n    function isSupportVoucherType(Constants.VoucherType voucherType)\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function initialize(IIVOSolver solver_) external initializer {\r\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\r\n        AdminControl.__AdminControl_init(msg.sender);\r\n        nextOfferingId = 1;\r\n        nextTradeId = 1;\r\n        setSolver(solver_);\r\n    }\r\n\r\n    function _offer(\r\n        address voucher_,\r\n        address currency_,\r\n        uint128 units_,\r\n        uint128 min_,\r\n        uint128 max_,\r\n        uint32 startTime_,\r\n        uint32 endTime_,\r\n        bool useAllowList_,\r\n        PriceManager.PriceType priceType_,\r\n        bytes memory priceData_\r\n    ) internal nonReentrant returns (uint24 offeringId) {\r\n        require(\r\n            voucher_ != address(0) && currency_ != address(0),\r\n            \"address cannot be 0\"\r\n        );\r\n        Market memory market = markets[voucher_];\r\n        require(market.isValid, \"unsupported voucher\");\r\n        require(_currencies.contains(currency_), \"unsupported currency\");\r\n        require(endTime_ > startTime_, \"endTime less than startTime\");\r\n\r\n        if (market.onlyManangerOffer) {\r\n            require(\r\n                _voucherManagers[voucher_].contains(msg.sender),\r\n                \"only manager\"\r\n            );\r\n        }\r\n\r\n        if (max_ > 0) {\r\n            require(min_ <= max_, \"min > max\");\r\n        }\r\n\r\n        uint256 err = solver.operationAllowed(\r\n            \"Offer\",\r\n            abi.encode(\r\n                voucher_,\r\n                msg.sender,\r\n                currency_,\r\n                units_,\r\n                min_,\r\n                max_,\r\n                startTime_,\r\n                endTime_,\r\n                useAllowList_,\r\n                priceType_,\r\n                priceData_\r\n            )\r\n        );\r\n        require(err == 0, \"solver not allowed\");\r\n\r\n        offeringId = _generateNextofferingId();\r\n\r\n        offerings[offeringId] = Offering({\r\n            offeringId: offeringId,\r\n            startTime: startTime_,\r\n            endTime: endTime_,\r\n            priceType: priceType_,\r\n            totalUnits: units_,\r\n            units: units_,\r\n            min: min_,\r\n            max: max_,\r\n            currency: currency_,\r\n            issuer: msg.sender,\r\n            voucher: voucher_,\r\n            useAllowList: useAllowList_,\r\n            isValid: true\r\n        });\r\n\r\n        Offering memory offering = offerings[offeringId];\r\n\r\n        _setPrice(offering, priceType_, priceData_);\r\n\r\n        solver.operationVerify(\r\n            \"Offer\",\r\n            abi.encode(offering.voucher, offering.offeringId)\r\n        );\r\n        emit Offer(offering.voucher, offering.issuer, offering);\r\n\r\n        return offeringId;\r\n    }\r\n\r\n    function _setPrice(\r\n        Offering memory offering_,\r\n        PriceManager.PriceType priceType_,\r\n        bytes memory priceData_\r\n    ) internal {\r\n        if (priceType_ == PriceManager.PriceType.FIXED) {\r\n            uint128 price = abi.decode(priceData_, (uint128));\r\n            PriceManager.setFixedPrice(offering_.offeringId, price);\r\n\r\n            emit FixedPriceSet(\r\n                offering_.voucher,\r\n                offering_.offeringId,\r\n                uint8(priceType_),\r\n                price\r\n            );\r\n        } else {\r\n            (\r\n                uint128 highest,\r\n                uint128 lowest,\r\n                uint32 duration,\r\n                uint32 interval\r\n            ) = abi.decode(priceData_, (uint128, uint128, uint32, uint32));\r\n            PriceManager.setDecliningPrice(\r\n                offering_.offeringId,\r\n                offering_.startTime,\r\n                highest,\r\n                lowest,\r\n                duration,\r\n                interval\r\n            );\r\n\r\n            emit DecliningPriceSet(\r\n                offering_.voucher,\r\n                offering_.offeringId,\r\n                highest,\r\n                lowest,\r\n                duration,\r\n                interval\r\n            );\r\n        }\r\n    }\r\n\r\n    function buy(uint24 offeringId_, uint128 units_)\r\n        external\r\n        payable\r\n        virtual\r\n        nonReentrant\r\n        returns (uint256 amount_, uint128 fee_)\r\n    {\r\n        address buyer = msg.sender;\r\n        uint128 price = getPrice(offeringId_);\r\n        Offering storage offering = offerings[offeringId_];\r\n        require(offering.isValid, \"invalid offering\");\r\n\r\n        Market memory market = markets[offering.voucher];\r\n        require(market.isValid, \"invalid market\");\r\n        amount_ = uint256(units_).mul(uint256(price)).div(\r\n            uint256(10**market.decimals)\r\n        );\r\n\r\n        fee_ = _getFee(offering.voucher, amount_);\r\n\r\n        uint256 err = solver.operationAllowed(\r\n            \"Buy\",\r\n            abi.encode(\r\n                offering.voucher,\r\n                offeringId_,\r\n                buyer,\r\n                amount_,\r\n                units_,\r\n                price\r\n            )\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        BuyParameter memory buyParameter = BuyParameter({\r\n            buyer: buyer,\r\n            amount: amount_,\r\n            units: units_,\r\n            price: price,\r\n            fee: fee_\r\n        });\r\n        _buy(offering, buyParameter);\r\n        return (amount_, fee_);\r\n    }\r\n\r\n    struct BuyLocalVar {\r\n        uint256 transferInAmount;\r\n        uint256 transferOutAmount;\r\n    }\r\n\r\n    struct BuyParameter {\r\n        address buyer;\r\n        uint256 amount;\r\n        uint128 units;\r\n        uint128 price;\r\n        uint128 fee;\r\n    }\r\n\r\n    function _buy(Offering storage offering_, BuyParameter memory parameter_)\r\n        internal\r\n    {\r\n        require(offering_.isValid, \"offering invalid\");\r\n        require(offering_.units > 0, \"sold out\");\r\n        require(\r\n            block.timestamp >= offering_.startTime &&\r\n                block.timestamp <= offering_.endTime,\r\n            \"not offering time\"\r\n        );\r\n        if (offering_.useAllowList) {\r\n            require(\r\n                _allowAddresses[offering_.voucher].contains(parameter_.buyer),\r\n                \"not in allow list\"\r\n            );\r\n        }\r\n        if (offering_.units >= offering_.min) {\r\n            require(parameter_.units >= offering_.min, \"min amount not met\");\r\n        }\r\n        if (offering_.max > 0) {\r\n            uint128 purchased = _tradeRecords[offering_.offeringId][\r\n                parameter_.buyer\r\n            ].add(parameter_.units);\r\n            require(purchased <= offering_.max, \"exceeds purchase limit\");\r\n            _tradeRecords[offering_.offeringId][parameter_.buyer] = purchased;\r\n        }\r\n\r\n        offering_.units = offering_.units.sub(\r\n            parameter_.units,\r\n            \"insufficient units for sale\"\r\n        );\r\n        BuyLocalVar memory vars;\r\n\r\n        vars.transferInAmount = parameter_.amount;\r\n        vars.transferOutAmount = parameter_.amount.sub(\r\n            parameter_.fee,\r\n            \"fee exceeds amount\"\r\n        );\r\n\r\n        uint256 voucherId = _transferAsset(\r\n            offering_,\r\n            parameter_.buyer,\r\n            vars.transferInAmount,\r\n            parameter_.units,\r\n            vars.transferOutAmount\r\n        );\r\n\r\n        solver.operationVerify(\r\n            \"Buy\",\r\n            abi.encode(\r\n                offering_.offeringId,\r\n                parameter_.buyer,\r\n                parameter_.amount,\r\n                parameter_.units,\r\n                parameter_.fee\r\n            )\r\n        );\r\n\r\n        emit Traded(\r\n            parameter_.buyer,\r\n            offering_.offeringId,\r\n            offering_.voucher,\r\n            voucherId,\r\n            _generateNextTradeId(),\r\n            uint32(block.timestamp),\r\n            offering_.currency,\r\n            uint8(offering_.priceType),\r\n            parameter_.price,\r\n            parameter_.units,\r\n            parameter_.amount,\r\n            parameter_.fee\r\n        );\r\n    }\r\n\r\n    function _transferAsset(\r\n        Offering memory offering_,\r\n        address buyer_,\r\n        uint256 transferInAmount_,\r\n        uint128 transferOutUnits_,\r\n        uint256 transferOutAmount_\r\n    ) internal returns (uint256 voucherId) {\r\n        ERC20TransferHelper.doTransferIn(\r\n            offering_.currency,\r\n            buyer_,\r\n            transferInAmount_\r\n        );\r\n\r\n        voucherId = _mintVoucher(offering_.offeringId, transferOutUnits_);\r\n\r\n        VNFTTransferHelper.doTransferOut(offering_.voucher, buyer_, voucherId);\r\n\r\n        ERC20TransferHelper.doTransferOut(\r\n            offering_.currency,\r\n            payable(offering_.issuer),\r\n            transferOutAmount_\r\n        );\r\n    }\r\n\r\n    function purchasedUnits(uint24 offeringId_, address buyer_)\r\n        external\r\n        view\r\n        returns (uint128)\r\n    {\r\n        return _tradeRecords[offeringId_][buyer_];\r\n    }\r\n\r\n    function remove(uint24 offeringId_) external virtual nonReentrant {\r\n        Offering memory offering = offerings[offeringId_];\r\n        require(offering.isValid, \"invalid offering\");\r\n        require(offering.issuer == msg.sender, \"only issuer\");\r\n        require(\r\n            block.timestamp < offering.startTime ||\r\n                block.timestamp > offering.endTime,\r\n            \"offering processing\"\r\n        );\r\n\r\n        uint256 err = solver.operationAllowed(\r\n            \"Remove\",\r\n            abi.encode(offering.voucher, offering.offeringId, offering.issuer)\r\n        );\r\n        require(err == 0, \"Solver: not allowed\");\r\n\r\n        _refund(offeringId_, offering.units);\r\n\r\n        emit Remove(\r\n            offering.issuer,\r\n            offering.offeringId,\r\n            offering.voucher,\r\n            offering.totalUnits,\r\n            offering.totalUnits - offering.units\r\n        );\r\n        delete offerings[offeringId_];\r\n    }\r\n\r\n    function _getFee(address voucher_, uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint128)\r\n    {\r\n        Market storage market = markets[voucher_];\r\n\r\n        uint256 fee = amount.mul(uint256(market.feeRate)).div(\r\n            uint256(Constants.FULL_PERCENTAGE)\r\n        );\r\n        require(fee <= uint128(-1), \"Fee: exceeds uint128 max\");\r\n        return uint128(fee);\r\n    }\r\n\r\n    function getPrice(uint24 offeringId_)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint128)\r\n    {\r\n        return\r\n            PriceManager.price(offerings[offeringId_].priceType, offeringId_);\r\n    }\r\n\r\n    function totalOfferingsOfvoucher(address voucher_)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return _voucherOfferings[voucher_].length();\r\n    }\r\n\r\n    function offeringIdOfvoucherByIndex(address voucher_, uint256 index_)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return _voucherOfferings[voucher_].at(index_);\r\n    }\r\n\r\n    function _generateNextofferingId() internal returns (uint24) {\r\n        return nextOfferingId++;\r\n    }\r\n\r\n    function _generateNextTradeId() internal returns (uint24) {\r\n        return nextTradeId++;\r\n    }\r\n\r\n    function addMarket(\r\n        address voucher_,\r\n        address voucherPool_,\r\n        Constants.VoucherType voucherType_,\r\n        address asset_,\r\n        uint8 decimals_,\r\n        uint16 feeRate_,\r\n        bool onlyManangerOffer_\r\n    ) external onlyAdmin {\r\n        if (_vouchers.contains(voucher_)) {\r\n            revert(\"already added\");\r\n        }\r\n        require(isSupportVoucherType(voucherType_), \"unsupported voucher type\");\r\n        require(feeRate_ <= Constants.FULL_PERCENTAGE, \"invalid fee rate\");\r\n        markets[voucher_].voucherPool = voucherPool_;\r\n        markets[voucher_].isValid = true;\r\n        markets[voucher_].decimals = decimals_;\r\n        markets[voucher_].feeRate = feeRate_;\r\n        markets[voucher_].voucherType = voucherType_;\r\n        markets[voucher_].asset = asset_;\r\n        markets[voucher_].onlyManangerOffer = onlyManangerOffer_;\r\n\r\n        _vouchers.add(voucher_);\r\n\r\n        emit AddMarket(\r\n            voucher_,\r\n            voucherType_,\r\n            asset_,\r\n            decimals_,\r\n            feeRate_,\r\n            onlyManangerOffer_\r\n        );\r\n    }\r\n\r\n    function removeMarket(address voucher_) external onlyAdmin {\r\n        _vouchers.remove(voucher_);\r\n        delete markets[voucher_];\r\n        emit RemoveMarket(voucher_);\r\n    }\r\n\r\n    function setCurrency(address currency_, bool enable_) external onlyAdmin {\r\n        if (enable_) {\r\n            _currencies.add(currency_);\r\n        } else {\r\n            _currencies.remove(currency_);\r\n        }\r\n        emit SetCurrency(currency_, enable_);\r\n    }\r\n\r\n    function withdrawFee(address currency_, uint256 reduceAmount_)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        ERC20TransferHelper.doTransferOut(\r\n            currency_,\r\n            payable(_admin),\r\n            reduceAmount_\r\n        );\r\n        emit WithdrawFee(currency_, reduceAmount_);\r\n    }\r\n\r\n    function addAllowAddress(\r\n        address voucher_,\r\n        address[] calldata addresses_,\r\n        bool resetExisting_\r\n    ) external onlyVoucherManager(voucher_) {\r\n        require(markets[voucher_].isValid, \"unsupported voucher\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _allowAddresses[\r\n            voucher_\r\n        ];\r\n\r\n        if (resetExisting_) {\r\n            while (set.length() != 0) {\r\n                set.remove(set.at(0));\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            set.add(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function removeAllowAddress(address voucher_, address[] calldata addresses_)\r\n        external\r\n        onlyVoucherManager(voucher_)\r\n    {\r\n        require(markets[voucher_].isValid, \"unsupported voucher\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _allowAddresses[\r\n            voucher_\r\n        ];\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            set.remove(addresses_[i]);\r\n        }\r\n    }\r\n\r\n    function isBuyerAllowed(address voucher_, address buyer_)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _allowAddresses[voucher_].contains(buyer_);\r\n    }\r\n\r\n    function setVoucherManager(\r\n        address voucher_,\r\n        address[] calldata managers_,\r\n        bool resetExisting_\r\n    ) external onlyAdmin {\r\n        require(markets[voucher_].isValid, \"unsupported voucher\");\r\n        EnumerableSetUpgradeable.AddressSet storage set = _voucherManagers[\r\n            voucher_\r\n        ];\r\n        if (resetExisting_) {\r\n            while (set.length() != 0) {\r\n                set.remove(set.at(0));\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < managers_.length; i++) {\r\n            set.add(managers_[i]);\r\n        }\r\n    }\r\n\r\n    function voucherManagers(address voucher_)\r\n        external\r\n        view\r\n        returns (address[] memory managers_)\r\n    {\r\n        managers_ = new address[](_voucherManagers[voucher_].length());\r\n        for (uint256 i = 0; i < _voucherManagers[voucher_].length(); i++) {\r\n            managers_[i] = _voucherManagers[voucher_].at(i);\r\n        }\r\n    }\r\n\r\n    function setSolver(IIVOSolver newSolver_) public virtual onlyAdmin {\r\n        IIVOSolver oldSolver = solver;\r\n        require(newSolver_.isSolver(), \"invalid solver\");\r\n        solver = newSolver_;\r\n\r\n        emit NewSolver(oldSolver, newSolver_);\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/misc/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nlibrary Constants {\r\n    enum ClaimType {\r\n        LINEAR,\r\n        ONE_TIME,\r\n        STAGED\r\n    }\r\n\r\n    enum VoucherType {\r\n        STANDARD_VESTING,\r\n        FLEXIBLE_DATE_VESTING,\r\n        BOUNDING\r\n    }\r\n\r\n    uint32 internal constant FULL_PERCENTAGE = 10000;\r\n    address internal constant ETH_ADDRESS =\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/access/AdminControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport \"../openzeppelin/utils/ContextUpgradeable.sol\";\r\nimport \"../openzeppelin/proxy/Initializable.sol\";\r\n\r\nabstract contract AdminControl is Initializable, ContextUpgradeable {\r\n\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    address public _admin;\r\n    address public pendingAdmin;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_msgSender() == _admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    function __AdminControl_init(address admin_) internal initializer {\r\n        _admin = admin_;\r\n    }\r\n\r\n    function setPendingAdmin(address newPendingAdmin_) external virtual onlyAdmin {\r\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin_);\r\n        pendingAdmin = newPendingAdmin_;        \r\n    }\r\n\r\n    function acceptAdmin() external virtual {\r\n        require(_msgSender() == pendingAdmin, \"only pending admin\");\r\n        emit NewAdmin(_admin, pendingAdmin);\r\n        _admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n}"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/math/SafeMathUpgradeable128.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable128 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        uint128 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint128 a, uint128 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint128 a, uint128 b) internal pure returns (bool, uint128) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        uint128 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        if (a == 0) return 0;\r\n        uint128 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/helpers/VNFTTransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ERC721Interface {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ninterface VNFTInterface {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) external returns (uint256 newTokenId);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external returns (uint256 newTokenId);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 units\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 units,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\nlibrary VNFTTransferHelper {\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 tokenId\r\n    ) internal {\r\n        ERC721Interface token = ERC721Interface(underlying);\r\n        token.transferFrom(from, address(this), tokenId);\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        ERC721Interface token = ERC721Interface(underlying);\r\n        token.transferFrom(address(this), to, tokenId);\r\n    }\r\n\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) internal {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        token.safeTransferFrom(from, address(this), tokenId, units, \"\");\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 units\r\n    ) internal returns (uint256 newTokenId) {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        newTokenId = token.safeTransferFrom(\r\n            address(this),\r\n            to,\r\n            tokenId,\r\n            units,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 targetTokenId,\r\n        uint256 units\r\n    ) internal {\r\n        VNFTInterface token = VNFTInterface(underlying);\r\n        token.safeTransferFrom(\r\n            address(this),\r\n            to,\r\n            tokenId,\r\n            targetTokenId,\r\n            units,\r\n            \"\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/helpers/ERC20TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\nimport \"../misc/Constants.sol\";\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary ERC20TransferHelper {\r\n    function doTransferIn(\r\n        address underlying,\r\n        address from,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (underlying == Constants.ETH_ADDRESS) {\r\n            // Sanity checks\r\n            require(tx.origin == from || msg.sender == from, \"sender mismatch\");\r\n            require(msg.value == amount, \"value mismatch\");\r\n\r\n            return amount;\r\n        } else {\r\n            require(msg.value == 0, \"don't support msg.value\");\r\n            uint256 balanceBefore = ERC20Interface(underlying).balanceOf(\r\n                address(this)\r\n            );\r\n            (bool success, bytes memory data) = underlying.call(\r\n                abi.encodeWithSelector(\r\n                    ERC20Interface.transferFrom.selector,\r\n                    from,\r\n                    address(this),\r\n                    amount\r\n                )\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"STF\"\r\n            );\r\n\r\n            // Calculate the amount that was *actually* transferred\r\n            uint256 balanceAfter = ERC20Interface(underlying).balanceOf(\r\n                address(this)\r\n            );\r\n            require(\r\n                balanceAfter >= balanceBefore,\r\n                \"TOKEN_TRANSFER_IN_OVERFLOW\"\r\n            );\r\n            return balanceAfter - balanceBefore; // underflow already checked above, just subtract\r\n        }\r\n    }\r\n\r\n    function doTransferOut(\r\n        address underlying,\r\n        address payable to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (underlying == Constants.ETH_ADDRESS) {\r\n            (bool success, ) = to.call{value: amount}(new bytes(0));\r\n            require(success, \"STE\");\r\n        } else {\r\n            (bool success, bytes memory data) = underlying.call(\r\n                abi.encodeWithSelector(\r\n                    ERC20Interface.transfer.selector,\r\n                    to,\r\n                    amount\r\n                )\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"ST\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function getCashPrior(address underlying_) internal view returns (uint256) {\r\n        if (underlying_ == Constants.ETH_ADDRESS) {\r\n            uint256 startingBalance = sub(address(this).balance, msg.value);\r\n            return startingBalance;\r\n        } else {\r\n            ERC20Interface token = ERC20Interface(underlying_);\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nimport \"../proxy/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "src/ivo/commons/solver/interface/IIVOSolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IIVOSolver {\r\n\r\n    event SetOperationPaused (\r\n        address product,\r\n        string operation,\r\n        bool setPaused\r\n    );\r\n\r\n\r\n    function isSolver() external pure returns (bool);\r\n\r\n    function setOperationPaused(address product_, string calldata operation_, bool setPaused_) external;\r\n\r\n    function operationAllowed(string calldata operation_, bytes calldata data_) external returns (uint256);\r\n\r\n    function operationVerify(string calldata operation_, bytes calldata data_) external returns (uint256);\r\n    \r\n}"
    },
    "src/ivo/markets/offering-market-core/PriceManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ncontract PriceManager {\r\n    enum PriceType {\r\n        FIXED,\r\n        DECLIINING_BY_TIME\r\n    }\r\n\r\n    struct DecliningPrice {\r\n        uint128 highest; //起始价格\r\n        uint128 lowest; //最终价格\r\n        uint32 startTime;\r\n        uint32 duration; //持续时间\r\n        uint32 interval; //降价周期\r\n    }\r\n\r\n    //saleId => DecliningPrice\r\n    mapping(uint24 => DecliningPrice) internal decliningPrices;\r\n    mapping(uint24 => uint128) internal fixedPrices;\r\n\r\n    function price(PriceType priceType_, uint24 offeringId_)\r\n        internal\r\n        view\r\n        returns (uint128)\r\n    {\r\n        if (priceType_ == PriceType.FIXED) {\r\n            return fixedPrices[offeringId_];\r\n        }\r\n\r\n        if (priceType_ == PriceType.DECLIINING_BY_TIME) {\r\n            DecliningPrice storage price_ = decliningPrices[offeringId_];\r\n            if (block.timestamp >= price_.startTime + price_.duration) {\r\n                return price_.lowest;\r\n            }\r\n            if (block.timestamp <= price_.startTime) {\r\n                return price_.highest;\r\n            }\r\n\r\n            uint256 lastPrice = price_.highest -\r\n                ((block.timestamp - price_.startTime) / price_.interval) *\r\n                ((price_.interval * (price_.highest - price_.lowest)) /\r\n                    price_.duration);\r\n            uint256 price256 = lastPrice < price_.lowest\r\n                ? price_.lowest\r\n                : lastPrice;\r\n            require(price256 <= uint128(-1), \"price: exceeds uint128 max\");\r\n\r\n            return uint128(price256);\r\n        }\r\n\r\n        revert(\"unsupported priceType\");\r\n    }\r\n\r\n    function setFixedPrice(uint24 offeringId_, uint128 price_) internal {\r\n        fixedPrices[offeringId_] = price_;\r\n    }\r\n\r\n    function setDecliningPrice(\r\n        uint24 offeringId_,\r\n        uint32 startTime_,\r\n        uint128 highest_,\r\n        uint128 lowest_,\r\n        uint32 duration_,\r\n        uint32 interval_\r\n    ) internal {\r\n        require(highest_ > lowest_, \"highest must greater than lowest\");\r\n        require(duration_ >= interval_, \"duration must greater than interval\");\r\n        decliningPrices[offeringId_].startTime = startTime_;\r\n        decliningPrices[offeringId_].highest = highest_;\r\n        decliningPrices[offeringId_].lowest = lowest_;\r\n        decliningPrices[offeringId_].duration = duration_;\r\n        decliningPrices[offeringId_].interval = interval_;\r\n    }\r\n\r\n    function getDecliningPrice(uint24 offeringId_)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 highest,\r\n            uint128 lowest,\r\n            uint32 startTime,\r\n            uint32 duration,\r\n            uint32 interval\r\n        )\r\n    {\r\n        DecliningPrice storage decliningPrice = decliningPrices[offeringId_];\r\n        return (\r\n            decliningPrice.highest,\r\n            decliningPrice.lowest,\r\n            decliningPrice.startTime,\r\n            decliningPrice.duration,\r\n            decliningPrice.interval\r\n        );\r\n    }\r\n\r\n    function getFixedPrice(uint24 offeringId_) external view returns (uint128) {\r\n        return fixedPrices[offeringId_];\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nimport \"../proxy/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\nimport \"../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n"
    },
    "src/ivo/commons/solidity-utils/openzeppelin/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}